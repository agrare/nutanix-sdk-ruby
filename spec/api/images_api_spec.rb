=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Nutanix::ImagesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ImagesApi' do
  before do
    # run before each test
    @api_instance = Nutanix::ImagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ImagesApi' do
    it 'should create an instance of ImagesApi' do
      expect(@api_instance).to be_instance_of(Nutanix::ImagesApi)
    end
  end

  # unit tests for images_list_post
  # Get a list of existing images
  # This operation gets a list of images, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
  # @param get_entities_request 
  # @param [Hash] opts the optional parameters
  # @return [ImageListIntentResponse]
  describe 'images_list_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_migrate_post
  # Migrate images from PE cluster to PC
  # Submits a request to create a task handling image migration operation, returns a task reference. This moves ownership of images from the PE cluster to PC. Image uuids can be obtained by querying the PE instance to list images on the PE. In the case where image uuid list is provided as empty, all images on the cluster that are not currently migrated to PC will be migrated to PC. 
  # @param [Hash] opts the optional parameters
  # @option opts [ImageMigrateInput] :body 
  # @return [ProceduralResponse]
  describe 'images_migrate_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_post
  # Create a new image
  # Images are raw ISO, QCOW2, or VMDK files that are uploaded by a user can be attached to a VM. An ISO image is attached as a virtual CD-ROM drive, and QCOW2 and VMDK files are attached as SCSI disks. An image has to be explicitly added to the self-service catalog before users can create VMs from it. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ImageIntentResponse]
  describe 'images_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_remote_copy_post
  # Copy AHV images between on-prem and Xi
  # Submits a request to create a task handling image remote copy operation, returns a task uuid. In the case where image uuid list is provided as empty, all images on the local PC cluster will be copied to remote PC&#39;s cluster. 
  # @param [Hash] opts the optional parameters
  # @option opts [ImageRemoteCopyInput] :body 
  # @return [ProceduralResponse]
  describe 'images_remote_copy_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_uuid_delete
  # Delete a existing image
  # This operation submits a request to delete a existing image.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [ImageIntentResponse]
  describe 'images_uuid_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_uuid_file_get
  # Get Image Contents
  # Downloads the image based on the UUID specified.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'images_uuid_file_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_uuid_file_put
  # Upload Image Contents
  # Upload the binary bits of an image based on the UUID specified. Note that the image must be created first before an upload can be done. Also, once the image has been uploaded the image cannot be changed. 
  # @param uuid The UUID of the entity.
  # @param image 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_nutanix_checksum_type Checksum type (e.g SHA_1, SHA_256).
  # @option opts [String] :x_nutanix_checksum_bytes Checksum bytes.
  # @return [nil]
  describe 'images_uuid_file_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_uuid_get
  # Get a existing image
  # This operation gets a existing image.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [ImageIntentResponse]
  describe 'images_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for images_uuid_put
  # Update a existing image
  # This operation submits a request to update a existing image based on the input parameters. 
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ImageIntentResponse]
  describe 'images_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
