=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Nutanix::WhatifApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WhatifApi' do
  before do
    # run before each test
    @api_instance = Nutanix::WhatifApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WhatifApi' do
    it 'should create an instance of WhatifApi' do
      expect(@api_instance).to be_instance_of(Nutanix::WhatifApi)
    end
  end

  # unit tests for capacity_planning_recommendations_post
  # Recommend nodes for scenario.
  # Run scenario recommendation in background and return task uuid.
  # @param [Hash] opts the optional parameters
  # @option opts [RecommendationParams] :recommendation_params recommendation request include scenario uuid.
  # @return [ProceduralResponse]
  describe 'capacity_planning_recommendations_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_recommendations_task_uuid_get
  # Get scenario runway and recommendation
  # Get scenario runway and recommendation.
  # @param task_uuid Task uuid in path.
  # @param [Hash] opts the optional parameters
  # @return [WhatifScenario]
  describe 'capacity_planning_recommendations_task_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_reports_post
  # Generate scenario summary pdf report
  # Generate scenario summary pdf report and return task uuid.
  # @param [Hash] opts the optional parameters
  # @option opts [ReportParams] :report_params report request include scenario uuid and locale.
  # @return [ProceduralResponse]
  describe 'capacity_planning_reports_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_reports_task_uuid_get
  # Get scenario summary pdf report
  # Get scenario summary pdf report.
  # @param task_uuid Task uuid in path.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'capacity_planning_reports_task_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_scenarios_get
  # Get scenarios name and uuid with pagination
  # Query all scenarios name and uuid with pagination.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset 
  # @option opts [Integer] :limit 
  # @return [WhatifScenarios]
  describe 'capacity_planning_scenarios_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_scenarios_post
  # Create a scenario
  # Create a new scenario in DB.
  # @param scenario scenario body.
  # @param [Hash] opts the optional parameters
  # @return [CapacityPlanningScenariosPost201Response]
  describe 'capacity_planning_scenarios_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_scenarios_uuid_delete
  # Delete scenario
  # Delete scenario.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'capacity_planning_scenarios_uuid_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_scenarios_uuid_get
  # Get scenario with uuid
  # Get scenario with given uuid.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [WhatifScenario]
  describe 'capacity_planning_scenarios_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for capacity_planning_scenarios_uuid_put
  # Update scenario
  # Update scenario.
  # @param uuid The UUID of the entity.
  # @param scenario scenario body.
  # @param [Hash] opts the optional parameters
  # @return [WhatifScenario]
  describe 'capacity_planning_scenarios_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
