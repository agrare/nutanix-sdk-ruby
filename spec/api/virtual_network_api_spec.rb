=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Nutanix::VirtualNetworkApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'VirtualNetworkApi' do
  before do
    # run before each test
    @api_instance = Nutanix::VirtualNetworkApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VirtualNetworkApi' do
    it 'should create an instance of VirtualNetworkApi' do
      expect(@api_instance).to be_instance_of(Nutanix::VirtualNetworkApi)
    end
  end

  # unit tests for virtual_networks_list_post
  # Get a list of existing virtual networks
  # This operation gets a list of virtual networks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
  # @param get_entities_request 
  # @param [Hash] opts the optional parameters
  # @return [VirtualNetworkListIntentResponse]
  describe 'virtual_networks_list_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for virtual_networks_post
  # Create a new virtual network
  # This operation submits a request to create a new virtual network based on the input parameters. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [VirtualNetworkIntentResponse]
  describe 'virtual_networks_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for virtual_networks_uuid_delete
  # Delete a existing virtual network
  # This operation submits a request to delete a existing virtual network.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [VirtualNetworkIntentResponse]
  describe 'virtual_networks_uuid_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for virtual_networks_uuid_get
  # Get a existing virtual network
  # This operation gets a existing virtual network.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [VirtualNetworkIntentResponse]
  describe 'virtual_networks_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for virtual_networks_uuid_put
  # Update a existing virtual network
  # This operation submits a request to update a existing virtual network based on the input parameters. 
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [VirtualNetworkIntentResponse]
  describe 'virtual_networks_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for vpcs_list_post
  # Get a list of existing VPCs
  # This operation gets a list of VPCs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
  # @param get_entities_request 
  # @param [Hash] opts the optional parameters
  # @return [VpcListIntentResponse]
  describe 'vpcs_list_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for vpcs_post
  # Create a new VPC
  # This operation submits a request to create a new VPC based on the input parameters. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [VpcIntentResponse]
  describe 'vpcs_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for vpcs_uuid_delete
  # Delete a existing VPC
  # This operation submits a request to delete a existing VPC.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [VpcIntentResponse]
  describe 'vpcs_uuid_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for vpcs_uuid_get
  # Get a existing VPC
  # This operation gets a existing VPC.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [VpcIntentResponse]
  describe 'vpcs_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for vpcs_uuid_packet_trace_post
  # Logical Packet Trace
  # Performs a logical packet trace in the specified virtual network. Returns a list of user-configured flows that the packet matched, and the action at each of these flows - if the packet was dropped, forwarded or rerouted to a service VM. 
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [PacketTrace]
  describe 'vpcs_uuid_packet_trace_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for vpcs_uuid_put
  # Update a existing VPC
  # This operation submits a request to update a existing VPC based on the input parameters. 
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [VpcIntentResponse]
  describe 'vpcs_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
