=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Nutanix::ClustersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ClustersApi' do
  before do
    # run before each test
    @api_instance = Nutanix::ClustersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ClustersApi' do
    it 'should create an instance of ClustersApi' do
      expect(@api_instance).to be_instance_of(Nutanix::ClustersApi)
    end
  end

  # unit tests for clusters_entity_replication_target_details_post
  # Get the placement information for an entity. This will be used to identify the replication target for an entity snapshot or placement of the entity. 
  # Get entity placement details.
  # @param spec Entity spec.
  # @param [Hash] opts the optional parameters
  # @return [PlacementDetail]
  describe 'clusters_entity_replication_target_details_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_list_post
  # Get a list of existing clusters
  # This operation gets a list of clusters, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
  # @param get_entities_request 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :force_refresh Forcefully get the latest response. (Values can be True, False) 
  # @return [ClusterListIntentResponse]
  describe 'clusters_list_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post
  # Migrate SSP config from a Prism Element.
  # Migrate SSP config from a Prism Element.
  # @param cluster_uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @option opts [SspConfigInput] :body 
  # @return [SspMigrationStatus]
  describe 'clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_post
  # Apply multicluster configuration from Prism Central.
  # Apply multicluster configuration from Prism Central.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MulticlusterConfigIntentResponse]
  describe 'clusters_multicluster_config_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_uuid_cancel_post
  # Cancel a multicluster configuration request from Prism Central.
  # Cancel a multicluster configuration request by cancelling all queued cluster configuration tasks. 
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_multicluster_config_uuid_cancel_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_uuid_delete
  # Delete a scheduled and unprocessed multicluster configuration request. 
  # Delete a scheduled and unprocessed multicluster configuration request. 
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [MulticlusterConfigIntentResponse]
  describe 'clusters_multicluster_config_uuid_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_uuid_pause_post
  # Pause a multicluster configuration request from Prism Central.
  # Pause a multicluster configuration request by pausing all queued cluster configuration tasks. 
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_multicluster_config_uuid_pause_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_uuid_put
  # Update a scheduled and unprocessed multicluster configuration request. 
  # Update a scheduled and unprocessed multicluster configuration request. 
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [MulticlusterConfigIntentResponse]
  describe 'clusters_multicluster_config_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_multicluster_config_uuid_resume_post
  # Resume a paused multicluster configuration request.
  # Resume a paused multicluster configuration request.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_multicluster_config_uuid_resume_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_recovery_point_resource_reservation_post
  # Update the Lazan resource reservation lease for the given recovery point replication. 
  # Update Lazan resource reservation lease.
  # @param spec Entity spec.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_recovery_point_resource_reservation_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_synchronous_replication_capable_post
  # Get a list of existing clusters
  # \&quot;API to check if a remote cluster is synchronous replication capable.\&quot; 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Array<ClusterSynchronousReplicationCapableResponseInner>]
  describe 'clusters_synchronous_replication_capable_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_ca_certs_ca_name_delete
  # Delete the CA certificate
  # Delete the CA certificate specified by certificate authority name 
  # @param uuid The UUID of the entity.
  # @param ca_name 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_ca_certs_ca_name_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_ca_certs_post
  # Add a new CA certificate
  # Add a new CA certificate
  # @param uuid The UUID of the entity.
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_ca_certs_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_client_auth_delete
  # Remove the CA chain for client authentication
  # Remove the CA chain for client authentication
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_client_auth_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_client_auth_post
  # Import CA chain for client authentication
  # Import CA chain for client authentication
  # @param uuid The UUID of the entity.
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_client_auth_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_client_auth_put
  # Replace the CA chain for client authentication
  # Replace the CA chain for client authentication
  # @param uuid The UUID of the entity.
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_client_auth_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_csrs_get
  # Download CSRs from cluster
  # Download Certificate Signing Requests from cluster
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_csrs_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_csrs_node_ip_get
  # Download CSR from a discovered node
  # Download Certificate Signing Request from a discovered node
  # @param uuid The UUID of the entity.
  # @param node_ip 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_csrs_node_ip_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_pemkey_import_post
  # Import a new key
  # Import a new key
  # @param uuid The UUID of the entity.
  # @param spec 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_pemkey_import_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_pemkey_post
  # Generate a 2048 bits cipher length RSA key
  # Generate a 2048 bits cipher length RSA key
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_pemkey_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_root_delete
  # Remove PC root certificates
  # On PC: - Delete the root certificate that is associated with the specified   cluster UUID from the PC. - Delete the specified root certificate from all PEs registered with the   PC. On PE: - Delete the root certificate that is associated with the specified   cluster UUID from the PE. 
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_root_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_root_get
  # Retrieve PC root certificates
  # On PC: - If the UUID refers to this PC, return the root certificate for the PC. - If the UUID refers to a peer PC, this request is to verify if the peer   root certificate has been stored on this PC, as well as all registered   PEs to this PC; if this is verified, it will return the peer root   certificate. On PE: - The receiving PE returns the root certificate that is associated with   the specified cluster UUID. 
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [Certificate]
  describe 'clusters_uuid_certificates_root_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_root_post
  # Save a PC root certificate on a PC or a PE
  # On PC: - The request specifies with an \&quot;INITIATOR\&quot; role: The PC initiates a   root certificate exchange with all peer PCs. - The request specifies with an \&quot;ACCEPTOR\&quot; role: The PC performs root   certficate exchange with the peer PC by saving peer root certificate   to this PC, as well as all PEs registered with this PC. On PE: - The receiving PE save the peer root certificate. 
  # @param uuid The UUID of the entity.
  # @param root_cert 
  # @param [Hash] opts the optional parameters
  # @return [RootCertificate]
  describe 'clusters_uuid_certificates_root_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_svm_certs_kms_uuid_post
  # Add one or more certificates to a service VM
  # Add one or more certificates to a service VM
  # @param uuid The UUID of the entity.
  # @param kms_uuid 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_svm_certs_kms_uuid_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete
  # Delete the certificate on a service VM
  # Delete the certificate on a service VM
  # @param uuid The UUID of the entity.
  # @param node_uuid 
  # @param kms_uuid 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put
  # Replace the certificate on a service VM
  # Replace the certificate on a service VM
  # @param uuid The UUID of the entity.
  # @param node_uuid 
  # @param kms_uuid 
  # @param cert 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete
  # Delete a existing cloud credentials
  # This operation submits a request to delete a existing cloud credentials.
  # @param uuid The UUID of the entity.
  # @param cloud_type The Cloud Type.
  # @param cloud_credentials_id 
  # @param [Hash] opts the optional parameters
  # @return [CloudCredentialsIntentResponse]
  describe 'clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get
  # Get a existing cloud credentials
  # This operation gets a existing cloud credentials.
  # @param uuid The UUID of the entity.
  # @param cloud_type The Cloud Type.
  # @param cloud_credentials_id 
  # @param [Hash] opts the optional parameters
  # @return [CloudCredentialsIntentResponse]
  describe 'clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put
  # Update a existing cloud credentials
  # This operation submits a request to update a existing cloud credentials based on the input parameters. 
  # @param uuid The UUID of the entity.
  # @param cloud_type The Cloud Type.
  # @param cloud_credentials_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [CloudCredentialsIntentResponse]
  describe 'clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_cloud_credentials_cloud_type_delete
  # Delete all cloud credentials
  # Delete all cloud credentials
  # @param uuid The UUID of the entity.
  # @param cloud_type The Cloud Type.
  # @param [Hash] opts the optional parameters
  # @return [CloudCredentialsIntentResponse]
  describe 'clusters_uuid_cloud_credentials_cloud_type_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_cloud_credentials_cloud_type_list_post
  # Get a list of existing cloud credentials
  # This operation gets a list of cloud credentials, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
  # @param uuid The UUID of the entity.
  # @param cloud_type The Cloud Type.
  # @param get_entities_request 
  # @param [Hash] opts the optional parameters
  # @return [CloudCredentialsListIntentResponse]
  describe 'clusters_uuid_cloud_credentials_cloud_type_list_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_cloud_credentials_cloud_type_post
  # Add a cloud credential for accessing cloud sites
  # Add a cloud credential for accessing cloud sites
  # @param uuid The UUID of the entity.
  # @param cloud_type The Cloud Type.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [CloudCredentialsIntentResponse]
  describe 'clusters_uuid_cloud_credentials_cloud_type_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_get
  # Get a existing cluster
  # This operation gets a existing cluster.
  # @param uuid The UUID of the entity.
  # @param [Hash] opts the optional parameters
  # @return [ClusterIntentResponse]
  describe 'clusters_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for clusters_uuid_put
  # Update a existing cluster
  # This operation submits a request to update a existing cluster based on the input parameters. 
  # @param uuid The UUID of the entity.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ClusterIntentResponse]
  describe 'clusters_uuid_put test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
