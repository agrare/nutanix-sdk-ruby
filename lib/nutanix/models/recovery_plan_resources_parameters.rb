=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Parameters for the Recovery Plan. 
  class RecoveryPlanResourcesParameters
    # Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones. 
    attr_accessor :floating_ip_assignment_list

    # A list containing witness configuration. 
    attr_accessor :witness_configuration_list

    # Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones. Each entry of network mapping will have Availability Zone URL, recovery and test network information, static IP assignment for the VMs for the recovery and test networks. For example, Let RNx, TNx denote the recovery and test network information and RIPMx, TIPMx denote the static IP assignment for the VMs. As per below matrix, while performing failover action from Availability Zone AZ1 to AZ2, RN1 will be mapped to RN4 and static IP \"a.b.c.d\" of the VM with reference VMx will be mapped to \"i.j.k.l\". On performing test failover from AZ1 to AZ2, RN1 will be mapped to TN4 and static IP \"a.b.c.d\" of the VM with reference VMx will be mapped to \"I.J.K.L\". [[(AZ1 URL, RN1, TN1, [{VMx, \"a.b.c.d\"}, {VMy, \"e.f.g.h\"}],    [{VMx, \"A.B.C.D\"}, {VMy, \"E.F.G.H\"}]),   (AZ2 URL, RN4, TN4, [{VMx, \"i.j.k.l\"}, {VMy, \"m.n.p.q\"}],    [{VMx, \"I.J.K.L\"}, {VMy, \"M.N.P.Q\"}]),   (AZ3 URL, RN7, TN7)],  [(AZ1 URL, RN2, TN2), (AZ2 URL, RN5, TN5),   (AZ3 URL, RN8, TN8)],  [(AZ1 URL, RN3, TN3), (AZ2 URL, RN6, TN6)]] The order of the static IP assignment for the VMs should remain same across all the networks provided in a network mapping. It forms a matrix containing IP mapping for the VMs across the Availability Zones. If a VM has multiple static IP addresses, static IP mapping will happen on the array indices. For example, Let IPrxy denote an IP address in subnet RNz and IPtxy denote an IP address in the subnet TNz. Lets VMx has two static IP address and VMy, VMz has one static IP associated with a vNIC created in network RN1. The IP mapping for the VMs will be as below.     AZ1, RN1        AZ1, TN1        AZ2, RN3        AZ2, TN2 [(VMx, [IPr11]), (VMx, [IPt11]), (VMx, [IPr12]), (VMx,  [IPt12])] [(VMy, [IPr21]), (VMy, [IPt21]), (VMy, [IPr22]), (VMy,  [IPt22])] [(VMz, [IPr31]), (VMz, [IPt31]), (VMz, [IPr32]), (VMz,  [IPt32])] In case of recovery of VMs from one Prism Element to the other within the same Availability Zone, a list of cluster references where the network exists can be specified. The network mapping to be used for a vNIC is decided as follows - 1. If a VM that has a vNIC in a network N1 on cluster C1, then    the network mapping of N1 that has C1 in the cluster    references list will be used.  2. In case there is no network mapping for N1 with cluster C1,    the default mapping of N1 for the Availability Zone (in which    cluster is not specified), will be used if present. 
    attr_accessor :network_mapping_list

    # IP address mappings for attaching Volume Groups to VMs upon failover. 
    attr_accessor :data_service_ip_mapping_list

    # A list containing information about primary and secondary Availability zones. 
    attr_accessor :availability_zone_list

    # This field should be set to the index of the Availability Zone in the availability_zone_list which should be considered as a protected Availability Zone. 
    attr_accessor :primary_location_index

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'floating_ip_assignment_list' => :'floating_ip_assignment_list',
        :'witness_configuration_list' => :'witness_configuration_list',
        :'network_mapping_list' => :'network_mapping_list',
        :'data_service_ip_mapping_list' => :'data_service_ip_mapping_list',
        :'availability_zone_list' => :'availability_zone_list',
        :'primary_location_index' => :'primary_location_index'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'floating_ip_assignment_list' => :'Array<RecoveryPlanResourcesParametersFloatingIpAssignmentListInner>',
        :'witness_configuration_list' => :'Array<WitnessConfiguration>',
        :'network_mapping_list' => :'Array<RecoveryPlanResourcesParametersNetworkMappingListInner>',
        :'data_service_ip_mapping_list' => :'Array<RecoveryPlanResourcesParametersDataServiceIpMappingListInner>',
        :'availability_zone_list' => :'Array<AvailabilityZoneInformation>',
        :'primary_location_index' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::RecoveryPlanResourcesParameters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::RecoveryPlanResourcesParameters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'floating_ip_assignment_list')
        if (value = attributes[:'floating_ip_assignment_list']).is_a?(Array)
          self.floating_ip_assignment_list = value
        end
      end

      if attributes.key?(:'witness_configuration_list')
        if (value = attributes[:'witness_configuration_list']).is_a?(Array)
          self.witness_configuration_list = value
        end
      end

      if attributes.key?(:'network_mapping_list')
        if (value = attributes[:'network_mapping_list']).is_a?(Array)
          self.network_mapping_list = value
        end
      end

      if attributes.key?(:'data_service_ip_mapping_list')
        if (value = attributes[:'data_service_ip_mapping_list']).is_a?(Array)
          self.data_service_ip_mapping_list = value
        end
      end

      if attributes.key?(:'availability_zone_list')
        if (value = attributes[:'availability_zone_list']).is_a?(Array)
          self.availability_zone_list = value
        end
      end

      if attributes.key?(:'primary_location_index')
        self.primary_location_index = attributes[:'primary_location_index']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@witness_configuration_list.nil? && @witness_configuration_list.length > 1
        invalid_properties.push('invalid value for "witness_configuration_list", number of items must be less than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@witness_configuration_list.nil? && @witness_configuration_list.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] witness_configuration_list Value to be assigned
    def witness_configuration_list=(witness_configuration_list)
      if witness_configuration_list.nil?
        fail ArgumentError, 'witness_configuration_list cannot be nil'
      end

      if witness_configuration_list.length > 1
        fail ArgumentError, 'invalid value for "witness_configuration_list", number of items must be less than or equal to 1.'
      end

      @witness_configuration_list = witness_configuration_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          floating_ip_assignment_list == o.floating_ip_assignment_list &&
          witness_configuration_list == o.witness_configuration_list &&
          network_mapping_list == o.network_mapping_list &&
          data_service_ip_mapping_list == o.data_service_ip_mapping_list &&
          availability_zone_list == o.availability_zone_list &&
          primary_location_index == o.primary_location_index
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [floating_ip_assignment_list, witness_configuration_list, network_mapping_list, data_service_ip_mapping_list, availability_zone_list, primary_location_index].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
