=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Protection rule encodes the overall topology of all the availability zones where the entity is replicated to. This encoding allows the system to figure out where the entity should be running in the case of one or more availability zone failures. 
  class ProtectionRuleResources
    # Time of the day, the policy will be started. This is in \"<x>h:<y>m\" format. The values must be between 00h:00m and 23h:59m. For example user specified 18h:00m and the current time is 17h:00m then the first snapshot will be captured at 18h:00m. If the current time is 19h:00m then the first snapshot will be captured at 18h:00m next day. If not set, policy will be applicable immediately. 
    attr_accessor :start_time

    # This encodes the datapipes between various availability zones and the backup policy of the pipes. For example, [1, 2, 3600], [2, 3, 3600], [4, 5, 15000], [2, 6, 4200]. Note 2 here means the entry at index 2 in the ordered_availability_zone_list. And 3600 is the RPO (Recovery Point Objective) in seconds between the two availability zones. 
    attr_accessor :availability_zone_connectivity_list

    # A list of availability zones, each of which, receives a replica of the data for the entities protected by this protection rule. The order of the availability zones in the list determines the preference order (highest to lowest) for the entity to run in the case of failure of one or more availability zones. For example, if this list is [A, B, C, D], then the entity will prefer to run on A unless A has failed, in which case, the entity will run on the second choice, B. Failover of the entity is not automatic but this information is used by DR runbook to failover an entity to the desired availability zone. 
    attr_accessor :ordered_availability_zone_list

    # List of indexes in ordered_availability_zone_list, which constitutes the primary locations of this Protection Rule. This field is mandatory if more than two Availability Zones are provided in the policy. 
    attr_accessor :primary_location_list

    attr_accessor :category_filter

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'start_time' => :'start_time',
        :'availability_zone_connectivity_list' => :'availability_zone_connectivity_list',
        :'ordered_availability_zone_list' => :'ordered_availability_zone_list',
        :'primary_location_list' => :'primary_location_list',
        :'category_filter' => :'category_filter'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'start_time' => :'String',
        :'availability_zone_connectivity_list' => :'Array<ProtectionRuleResourcesAvailabilityZoneConnectivityListInner>',
        :'ordered_availability_zone_list' => :'Array<ProtectionRuleResourcesOrderedAvailabilityZoneListInner>',
        :'primary_location_list' => :'Array<Integer>',
        :'category_filter' => :'CategoryFilter'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ProtectionRuleResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ProtectionRuleResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'availability_zone_connectivity_list')
        if (value = attributes[:'availability_zone_connectivity_list']).is_a?(Array)
          self.availability_zone_connectivity_list = value
        end
      else
        self.availability_zone_connectivity_list = nil
      end

      if attributes.key?(:'ordered_availability_zone_list')
        if (value = attributes[:'ordered_availability_zone_list']).is_a?(Array)
          self.ordered_availability_zone_list = value
        end
      else
        self.ordered_availability_zone_list = nil
      end

      if attributes.key?(:'primary_location_list')
        if (value = attributes[:'primary_location_list']).is_a?(Array)
          self.primary_location_list = value
        end
      end

      if attributes.key?(:'category_filter')
        self.category_filter = attributes[:'category_filter']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @availability_zone_connectivity_list.nil?
        invalid_properties.push('invalid value for "availability_zone_connectivity_list", availability_zone_connectivity_list cannot be nil.')
      end

      if @ordered_availability_zone_list.nil?
        invalid_properties.push('invalid value for "ordered_availability_zone_list", ordered_availability_zone_list cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @availability_zone_connectivity_list.nil?
      return false if @ordered_availability_zone_list.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          start_time == o.start_time &&
          availability_zone_connectivity_list == o.availability_zone_connectivity_list &&
          ordered_availability_zone_list == o.ordered_availability_zone_list &&
          primary_location_list == o.primary_location_list &&
          category_filter == o.category_filter
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [start_time, availability_zone_connectivity_list, ordered_availability_zone_list, primary_location_list, category_filter].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
