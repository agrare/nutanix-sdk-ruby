=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Disk resources.
  class DiskDefStatusResources
    attr_accessor :host_reference

    # Disk feature flags - 'CanAddAsNewDisk': Flag to indicate if this disk can be added as    new disk. - 'CanAddAsOldDisk': Flag to indicate if the disk can be added as    old disk. - 'BootDisk': Flag to indicate if its a boot disk. - 'OnlyBootDisk': Flag to indicate if the disk is boot only and    no disk operation to be run on it. - 'SelfEncryptingEnabled': Flag to indicate if the disk has self    encryption enabled. - 'PasswordProtected': Flag to indicate if the disk is password    protected. - 'SelfManagedNvme': Flag to indicate if the NVMe disk is self   managed and no host/CVM reboot required. 
    attr_accessor :enabled_features_list

    # Disk vendor.
    attr_accessor :vendor

    # Mount path.
    attr_accessor :mount_path

    # Storage pool uuid.
    attr_accessor :storage_pool_uuid

    # Array of disk states - 'DataMigrationInitiated': Data Migration Initiated. - 'MarkedForRemovalButNotDetachable': Marked for removal, data    migration is in progress. - 'ReadyToDetach': Flag to indicate the disk is detachable. - 'DataMigrated': Flag to indicate if data migration is completed for    this disk. - 'MarkedForRemoval': Flag to indicate if the disk is marked for    removal. - 'Online': Flag to indicate if the disk is online. - 'Bad': Flag to indicate if the disk is bad. - 'Mounted': Flag to indicate if the disk is mounted. - 'UnderDiagnosis': Flag to indicate if the disk is under diagnosis. 
    attr_accessor :state_list

    # Storage tier type.
    attr_accessor :storage_tier_type

    # Disk size in bytes.
    attr_accessor :size_bytes

    # Disk location in a node.
    attr_accessor :slot_number

    # Disk serial number.
    attr_accessor :serial_number

    # Disk model.
    attr_accessor :model

    # Firmware version.
    attr_accessor :firmware_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'host_reference' => :'host_reference',
        :'enabled_features_list' => :'enabled_features_list',
        :'vendor' => :'vendor',
        :'mount_path' => :'mount_path',
        :'storage_pool_uuid' => :'storage_pool_uuid',
        :'state_list' => :'state_list',
        :'storage_tier_type' => :'storage_tier_type',
        :'size_bytes' => :'size_bytes',
        :'slot_number' => :'slot_number',
        :'serial_number' => :'serial_number',
        :'model' => :'model',
        :'firmware_version' => :'firmware_version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'host_reference' => :'Reference',
        :'enabled_features_list' => :'Array<String>',
        :'vendor' => :'String',
        :'mount_path' => :'String',
        :'storage_pool_uuid' => :'String',
        :'state_list' => :'Array<String>',
        :'storage_tier_type' => :'String',
        :'size_bytes' => :'Integer',
        :'slot_number' => :'Integer',
        :'serial_number' => :'String',
        :'model' => :'String',
        :'firmware_version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::DiskDefStatusResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::DiskDefStatusResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'host_reference')
        self.host_reference = attributes[:'host_reference']
      end

      if attributes.key?(:'enabled_features_list')
        if (value = attributes[:'enabled_features_list']).is_a?(Array)
          self.enabled_features_list = value
        end
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'mount_path')
        self.mount_path = attributes[:'mount_path']
      end

      if attributes.key?(:'storage_pool_uuid')
        self.storage_pool_uuid = attributes[:'storage_pool_uuid']
      end

      if attributes.key?(:'state_list')
        if (value = attributes[:'state_list']).is_a?(Array)
          self.state_list = value
        end
      end

      if attributes.key?(:'storage_tier_type')
        self.storage_tier_type = attributes[:'storage_tier_type']
      end

      if attributes.key?(:'size_bytes')
        self.size_bytes = attributes[:'size_bytes']
      end

      if attributes.key?(:'slot_number')
        self.slot_number = attributes[:'slot_number']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'firmware_version')
        self.firmware_version = attributes[:'firmware_version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@storage_pool_uuid.nil? && @storage_pool_uuid !~ pattern
        invalid_properties.push("invalid value for \"storage_pool_uuid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@storage_pool_uuid.nil? && @storage_pool_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] storage_pool_uuid Value to be assigned
    def storage_pool_uuid=(storage_pool_uuid)
      if storage_pool_uuid.nil?
        fail ArgumentError, 'storage_pool_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if storage_pool_uuid !~ pattern
        fail ArgumentError, "invalid value for \"storage_pool_uuid\", must conform to the pattern #{pattern}."
      end

      @storage_pool_uuid = storage_pool_uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          host_reference == o.host_reference &&
          enabled_features_list == o.enabled_features_list &&
          vendor == o.vendor &&
          mount_path == o.mount_path &&
          storage_pool_uuid == o.storage_pool_uuid &&
          state_list == o.state_list &&
          storage_tier_type == o.storage_tier_type &&
          size_bytes == o.size_bytes &&
          slot_number == o.slot_number &&
          serial_number == o.serial_number &&
          model == o.model &&
          firmware_version == o.firmware_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [host_reference, enabled_features_list, vendor, mount_path, storage_pool_uuid, state_list, storage_tier_type, size_bytes, slot_number, serial_number, model, firmware_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
