=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Description of the marketplace item
  class MarketplaceItemOutputResources
    attr_accessor :app_blueprint_template

    # State indicating if marketplace item is approved, pending or rejected 
    attr_accessor :app_state

    # Person or company which developed the app
    attr_accessor :author

    # The projects this marketplace item has been assigned to
    attr_accessor :project_reference_list

    attr_accessor :icon_reference_list

    # UUID for the group of MPIs which are versions of the same App 
    attr_accessor :app_group_uuid

    # Change log for this version of the app 
    attr_accessor :change_log

    # Indicates version of the App that this marketplace item represents 
    attr_accessor :version

    # Attributes of this app.
    attr_accessor :app_attribute_list

    # Indicates whether the app is Global(Marketplace item) or Local(User created) 
    attr_accessor :app_source

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_blueprint_template' => :'app_blueprint_template',
        :'app_state' => :'app_state',
        :'author' => :'author',
        :'project_reference_list' => :'project_reference_list',
        :'icon_reference_list' => :'icon_reference_list',
        :'app_group_uuid' => :'app_group_uuid',
        :'change_log' => :'change_log',
        :'version' => :'version',
        :'app_attribute_list' => :'app_attribute_list',
        :'app_source' => :'app_source'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_blueprint_template' => :'MarketplaceItemInputResourcesAppBlueprintTemplate',
        :'app_state' => :'String',
        :'author' => :'String',
        :'project_reference_list' => :'Array<ProjectReference>',
        :'icon_reference_list' => :'Array<MarketplaceIcon>',
        :'app_group_uuid' => :'String',
        :'change_log' => :'String',
        :'version' => :'String',
        :'app_attribute_list' => :'Array<String>',
        :'app_source' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::MarketplaceItemOutputResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::MarketplaceItemOutputResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_blueprint_template')
        self.app_blueprint_template = attributes[:'app_blueprint_template']
      else
        self.app_blueprint_template = nil
      end

      if attributes.key?(:'app_state')
        self.app_state = attributes[:'app_state']
      else
        self.app_state = 'PENDING'
      end

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      else
        self.author = nil
      end

      if attributes.key?(:'project_reference_list')
        if (value = attributes[:'project_reference_list']).is_a?(Array)
          self.project_reference_list = value
        end
      end

      if attributes.key?(:'icon_reference_list')
        if (value = attributes[:'icon_reference_list']).is_a?(Array)
          self.icon_reference_list = value
        end
      end

      if attributes.key?(:'app_group_uuid')
        self.app_group_uuid = attributes[:'app_group_uuid']
      end

      if attributes.key?(:'change_log')
        self.change_log = attributes[:'change_log']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'app_attribute_list')
        if (value = attributes[:'app_attribute_list']).is_a?(Array)
          self.app_attribute_list = value
        end
      end

      if attributes.key?(:'app_source')
        self.app_source = attributes[:'app_source']
      else
        self.app_source = 'LOCAL'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @app_blueprint_template.nil?
        invalid_properties.push('invalid value for "app_blueprint_template", app_blueprint_template cannot be nil.')
      end

      if @author.nil?
        invalid_properties.push('invalid value for "author", author cannot be nil.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@app_group_uuid.nil? && @app_group_uuid !~ pattern
        invalid_properties.push("invalid value for \"app_group_uuid\", must conform to the pattern #{pattern}.")
      end

      if !@change_log.nil? && @change_log.to_s.length > 5000
        invalid_properties.push('invalid value for "change_log", the character length must be smaller than or equal to 5000.')
      end

      if !@version.nil? && @version.to_s.length > 64
        invalid_properties.push('invalid value for "version", the character length must be smaller than or equal to 64.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @app_blueprint_template.nil?
      return false if @author.nil?
      return false if !@app_group_uuid.nil? && @app_group_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@change_log.nil? && @change_log.to_s.length > 5000
      return false if !@version.nil? && @version.to_s.length > 64
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] app_group_uuid Value to be assigned
    def app_group_uuid=(app_group_uuid)
      if app_group_uuid.nil?
        fail ArgumentError, 'app_group_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if app_group_uuid !~ pattern
        fail ArgumentError, "invalid value for \"app_group_uuid\", must conform to the pattern #{pattern}."
      end

      @app_group_uuid = app_group_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] change_log Value to be assigned
    def change_log=(change_log)
      if change_log.nil?
        fail ArgumentError, 'change_log cannot be nil'
      end

      if change_log.to_s.length > 5000
        fail ArgumentError, 'invalid value for "change_log", the character length must be smaller than or equal to 5000.'
      end

      @change_log = change_log
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version)
      if version.nil?
        fail ArgumentError, 'version cannot be nil'
      end

      if version.to_s.length > 64
        fail ArgumentError, 'invalid value for "version", the character length must be smaller than or equal to 64.'
      end

      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_blueprint_template == o.app_blueprint_template &&
          app_state == o.app_state &&
          author == o.author &&
          project_reference_list == o.project_reference_list &&
          icon_reference_list == o.icon_reference_list &&
          app_group_uuid == o.app_group_uuid &&
          change_log == o.change_log &&
          version == o.version &&
          app_attribute_list == o.app_attribute_list &&
          app_source == o.app_source
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_blueprint_template, app_state, author, project_reference_list, icon_reference_list, app_group_uuid, change_log, version, app_attribute_list, app_source].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
