=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Workload Object.
  class Workload
    attr_accessor :adjusted_workload

    attr_accessor :sql_workload

    # Workload name.
    attr_accessor :workload_name

    attr_accessor :exchange_workload

    # The variable to indicated if the workload is used as removed workload.
    attr_accessor :to_remove

    # The variable to indicate if the workload is enabled.
    attr_accessor :enabled

    attr_accessor :splunk_workload

    attr_accessor :vdi_workload

    attr_accessor :vm_workload

    # The type of workload.
    attr_accessor :workload_type

    attr_accessor :resource_requirement

    # The scheduled timestamp in seconds.
    attr_accessor :schedule_timestamp_sec

    attr_accessor :xen_workload

    attr_accessor :virtual_server_workload

    attr_accessor :vm_category_workload

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'adjusted_workload' => :'adjusted_workload',
        :'sql_workload' => :'sql_workload',
        :'workload_name' => :'workload_name',
        :'exchange_workload' => :'exchange_workload',
        :'to_remove' => :'to_remove',
        :'enabled' => :'enabled',
        :'splunk_workload' => :'splunk_workload',
        :'vdi_workload' => :'vdi_workload',
        :'vm_workload' => :'vm_workload',
        :'workload_type' => :'workload_type',
        :'resource_requirement' => :'resource_requirement',
        :'schedule_timestamp_sec' => :'schedule_timestamp_sec',
        :'xen_workload' => :'xen_workload',
        :'virtual_server_workload' => :'virtual_server_workload',
        :'vm_category_workload' => :'vm_category_workload'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'adjusted_workload' => :'AdjustedWorkload',
        :'sql_workload' => :'SqlWorkload',
        :'workload_name' => :'String',
        :'exchange_workload' => :'ExchangeWorkload',
        :'to_remove' => :'Boolean',
        :'enabled' => :'Boolean',
        :'splunk_workload' => :'SplunkWorkload',
        :'vdi_workload' => :'VdiWorkload',
        :'vm_workload' => :'VmWorkload',
        :'workload_type' => :'String',
        :'resource_requirement' => :'GenericResourceSpec',
        :'schedule_timestamp_sec' => :'Integer',
        :'xen_workload' => :'XenWorkload',
        :'virtual_server_workload' => :'VirtualServerWorkload',
        :'vm_category_workload' => :'VmCategoryWorkload'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::Workload` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::Workload`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'adjusted_workload')
        self.adjusted_workload = attributes[:'adjusted_workload']
      end

      if attributes.key?(:'sql_workload')
        self.sql_workload = attributes[:'sql_workload']
      end

      if attributes.key?(:'workload_name')
        self.workload_name = attributes[:'workload_name']
      end

      if attributes.key?(:'exchange_workload')
        self.exchange_workload = attributes[:'exchange_workload']
      end

      if attributes.key?(:'to_remove')
        self.to_remove = attributes[:'to_remove']
      else
        self.to_remove = false
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = true
      end

      if attributes.key?(:'splunk_workload')
        self.splunk_workload = attributes[:'splunk_workload']
      end

      if attributes.key?(:'vdi_workload')
        self.vdi_workload = attributes[:'vdi_workload']
      end

      if attributes.key?(:'vm_workload')
        self.vm_workload = attributes[:'vm_workload']
      end

      if attributes.key?(:'workload_type')
        self.workload_type = attributes[:'workload_type']
      end

      if attributes.key?(:'resource_requirement')
        self.resource_requirement = attributes[:'resource_requirement']
      end

      if attributes.key?(:'schedule_timestamp_sec')
        self.schedule_timestamp_sec = attributes[:'schedule_timestamp_sec']
      end

      if attributes.key?(:'xen_workload')
        self.xen_workload = attributes[:'xen_workload']
      end

      if attributes.key?(:'virtual_server_workload')
        self.virtual_server_workload = attributes[:'virtual_server_workload']
      end

      if attributes.key?(:'vm_category_workload')
        self.vm_category_workload = attributes[:'vm_category_workload']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          adjusted_workload == o.adjusted_workload &&
          sql_workload == o.sql_workload &&
          workload_name == o.workload_name &&
          exchange_workload == o.exchange_workload &&
          to_remove == o.to_remove &&
          enabled == o.enabled &&
          splunk_workload == o.splunk_workload &&
          vdi_workload == o.vdi_workload &&
          vm_workload == o.vm_workload &&
          workload_type == o.workload_type &&
          resource_requirement == o.resource_requirement &&
          schedule_timestamp_sec == o.schedule_timestamp_sec &&
          xen_workload == o.xen_workload &&
          virtual_server_workload == o.virtual_server_workload &&
          vm_category_workload == o.vm_category_workload
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [adjusted_workload, sql_workload, workload_name, exchange_workload, to_remove, enabled, splunk_workload, vdi_workload, vm_workload, workload_type, resource_requirement, schedule_timestamp_sec, xen_workload, virtual_server_workload, vm_category_workload].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
