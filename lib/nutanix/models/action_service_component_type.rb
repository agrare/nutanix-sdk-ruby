=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # This is the generic construct for both action type and trigger type. 
  class ActionServiceComponentType
    # Action service component display name.
    attr_accessor :display_name

    # The rule parameters globally available to every component to use. This is provided by system, not by action type or trigger type service. 
    attr_accessor :global_parameters

    # The component required input parameter descriptors.  The key is the parameter name 
    attr_accessor :input_parameters

    # Flag to indicate if this action/trigger type is disabled.
    attr_accessor :is_disabled

    # Action service component type description.
    attr_accessor :description

    # Severity of additional info provided.
    attr_accessor :additional_info_severity

    # The group/bucket in which the component falls into. 
    attr_accessor :group_list

    # The rule parameters available locally to the action/trigger. 
    attr_accessor :local_parameters

    # The component output parameter descriptors. The key is the parameter name. 
    attr_accessor :output_parameters

    # The metadata of form fields/params required for UI to render params. 
    attr_accessor :ui_metadata

    # Additional information about the action/trigger type.
    attr_accessor :additional_info

    # A preconfigured, or dynamically created component type.
    attr_accessor :name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'display_name' => :'display_name',
        :'global_parameters' => :'global_parameters',
        :'input_parameters' => :'input_parameters',
        :'is_disabled' => :'is_disabled',
        :'description' => :'description',
        :'additional_info_severity' => :'additional_info_severity',
        :'group_list' => :'group_list',
        :'local_parameters' => :'local_parameters',
        :'output_parameters' => :'output_parameters',
        :'ui_metadata' => :'ui_metadata',
        :'additional_info' => :'additional_info',
        :'name' => :'name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'display_name' => :'String',
        :'global_parameters' => :'Object',
        :'input_parameters' => :'Object',
        :'is_disabled' => :'Boolean',
        :'description' => :'String',
        :'additional_info_severity' => :'String',
        :'group_list' => :'Array<String>',
        :'local_parameters' => :'Object',
        :'output_parameters' => :'Object',
        :'ui_metadata' => :'Array<DisplayMetadata>',
        :'additional_info' => :'String',
        :'name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ActionServiceComponentType` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ActionServiceComponentType`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      else
        self.display_name = nil
      end

      if attributes.key?(:'global_parameters')
        self.global_parameters = attributes[:'global_parameters']
      end

      if attributes.key?(:'input_parameters')
        self.input_parameters = attributes[:'input_parameters']
      end

      if attributes.key?(:'is_disabled')
        self.is_disabled = attributes[:'is_disabled']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'additional_info_severity')
        self.additional_info_severity = attributes[:'additional_info_severity']
      end

      if attributes.key?(:'group_list')
        if (value = attributes[:'group_list']).is_a?(Array)
          self.group_list = value
        end
      end

      if attributes.key?(:'local_parameters')
        self.local_parameters = attributes[:'local_parameters']
      end

      if attributes.key?(:'output_parameters')
        self.output_parameters = attributes[:'output_parameters']
      end

      if attributes.key?(:'ui_metadata')
        if (value = attributes[:'ui_metadata']).is_a?(Array)
          self.ui_metadata = value
        end
      end

      if attributes.key?(:'additional_info')
        self.additional_info = attributes[:'additional_info']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @display_name.to_s.length > 64
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @display_name !~ pattern
        invalid_properties.push("invalid value for \"display_name\", must conform to the pattern #{pattern}.")
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @description.to_s.length > 255
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 255.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @description !~ pattern
        invalid_properties.push("invalid value for \"description\", must conform to the pattern #{pattern}.")
      end

      if !@additional_info.nil? && @additional_info.to_s.length > 8192
        invalid_properties.push('invalid value for "additional_info", the character length must be smaller than or equal to 8192.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if !@additional_info.nil? && @additional_info !~ pattern
        invalid_properties.push("invalid value for \"additional_info\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @display_name.nil?
      return false if @display_name.to_s.length > 64
      return false if @display_name !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if @description.nil?
      return false if @description.to_s.length > 255
      return false if @description !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if !@additional_info.nil? && @additional_info.to_s.length > 8192
      return false if !@additional_info.nil? && @additional_info !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if @name.nil?
      return false if @name.to_s.length > 64
      return false if @name !~ Regexp.new(/^[^&<>'\/"]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.nil?
        fail ArgumentError, 'display_name cannot be nil'
      end

      if display_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if display_name !~ pattern
        fail ArgumentError, "invalid value for \"display_name\", must conform to the pattern #{pattern}."
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 255
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 255.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if description !~ pattern
        fail ArgumentError, "invalid value for \"description\", must conform to the pattern #{pattern}."
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_info Value to be assigned
    def additional_info=(additional_info)
      if additional_info.nil?
        fail ArgumentError, 'additional_info cannot be nil'
      end

      if additional_info.to_s.length > 8192
        fail ArgumentError, 'invalid value for "additional_info", the character length must be smaller than or equal to 8192.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if additional_info !~ pattern
        fail ArgumentError, "invalid value for \"additional_info\", must conform to the pattern #{pattern}."
      end

      @additional_info = additional_info
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          display_name == o.display_name &&
          global_parameters == o.global_parameters &&
          input_parameters == o.input_parameters &&
          is_disabled == o.is_disabled &&
          description == o.description &&
          additional_info_severity == o.additional_info_severity &&
          group_list == o.group_list &&
          local_parameters == o.local_parameters &&
          output_parameters == o.output_parameters &&
          ui_metadata == o.ui_metadata &&
          additional_info == o.additional_info &&
          name == o.name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [display_name, global_parameters, input_parameters, is_disabled, description, additional_info_severity, group_list, local_parameters, output_parameters, ui_metadata, additional_info, name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
