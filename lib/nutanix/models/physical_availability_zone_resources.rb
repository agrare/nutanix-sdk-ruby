=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Physical Availability Zone Configuration resources.
  class PhysicalAvailabilityZoneResources
    # List of cell FQDN mapped to the cluster.
    attr_accessor :cell_fqdn_list

    attr_accessor :olb_virtual_address

    attr_accessor :xlb_virtual_address

    # Billing Domain Address.
    attr_accessor :billing_domain

    # Flag indicates if the Prism Central can be shared by multiple tenants. Default is False, this must be set to True for XI multitenant PC. 
    attr_accessor :is_multi_tenant

    # IDP Service Provider name.
    attr_accessor :idp_service_provider_name

    attr_accessor :pulse_configuration

    # List of NTP Server addresses.
    attr_accessor :ntp_server_list

    # Reference to the Infra Cloud this physical AZ belongs.
    attr_accessor :cloud_uuid

    # My Nutanix Domain Address used for IDP Registration.
    attr_accessor :my_nutanix_domain

    # External URL for the Physical Availability Zone, required when is_mutlti_tenant set to False. 
    attr_accessor :external_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cell_fqdn_list' => :'cell_fqdn_list',
        :'olb_virtual_address' => :'olb_virtual_address',
        :'xlb_virtual_address' => :'xlb_virtual_address',
        :'billing_domain' => :'billing_domain',
        :'is_multi_tenant' => :'is_multi_tenant',
        :'idp_service_provider_name' => :'idp_service_provider_name',
        :'pulse_configuration' => :'pulse_configuration',
        :'ntp_server_list' => :'ntp_server_list',
        :'cloud_uuid' => :'cloud_uuid',
        :'my_nutanix_domain' => :'my_nutanix_domain',
        :'external_url' => :'external_url'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cell_fqdn_list' => :'Array<String>',
        :'olb_virtual_address' => :'Address',
        :'xlb_virtual_address' => :'Address',
        :'billing_domain' => :'String',
        :'is_multi_tenant' => :'Boolean',
        :'idp_service_provider_name' => :'String',
        :'pulse_configuration' => :'PulseConfiguration',
        :'ntp_server_list' => :'Array<String>',
        :'cloud_uuid' => :'String',
        :'my_nutanix_domain' => :'String',
        :'external_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::PhysicalAvailabilityZoneResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::PhysicalAvailabilityZoneResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cell_fqdn_list')
        if (value = attributes[:'cell_fqdn_list']).is_a?(Array)
          self.cell_fqdn_list = value
        end
      end

      if attributes.key?(:'olb_virtual_address')
        self.olb_virtual_address = attributes[:'olb_virtual_address']
      end

      if attributes.key?(:'xlb_virtual_address')
        self.xlb_virtual_address = attributes[:'xlb_virtual_address']
      end

      if attributes.key?(:'billing_domain')
        self.billing_domain = attributes[:'billing_domain']
      end

      if attributes.key?(:'is_multi_tenant')
        self.is_multi_tenant = attributes[:'is_multi_tenant']
      else
        self.is_multi_tenant = false
      end

      if attributes.key?(:'idp_service_provider_name')
        self.idp_service_provider_name = attributes[:'idp_service_provider_name']
      end

      if attributes.key?(:'pulse_configuration')
        self.pulse_configuration = attributes[:'pulse_configuration']
      end

      if attributes.key?(:'ntp_server_list')
        if (value = attributes[:'ntp_server_list']).is_a?(Array)
          self.ntp_server_list = value
        end
      end

      if attributes.key?(:'cloud_uuid')
        self.cloud_uuid = attributes[:'cloud_uuid']
      end

      if attributes.key?(:'my_nutanix_domain')
        self.my_nutanix_domain = attributes[:'my_nutanix_domain']
      end

      if attributes.key?(:'external_url')
        self.external_url = attributes[:'external_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@cloud_uuid.nil? && @cloud_uuid !~ pattern
        invalid_properties.push("invalid value for \"cloud_uuid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@cloud_uuid.nil? && @cloud_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cloud_uuid Value to be assigned
    def cloud_uuid=(cloud_uuid)
      if cloud_uuid.nil?
        fail ArgumentError, 'cloud_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if cloud_uuid !~ pattern
        fail ArgumentError, "invalid value for \"cloud_uuid\", must conform to the pattern #{pattern}."
      end

      @cloud_uuid = cloud_uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cell_fqdn_list == o.cell_fqdn_list &&
          olb_virtual_address == o.olb_virtual_address &&
          xlb_virtual_address == o.xlb_virtual_address &&
          billing_domain == o.billing_domain &&
          is_multi_tenant == o.is_multi_tenant &&
          idp_service_provider_name == o.idp_service_provider_name &&
          pulse_configuration == o.pulse_configuration &&
          ntp_server_list == o.ntp_server_list &&
          cloud_uuid == o.cloud_uuid &&
          my_nutanix_domain == o.my_nutanix_domain &&
          external_url == o.external_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cell_fqdn_list, olb_virtual_address, xlb_virtual_address, billing_domain, is_multi_tenant, idp_service_provider_name, pulse_configuration, ntp_server_list, cloud_uuid, my_nutanix_domain, external_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
