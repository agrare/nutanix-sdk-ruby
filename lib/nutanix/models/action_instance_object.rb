=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Action instance object.
  class ActionInstanceObject
    # Id to uniquely identify action in instance list.
    attr_accessor :instance_uuid

    attr_accessor :action_type_reference

    # Each action instance already has a default display name from action type.  However, users could change an action instance with a different display name. 
    attr_accessor :display_name

    # The description of the action instance in the rule.  For example, an action instance is used twice in a rule, each serves different purpose, it could use this field to describe the purpose. 
    attr_accessor :description

    # List of possible actions that will be executed after this action.
    attr_accessor :child_action_uuids

    # This field applies to on_timeout enum retry choice.  When this action execution times out, the rule execution will retry the execution until the max retry number is exceeded. 
    attr_accessor :max_retries

    # The action output parameter descriptors.
    attr_accessor :output_parameters

    # The trigger or action required input parameter value map, or the output parameters. 
    attr_accessor :input_parameter_values

    # When this action execution fails, the rule execution should continue to the next action or not. 
    attr_accessor :should_continue_on_failure

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'instance_uuid' => :'instance_uuid',
        :'action_type_reference' => :'action_type_reference',
        :'display_name' => :'display_name',
        :'description' => :'description',
        :'child_action_uuids' => :'child_action_uuids',
        :'max_retries' => :'max_retries',
        :'output_parameters' => :'output_parameters',
        :'input_parameter_values' => :'input_parameter_values',
        :'should_continue_on_failure' => :'should_continue_on_failure'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'instance_uuid' => :'String',
        :'action_type_reference' => :'ActionTypeReference',
        :'display_name' => :'String',
        :'description' => :'String',
        :'child_action_uuids' => :'Array<String>',
        :'max_retries' => :'Integer',
        :'output_parameters' => :'Object',
        :'input_parameter_values' => :'Hash<String, String>',
        :'should_continue_on_failure' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ActionInstanceObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ActionInstanceObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'instance_uuid')
        self.instance_uuid = attributes[:'instance_uuid']
      else
        self.instance_uuid = nil
      end

      if attributes.key?(:'action_type_reference')
        self.action_type_reference = attributes[:'action_type_reference']
      else
        self.action_type_reference = nil
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'child_action_uuids')
        if (value = attributes[:'child_action_uuids']).is_a?(Array)
          self.child_action_uuids = value
        end
      end

      if attributes.key?(:'max_retries')
        self.max_retries = attributes[:'max_retries']
      end

      if attributes.key?(:'output_parameters')
        self.output_parameters = attributes[:'output_parameters']
      end

      if attributes.key?(:'input_parameter_values')
        if (value = attributes[:'input_parameter_values']).is_a?(Hash)
          self.input_parameter_values = value
        end
      end

      if attributes.key?(:'should_continue_on_failure')
        self.should_continue_on_failure = attributes[:'should_continue_on_failure']
      else
        self.should_continue_on_failure = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @instance_uuid.nil?
        invalid_properties.push('invalid value for "instance_uuid", instance_uuid cannot be nil.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @instance_uuid !~ pattern
        invalid_properties.push("invalid value for \"instance_uuid\", must conform to the pattern #{pattern}.")
      end

      if @action_type_reference.nil?
        invalid_properties.push('invalid value for "action_type_reference", action_type_reference cannot be nil.')
      end

      if !@display_name.nil? && @display_name.to_s.length > 255
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 255.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if !@display_name.nil? && @display_name !~ pattern
        invalid_properties.push("invalid value for \"display_name\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.length > 255
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 255.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if !@description.nil? && @description !~ pattern
        invalid_properties.push("invalid value for \"description\", must conform to the pattern #{pattern}.")
      end

      if !@max_retries.nil? && @max_retries > 5
        invalid_properties.push('invalid value for "max_retries", must be smaller than or equal to 5.')
      end

      if @should_continue_on_failure.nil?
        invalid_properties.push('invalid value for "should_continue_on_failure", should_continue_on_failure cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @instance_uuid.nil?
      return false if @instance_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if @action_type_reference.nil?
      return false if !@display_name.nil? && @display_name.to_s.length > 255
      return false if !@display_name.nil? && @display_name !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if !@description.nil? && @description.to_s.length > 255
      return false if !@description.nil? && @description !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if !@max_retries.nil? && @max_retries > 5
      return false if @should_continue_on_failure.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] instance_uuid Value to be assigned
    def instance_uuid=(instance_uuid)
      if instance_uuid.nil?
        fail ArgumentError, 'instance_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if instance_uuid !~ pattern
        fail ArgumentError, "invalid value for \"instance_uuid\", must conform to the pattern #{pattern}."
      end

      @instance_uuid = instance_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.nil?
        fail ArgumentError, 'display_name cannot be nil'
      end

      if display_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 255.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if display_name !~ pattern
        fail ArgumentError, "invalid value for \"display_name\", must conform to the pattern #{pattern}."
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 255
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 255.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if description !~ pattern
        fail ArgumentError, "invalid value for \"description\", must conform to the pattern #{pattern}."
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] max_retries Value to be assigned
    def max_retries=(max_retries)
      if max_retries.nil?
        fail ArgumentError, 'max_retries cannot be nil'
      end

      if max_retries > 5
        fail ArgumentError, 'invalid value for "max_retries", must be smaller than or equal to 5.'
      end

      @max_retries = max_retries
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          instance_uuid == o.instance_uuid &&
          action_type_reference == o.action_type_reference &&
          display_name == o.display_name &&
          description == o.description &&
          child_action_uuids == o.child_action_uuids &&
          max_retries == o.max_retries &&
          output_parameters == o.output_parameters &&
          input_parameter_values == o.input_parameter_values &&
          should_continue_on_failure == o.should_continue_on_failure
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [instance_uuid, action_type_reference, display_name, description, child_action_uuids, max_retries, output_parameters, input_parameter_values, should_continue_on_failure].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
