=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  class RecoveryPointResources1
    # This field is same for all the entities (irrespective of kind) that were snapshotted together. 
    attr_accessor :consistency_group_uuid

    attr_accessor :source_availability_zone_reference

    attr_accessor :source_cluster_reference

    attr_accessor :recoverability

    attr_accessor :parent_vm_reference

    # Crash consistent or Application Consistent recovery point
    attr_accessor :recovery_point_type

    attr_accessor :vm_spec

    # Location agnostic UUID of the recovery point. If a recovery point is replicated to a different clusters, then all the instances of same recovery point will share this UUID. 
    attr_accessor :vm_recovery_point_location_agnostic_uuid

    # The time when the the recovery point is created. This is in internet date/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z, this represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. 
    attr_accessor :creation_time

    attr_accessor :vm_metadata

    # The time when this recovery point expires and will be garbage collected. This is in internet date/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z, this represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not set, then the recovery point never expires. 
    attr_accessor :expiration_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'consistency_group_uuid' => :'consistency_group_uuid',
        :'source_availability_zone_reference' => :'source_availability_zone_reference',
        :'source_cluster_reference' => :'source_cluster_reference',
        :'recoverability' => :'recoverability',
        :'parent_vm_reference' => :'parent_vm_reference',
        :'recovery_point_type' => :'recovery_point_type',
        :'vm_spec' => :'vm_spec',
        :'vm_recovery_point_location_agnostic_uuid' => :'vm_recovery_point_location_agnostic_uuid',
        :'creation_time' => :'creation_time',
        :'vm_metadata' => :'vm_metadata',
        :'expiration_time' => :'expiration_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'consistency_group_uuid' => :'String',
        :'source_availability_zone_reference' => :'AvailabilityZoneReference',
        :'source_cluster_reference' => :'ClusterReference',
        :'recoverability' => :'RecoveryPointResources1Recoverability',
        :'parent_vm_reference' => :'VmReference',
        :'recovery_point_type' => :'String',
        :'vm_spec' => :'Vm',
        :'vm_recovery_point_location_agnostic_uuid' => :'String',
        :'creation_time' => :'String',
        :'vm_metadata' => :'VmMetadata',
        :'expiration_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::RecoveryPointResources1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::RecoveryPointResources1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'consistency_group_uuid')
        self.consistency_group_uuid = attributes[:'consistency_group_uuid']
      end

      if attributes.key?(:'source_availability_zone_reference')
        self.source_availability_zone_reference = attributes[:'source_availability_zone_reference']
      end

      if attributes.key?(:'source_cluster_reference')
        self.source_cluster_reference = attributes[:'source_cluster_reference']
      end

      if attributes.key?(:'recoverability')
        self.recoverability = attributes[:'recoverability']
      end

      if attributes.key?(:'parent_vm_reference')
        self.parent_vm_reference = attributes[:'parent_vm_reference']
      end

      if attributes.key?(:'recovery_point_type')
        self.recovery_point_type = attributes[:'recovery_point_type']
      end

      if attributes.key?(:'vm_spec')
        self.vm_spec = attributes[:'vm_spec']
      end

      if attributes.key?(:'vm_recovery_point_location_agnostic_uuid')
        self.vm_recovery_point_location_agnostic_uuid = attributes[:'vm_recovery_point_location_agnostic_uuid']
      end

      if attributes.key?(:'creation_time')
        self.creation_time = attributes[:'creation_time']
      end

      if attributes.key?(:'vm_metadata')
        self.vm_metadata = attributes[:'vm_metadata']
      end

      if attributes.key?(:'expiration_time')
        self.expiration_time = attributes[:'expiration_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@consistency_group_uuid.nil? && @consistency_group_uuid !~ pattern
        invalid_properties.push("invalid value for \"consistency_group_uuid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@vm_recovery_point_location_agnostic_uuid.nil? && @vm_recovery_point_location_agnostic_uuid !~ pattern
        invalid_properties.push("invalid value for \"vm_recovery_point_location_agnostic_uuid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@consistency_group_uuid.nil? && @consistency_group_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@vm_recovery_point_location_agnostic_uuid.nil? && @vm_recovery_point_location_agnostic_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] consistency_group_uuid Value to be assigned
    def consistency_group_uuid=(consistency_group_uuid)
      if consistency_group_uuid.nil?
        fail ArgumentError, 'consistency_group_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if consistency_group_uuid !~ pattern
        fail ArgumentError, "invalid value for \"consistency_group_uuid\", must conform to the pattern #{pattern}."
      end

      @consistency_group_uuid = consistency_group_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] vm_recovery_point_location_agnostic_uuid Value to be assigned
    def vm_recovery_point_location_agnostic_uuid=(vm_recovery_point_location_agnostic_uuid)
      if vm_recovery_point_location_agnostic_uuid.nil?
        fail ArgumentError, 'vm_recovery_point_location_agnostic_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if vm_recovery_point_location_agnostic_uuid !~ pattern
        fail ArgumentError, "invalid value for \"vm_recovery_point_location_agnostic_uuid\", must conform to the pattern #{pattern}."
      end

      @vm_recovery_point_location_agnostic_uuid = vm_recovery_point_location_agnostic_uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          consistency_group_uuid == o.consistency_group_uuid &&
          source_availability_zone_reference == o.source_availability_zone_reference &&
          source_cluster_reference == o.source_cluster_reference &&
          recoverability == o.recoverability &&
          parent_vm_reference == o.parent_vm_reference &&
          recovery_point_type == o.recovery_point_type &&
          vm_spec == o.vm_spec &&
          vm_recovery_point_location_agnostic_uuid == o.vm_recovery_point_location_agnostic_uuid &&
          creation_time == o.creation_time &&
          vm_metadata == o.vm_metadata &&
          expiration_time == o.expiration_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [consistency_group_uuid, source_availability_zone_reference, source_cluster_reference, recoverability, parent_vm_reference, recovery_point_type, vm_spec, vm_recovery_point_location_agnostic_uuid, creation_time, vm_metadata, expiration_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
