=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # VM Resources Status Definition.
  class VmResourcesDefStatus
    # Number of logical threads per core.
    attr_accessor :num_threads_per_core

    # Indicates whether the VM is an agent VM.
    attr_accessor :is_agent_vm

    attr_accessor :protection_policy_state

    # Memory size in MiB.
    attr_accessor :memory_size_mib

    attr_accessor :boot_config

    # Disks attached to the VM.
    attr_accessor :disk_list

    # Serial ports configured on the VM.
    attr_accessor :serial_port_list

    # Indicates whether the vCPUs should be hard pinned to specific pCPUs.
    attr_accessor :is_vcpu_hard_pinned

    # Current power state of the VM.
    attr_accessor :power_state

    # Status of the Recovery Plans associated with the VM.
    attr_accessor :recovery_plan_state_list

    attr_accessor :effective_storage_config

    # Number of vCPUs per socket.
    attr_accessor :num_vcpus_per_socket

    # Number of vCPU sockets.
    attr_accessor :num_sockets

    # Indicates whether hardware assisted virtualization should be enabled for the Guest OS. Once enabled, the Guest OS has the ability to deploy a nested hypervisor. 
    attr_accessor :hardware_virtualization_enabled

    attr_accessor :storage_config

    # The type of protection applied on a VM. PD_PROTECTED indicates a VM protected using Prism Element. RULE_PROTECTED indicates a VM protected using Prism Central. 
    attr_accessor :protection_type

    # GPUs attached to the VM.
    attr_accessor :gpu_list

    # Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks. 
    attr_accessor :machine_type

    # VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles). 
    attr_accessor :hardware_clock_timezone

    attr_accessor :guest_customization

    attr_accessor :power_state_mechanism

    # Indicates whether VGA console has been enabled or not.
    attr_accessor :vga_console_enabled

    # Indicates whether memory overcommit feature should be enabled for the VM. If enabled, parts of the VM's memory may reside outside of the hypervisor physical memory. When enabled, it should be expected that the VM may suffer performance degradation. 
    attr_accessor :memory_overcommit_enabled

    attr_accessor :vnuma_config

    # NICs attached to the VM.
    attr_accessor :nic_list

    attr_accessor :host_reference

    # String that identifies the OS running inside of the guest. Reserved for use by the system. Do not set or modify.
    attr_accessor :guest_os_id

    attr_accessor :guest_tools

    # Indicates whether vGPU console is enabled or not.
    attr_accessor :gpu_console_enabled

    attr_accessor :vtpm_config

    # Indicates whether to passthrough the host's CPU features to the guest. Enabling this will disable live migration of the VM. 
    attr_accessor :enable_cpu_passthrough

    attr_accessor :parent_reference

    # The hypervisor type for the hypervisor the VM is hosted on. 
    attr_accessor :hypervisor_type

    # Indicates whether to remove AHV branding from VM firmware tables. 
    attr_accessor :disable_branding

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_threads_per_core' => :'num_threads_per_core',
        :'is_agent_vm' => :'is_agent_vm',
        :'protection_policy_state' => :'protection_policy_state',
        :'memory_size_mib' => :'memory_size_mib',
        :'boot_config' => :'boot_config',
        :'disk_list' => :'disk_list',
        :'serial_port_list' => :'serial_port_list',
        :'is_vcpu_hard_pinned' => :'is_vcpu_hard_pinned',
        :'power_state' => :'power_state',
        :'recovery_plan_state_list' => :'recovery_plan_state_list',
        :'effective_storage_config' => :'effective_storage_config',
        :'num_vcpus_per_socket' => :'num_vcpus_per_socket',
        :'num_sockets' => :'num_sockets',
        :'hardware_virtualization_enabled' => :'hardware_virtualization_enabled',
        :'storage_config' => :'storage_config',
        :'protection_type' => :'protection_type',
        :'gpu_list' => :'gpu_list',
        :'machine_type' => :'machine_type',
        :'hardware_clock_timezone' => :'hardware_clock_timezone',
        :'guest_customization' => :'guest_customization',
        :'power_state_mechanism' => :'power_state_mechanism',
        :'vga_console_enabled' => :'vga_console_enabled',
        :'memory_overcommit_enabled' => :'memory_overcommit_enabled',
        :'vnuma_config' => :'vnuma_config',
        :'nic_list' => :'nic_list',
        :'host_reference' => :'host_reference',
        :'guest_os_id' => :'guest_os_id',
        :'guest_tools' => :'guest_tools',
        :'gpu_console_enabled' => :'gpu_console_enabled',
        :'vtpm_config' => :'vtpm_config',
        :'enable_cpu_passthrough' => :'enable_cpu_passthrough',
        :'parent_reference' => :'parent_reference',
        :'hypervisor_type' => :'hypervisor_type',
        :'disable_branding' => :'disable_branding'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'num_threads_per_core' => :'Integer',
        :'is_agent_vm' => :'Boolean',
        :'protection_policy_state' => :'ProtectionPolicyState',
        :'memory_size_mib' => :'Integer',
        :'boot_config' => :'VmBootConfig',
        :'disk_list' => :'Array<VmDiskOutputStatus>',
        :'serial_port_list' => :'Array<SerialPort>',
        :'is_vcpu_hard_pinned' => :'Boolean',
        :'power_state' => :'String',
        :'recovery_plan_state_list' => :'Array<RecoveryPlanPolicyState>',
        :'effective_storage_config' => :'EffectiveStorageConfig',
        :'num_vcpus_per_socket' => :'Integer',
        :'num_sockets' => :'Integer',
        :'hardware_virtualization_enabled' => :'Boolean',
        :'storage_config' => :'VmStorageConfigStatus',
        :'protection_type' => :'String',
        :'gpu_list' => :'Array<VmGpuOutputStatus>',
        :'machine_type' => :'String',
        :'hardware_clock_timezone' => :'String',
        :'guest_customization' => :'GuestCustomizationStatus',
        :'power_state_mechanism' => :'VmPowerStateMechanism',
        :'vga_console_enabled' => :'Boolean',
        :'memory_overcommit_enabled' => :'Boolean',
        :'vnuma_config' => :'VmVnumaConfig',
        :'nic_list' => :'Array<VmNicOutputStatus>',
        :'host_reference' => :'Reference',
        :'guest_os_id' => :'String',
        :'guest_tools' => :'GuestToolsStatus',
        :'gpu_console_enabled' => :'Boolean',
        :'vtpm_config' => :'VmVtpmStatus',
        :'enable_cpu_passthrough' => :'Boolean',
        :'parent_reference' => :'Reference',
        :'hypervisor_type' => :'String',
        :'disable_branding' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::VmResourcesDefStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::VmResourcesDefStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'num_threads_per_core')
        self.num_threads_per_core = attributes[:'num_threads_per_core']
      end

      if attributes.key?(:'is_agent_vm')
        self.is_agent_vm = attributes[:'is_agent_vm']
      end

      if attributes.key?(:'protection_policy_state')
        self.protection_policy_state = attributes[:'protection_policy_state']
      end

      if attributes.key?(:'memory_size_mib')
        self.memory_size_mib = attributes[:'memory_size_mib']
      end

      if attributes.key?(:'boot_config')
        self.boot_config = attributes[:'boot_config']
      end

      if attributes.key?(:'disk_list')
        if (value = attributes[:'disk_list']).is_a?(Array)
          self.disk_list = value
        end
      end

      if attributes.key?(:'serial_port_list')
        if (value = attributes[:'serial_port_list']).is_a?(Array)
          self.serial_port_list = value
        end
      end

      if attributes.key?(:'is_vcpu_hard_pinned')
        self.is_vcpu_hard_pinned = attributes[:'is_vcpu_hard_pinned']
      end

      if attributes.key?(:'power_state')
        self.power_state = attributes[:'power_state']
      end

      if attributes.key?(:'recovery_plan_state_list')
        if (value = attributes[:'recovery_plan_state_list']).is_a?(Array)
          self.recovery_plan_state_list = value
        end
      end

      if attributes.key?(:'effective_storage_config')
        self.effective_storage_config = attributes[:'effective_storage_config']
      end

      if attributes.key?(:'num_vcpus_per_socket')
        self.num_vcpus_per_socket = attributes[:'num_vcpus_per_socket']
      end

      if attributes.key?(:'num_sockets')
        self.num_sockets = attributes[:'num_sockets']
      end

      if attributes.key?(:'hardware_virtualization_enabled')
        self.hardware_virtualization_enabled = attributes[:'hardware_virtualization_enabled']
      end

      if attributes.key?(:'storage_config')
        self.storage_config = attributes[:'storage_config']
      end

      if attributes.key?(:'protection_type')
        self.protection_type = attributes[:'protection_type']
      end

      if attributes.key?(:'gpu_list')
        if (value = attributes[:'gpu_list']).is_a?(Array)
          self.gpu_list = value
        end
      end

      if attributes.key?(:'machine_type')
        self.machine_type = attributes[:'machine_type']
      end

      if attributes.key?(:'hardware_clock_timezone')
        self.hardware_clock_timezone = attributes[:'hardware_clock_timezone']
      end

      if attributes.key?(:'guest_customization')
        self.guest_customization = attributes[:'guest_customization']
      end

      if attributes.key?(:'power_state_mechanism')
        self.power_state_mechanism = attributes[:'power_state_mechanism']
      end

      if attributes.key?(:'vga_console_enabled')
        self.vga_console_enabled = attributes[:'vga_console_enabled']
      end

      if attributes.key?(:'memory_overcommit_enabled')
        self.memory_overcommit_enabled = attributes[:'memory_overcommit_enabled']
      end

      if attributes.key?(:'vnuma_config')
        self.vnuma_config = attributes[:'vnuma_config']
      end

      if attributes.key?(:'nic_list')
        if (value = attributes[:'nic_list']).is_a?(Array)
          self.nic_list = value
        end
      end

      if attributes.key?(:'host_reference')
        self.host_reference = attributes[:'host_reference']
      end

      if attributes.key?(:'guest_os_id')
        self.guest_os_id = attributes[:'guest_os_id']
      end

      if attributes.key?(:'guest_tools')
        self.guest_tools = attributes[:'guest_tools']
      end

      if attributes.key?(:'gpu_console_enabled')
        self.gpu_console_enabled = attributes[:'gpu_console_enabled']
      end

      if attributes.key?(:'vtpm_config')
        self.vtpm_config = attributes[:'vtpm_config']
      end

      if attributes.key?(:'enable_cpu_passthrough')
        self.enable_cpu_passthrough = attributes[:'enable_cpu_passthrough']
      end

      if attributes.key?(:'parent_reference')
        self.parent_reference = attributes[:'parent_reference']
      end

      if attributes.key?(:'hypervisor_type')
        self.hypervisor_type = attributes[:'hypervisor_type']
      end

      if attributes.key?(:'disable_branding')
        self.disable_branding = attributes[:'disable_branding']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@num_threads_per_core.nil? && @num_threads_per_core < 1
        invalid_properties.push('invalid value for "num_threads_per_core", must be greater than or equal to 1.')
      end

      if !@memory_size_mib.nil? && @memory_size_mib < 1
        invalid_properties.push('invalid value for "memory_size_mib", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@num_threads_per_core.nil? && @num_threads_per_core < 1
      return false if !@memory_size_mib.nil? && @memory_size_mib < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] num_threads_per_core Value to be assigned
    def num_threads_per_core=(num_threads_per_core)
      if num_threads_per_core.nil?
        fail ArgumentError, 'num_threads_per_core cannot be nil'
      end

      if num_threads_per_core < 1
        fail ArgumentError, 'invalid value for "num_threads_per_core", must be greater than or equal to 1.'
      end

      @num_threads_per_core = num_threads_per_core
    end

    # Custom attribute writer method with validation
    # @param [Object] memory_size_mib Value to be assigned
    def memory_size_mib=(memory_size_mib)
      if memory_size_mib.nil?
        fail ArgumentError, 'memory_size_mib cannot be nil'
      end

      if memory_size_mib < 1
        fail ArgumentError, 'invalid value for "memory_size_mib", must be greater than or equal to 1.'
      end

      @memory_size_mib = memory_size_mib
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_threads_per_core == o.num_threads_per_core &&
          is_agent_vm == o.is_agent_vm &&
          protection_policy_state == o.protection_policy_state &&
          memory_size_mib == o.memory_size_mib &&
          boot_config == o.boot_config &&
          disk_list == o.disk_list &&
          serial_port_list == o.serial_port_list &&
          is_vcpu_hard_pinned == o.is_vcpu_hard_pinned &&
          power_state == o.power_state &&
          recovery_plan_state_list == o.recovery_plan_state_list &&
          effective_storage_config == o.effective_storage_config &&
          num_vcpus_per_socket == o.num_vcpus_per_socket &&
          num_sockets == o.num_sockets &&
          hardware_virtualization_enabled == o.hardware_virtualization_enabled &&
          storage_config == o.storage_config &&
          protection_type == o.protection_type &&
          gpu_list == o.gpu_list &&
          machine_type == o.machine_type &&
          hardware_clock_timezone == o.hardware_clock_timezone &&
          guest_customization == o.guest_customization &&
          power_state_mechanism == o.power_state_mechanism &&
          vga_console_enabled == o.vga_console_enabled &&
          memory_overcommit_enabled == o.memory_overcommit_enabled &&
          vnuma_config == o.vnuma_config &&
          nic_list == o.nic_list &&
          host_reference == o.host_reference &&
          guest_os_id == o.guest_os_id &&
          guest_tools == o.guest_tools &&
          gpu_console_enabled == o.gpu_console_enabled &&
          vtpm_config == o.vtpm_config &&
          enable_cpu_passthrough == o.enable_cpu_passthrough &&
          parent_reference == o.parent_reference &&
          hypervisor_type == o.hypervisor_type &&
          disable_branding == o.disable_branding
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [num_threads_per_core, is_agent_vm, protection_policy_state, memory_size_mib, boot_config, disk_list, serial_port_list, is_vcpu_hard_pinned, power_state, recovery_plan_state_list, effective_storage_config, num_vcpus_per_socket, num_sockets, hardware_virtualization_enabled, storage_config, protection_type, gpu_list, machine_type, hardware_clock_timezone, guest_customization, power_state_mechanism, vga_console_enabled, memory_overcommit_enabled, vnuma_config, nic_list, host_reference, guest_os_id, guest_tools, gpu_console_enabled, vtpm_config, enable_cpu_passthrough, parent_reference, hypervisor_type, disable_branding].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
