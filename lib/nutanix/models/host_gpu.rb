=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Host GPU.
  class HostGpu
    # Current status of the physical GPU.
    attr_accessor :status

    # Whether this vGPU instance can be allocated to a VM.
    attr_accessor :assignable

    # The vendor of the GPU.
    attr_accessor :vendor

    # Name of the host GPU.
    attr_accessor :name

    # The index of the vGPU within physical GPU resource.
    attr_accessor :index

    # List of license types associated with this GPU.
    attr_accessor :license_list

    # NUMA node this GPU belongs to.
    attr_accessor :numa_node

    # Maximum resolution per display head.
    attr_accessor :max_resolution

    # The number of vGPU instances allocated for this physical GPU resource. 
    attr_accessor :num_vgpus_allocated

    attr_accessor :consumer_reference

    # GPU {segment:bus:device:function} (sbdf) address.
    attr_accessor :pci_address

    # Fraction of the physical GPU.
    attr_accessor :fraction

    # The type of this GPU.
    attr_accessor :mode

    # Number of supported virtual display heads.
    attr_accessor :num_virtual_display_heads

    # Last determined guest driver version.
    attr_accessor :guest_driver_version

    # GPU frame buffer size in MiB.
    attr_accessor :frame_buffer_size_mib

    # The device ID of the GPU.
    attr_accessor :device_id

    # Maximum number of vGPUs of a GPU type assignable to a VM.
    attr_accessor :max_instances_per_vm

    # UUID of the GPU.
    attr_accessor :uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'assignable' => :'assignable',
        :'vendor' => :'vendor',
        :'name' => :'name',
        :'index' => :'index',
        :'license_list' => :'license_list',
        :'numa_node' => :'numa_node',
        :'max_resolution' => :'max_resolution',
        :'num_vgpus_allocated' => :'num_vgpus_allocated',
        :'consumer_reference' => :'consumer_reference',
        :'pci_address' => :'pci_address',
        :'fraction' => :'fraction',
        :'mode' => :'mode',
        :'num_virtual_display_heads' => :'num_virtual_display_heads',
        :'guest_driver_version' => :'guest_driver_version',
        :'frame_buffer_size_mib' => :'frame_buffer_size_mib',
        :'device_id' => :'device_id',
        :'max_instances_per_vm' => :'max_instances_per_vm',
        :'uuid' => :'uuid'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'assignable' => :'Boolean',
        :'vendor' => :'String',
        :'name' => :'String',
        :'index' => :'Integer',
        :'license_list' => :'Array<String>',
        :'numa_node' => :'Integer',
        :'max_resolution' => :'String',
        :'num_vgpus_allocated' => :'Integer',
        :'consumer_reference' => :'Reference',
        :'pci_address' => :'String',
        :'fraction' => :'Integer',
        :'mode' => :'String',
        :'num_virtual_display_heads' => :'Integer',
        :'guest_driver_version' => :'String',
        :'frame_buffer_size_mib' => :'Integer',
        :'device_id' => :'Integer',
        :'max_instances_per_vm' => :'Integer',
        :'uuid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::HostGpu` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::HostGpu`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'assignable')
        self.assignable = attributes[:'assignable']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.key?(:'license_list')
        if (value = attributes[:'license_list']).is_a?(Array)
          self.license_list = value
        end
      end

      if attributes.key?(:'numa_node')
        self.numa_node = attributes[:'numa_node']
      end

      if attributes.key?(:'max_resolution')
        self.max_resolution = attributes[:'max_resolution']
      end

      if attributes.key?(:'num_vgpus_allocated')
        self.num_vgpus_allocated = attributes[:'num_vgpus_allocated']
      end

      if attributes.key?(:'consumer_reference')
        self.consumer_reference = attributes[:'consumer_reference']
      end

      if attributes.key?(:'pci_address')
        self.pci_address = attributes[:'pci_address']
      end

      if attributes.key?(:'fraction')
        self.fraction = attributes[:'fraction']
      end

      if attributes.key?(:'mode')
        self.mode = attributes[:'mode']
      end

      if attributes.key?(:'num_virtual_display_heads')
        self.num_virtual_display_heads = attributes[:'num_virtual_display_heads']
      end

      if attributes.key?(:'guest_driver_version')
        self.guest_driver_version = attributes[:'guest_driver_version']
      end

      if attributes.key?(:'frame_buffer_size_mib')
        self.frame_buffer_size_mib = attributes[:'frame_buffer_size_mib']
      end

      if attributes.key?(:'device_id')
        self.device_id = attributes[:'device_id']
      end

      if attributes.key?(:'max_instances_per_vm')
        self.max_instances_per_vm = attributes[:'max_instances_per_vm']
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@uuid.nil? && @uuid !~ pattern
        invalid_properties.push("invalid value for \"uuid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@uuid.nil? && @uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] uuid Value to be assigned
    def uuid=(uuid)
      if uuid.nil?
        fail ArgumentError, 'uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if uuid !~ pattern
        fail ArgumentError, "invalid value for \"uuid\", must conform to the pattern #{pattern}."
      end

      @uuid = uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          assignable == o.assignable &&
          vendor == o.vendor &&
          name == o.name &&
          index == o.index &&
          license_list == o.license_list &&
          numa_node == o.numa_node &&
          max_resolution == o.max_resolution &&
          num_vgpus_allocated == o.num_vgpus_allocated &&
          consumer_reference == o.consumer_reference &&
          pci_address == o.pci_address &&
          fraction == o.fraction &&
          mode == o.mode &&
          num_virtual_display_heads == o.num_virtual_display_heads &&
          guest_driver_version == o.guest_driver_version &&
          frame_buffer_size_mib == o.frame_buffer_size_mib &&
          device_id == o.device_id &&
          max_instances_per_vm == o.max_instances_per_vm &&
          uuid == o.uuid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, assignable, vendor, name, index, license_list, numa_node, max_resolution, num_vgpus_allocated, consumer_reference, pci_address, fraction, mode, num_virtual_display_heads, guest_driver_version, frame_buffer_size_mib, device_id, max_instances_per_vm, uuid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
