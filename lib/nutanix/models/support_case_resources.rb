=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Support case resources definition.
  class SupportCaseResources
    attr_accessor :contact_details

    attr_accessor :ncc_checks_pc

    attr_accessor :log_collector_pc

    # Nos version of the block for which support case is opened.
    attr_accessor :nos_version

    # Priority of the support case being created Example P4-Low, P3-Normal, P2-Critical, P1-Emergency. 
    attr_accessor :priority

    # Type of the support case being opened.
    attr_accessor :case_type

    # Hypervisor version for which support case is opened.
    attr_accessor :hypervisor_version

    # Serial Number of the block for which help is needed.
    attr_accessor :serial_number

    # List of email addresses of the extra recipients who need to be notified for case management. 
    attr_accessor :additional_notification_list

    attr_accessor :log_collector

    attr_accessor :cluster_reference

    attr_accessor :ncc_checks

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'contact_details' => :'contact_details',
        :'ncc_checks_pc' => :'ncc_checks_pc',
        :'log_collector_pc' => :'log_collector_pc',
        :'nos_version' => :'nos_version',
        :'priority' => :'priority',
        :'case_type' => :'case_type',
        :'hypervisor_version' => :'hypervisor_version',
        :'serial_number' => :'serial_number',
        :'additional_notification_list' => :'additional_notification_list',
        :'log_collector' => :'log_collector',
        :'cluster_reference' => :'cluster_reference',
        :'ncc_checks' => :'ncc_checks'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'contact_details' => :'ContactInformation',
        :'ncc_checks_pc' => :'NccChecksSupportCaseUpload',
        :'log_collector_pc' => :'LogCollectorSupportCaseUpload',
        :'nos_version' => :'String',
        :'priority' => :'String',
        :'case_type' => :'String',
        :'hypervisor_version' => :'String',
        :'serial_number' => :'String',
        :'additional_notification_list' => :'Array<ContactInformation>',
        :'log_collector' => :'LogCollectorSupportCaseUpload',
        :'cluster_reference' => :'ClusterReference',
        :'ncc_checks' => :'NccChecksSupportCaseUpload'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::SupportCaseResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::SupportCaseResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'contact_details')
        self.contact_details = attributes[:'contact_details']
      else
        self.contact_details = nil
      end

      if attributes.key?(:'ncc_checks_pc')
        self.ncc_checks_pc = attributes[:'ncc_checks_pc']
      end

      if attributes.key?(:'log_collector_pc')
        self.log_collector_pc = attributes[:'log_collector_pc']
      end

      if attributes.key?(:'nos_version')
        self.nos_version = attributes[:'nos_version']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'case_type')
        self.case_type = attributes[:'case_type']
      end

      if attributes.key?(:'hypervisor_version')
        self.hypervisor_version = attributes[:'hypervisor_version']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'additional_notification_list')
        if (value = attributes[:'additional_notification_list']).is_a?(Array)
          self.additional_notification_list = value
        end
      end

      if attributes.key?(:'log_collector')
        self.log_collector = attributes[:'log_collector']
      end

      if attributes.key?(:'cluster_reference')
        self.cluster_reference = attributes[:'cluster_reference']
      end

      if attributes.key?(:'ncc_checks')
        self.ncc_checks = attributes[:'ncc_checks']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @contact_details.nil?
        invalid_properties.push('invalid value for "contact_details", contact_details cannot be nil.')
      end

      if !@additional_notification_list.nil? && @additional_notification_list.length > 3
        invalid_properties.push('invalid value for "additional_notification_list", number of items must be less than or equal to 3.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @contact_details.nil?
      return false if !@additional_notification_list.nil? && @additional_notification_list.length > 3
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_notification_list Value to be assigned
    def additional_notification_list=(additional_notification_list)
      if additional_notification_list.nil?
        fail ArgumentError, 'additional_notification_list cannot be nil'
      end

      if additional_notification_list.length > 3
        fail ArgumentError, 'invalid value for "additional_notification_list", number of items must be less than or equal to 3.'
      end

      @additional_notification_list = additional_notification_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          contact_details == o.contact_details &&
          ncc_checks_pc == o.ncc_checks_pc &&
          log_collector_pc == o.log_collector_pc &&
          nos_version == o.nos_version &&
          priority == o.priority &&
          case_type == o.case_type &&
          hypervisor_version == o.hypervisor_version &&
          serial_number == o.serial_number &&
          additional_notification_list == o.additional_notification_list &&
          log_collector == o.log_collector &&
          cluster_reference == o.cluster_reference &&
          ncc_checks == o.ncc_checks
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [contact_details, ncc_checks_pc, log_collector_pc, nos_version, priority, case_type, hypervisor_version, serial_number, additional_notification_list, log_collector, cluster_reference, ncc_checks].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
