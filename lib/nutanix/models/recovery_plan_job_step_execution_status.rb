=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # A step executes an action and can have sub-steps required to perfom the action. Each step has its own UUID, parent UUID and status of the action it is/was performing. 
  class RecoveryPlanJobStepExecutionStatus
    # Status of this step.
    attr_accessor :status

    # The error detail for the step failure.
    attr_accessor :error_detail

    # Reference to the list of the entities on which the step is performing action. 
    attr_accessor :any_entity_reference_list

    # Time when this step started.
    attr_accessor :start_time

    # List containing the details about the recovered entities. 
    attr_accessor :recovered_entity_info_list

    # Percentage of step completed.
    attr_accessor :percentage_complete

    # Sequence number of the step among its siblings. This can be used for ordering the sub-steps for a step. 
    attr_accessor :step_sequence_number

    # Time when this step ended.
    attr_accessor :end_time

    # Type of operation being performed.
    attr_accessor :operation_type

    # UUID of the parent step. 
    attr_accessor :parent_step_uuid

    # User readable message for the action being done for the step. 
    attr_accessor :message

    # The error code for the step failure.
    attr_accessor :error_code

    # UUID of a step.
    attr_accessor :step_uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'error_detail' => :'error_detail',
        :'any_entity_reference_list' => :'any_entity_reference_list',
        :'start_time' => :'start_time',
        :'recovered_entity_info_list' => :'recovered_entity_info_list',
        :'percentage_complete' => :'percentage_complete',
        :'step_sequence_number' => :'step_sequence_number',
        :'end_time' => :'end_time',
        :'operation_type' => :'operation_type',
        :'parent_step_uuid' => :'parent_step_uuid',
        :'message' => :'message',
        :'error_code' => :'error_code',
        :'step_uuid' => :'step_uuid'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'error_detail' => :'String',
        :'any_entity_reference_list' => :'Array<Reference>',
        :'start_time' => :'Time',
        :'recovered_entity_info_list' => :'Array<RecoveredEntityInformation>',
        :'percentage_complete' => :'Integer',
        :'step_sequence_number' => :'Integer',
        :'end_time' => :'Time',
        :'operation_type' => :'String',
        :'parent_step_uuid' => :'String',
        :'message' => :'String',
        :'error_code' => :'String',
        :'step_uuid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::RecoveryPlanJobStepExecutionStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::RecoveryPlanJobStepExecutionStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'error_detail')
        self.error_detail = attributes[:'error_detail']
      end

      if attributes.key?(:'any_entity_reference_list')
        if (value = attributes[:'any_entity_reference_list']).is_a?(Array)
          self.any_entity_reference_list = value
        end
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'recovered_entity_info_list')
        if (value = attributes[:'recovered_entity_info_list']).is_a?(Array)
          self.recovered_entity_info_list = value
        end
      end

      if attributes.key?(:'percentage_complete')
        self.percentage_complete = attributes[:'percentage_complete']
      end

      if attributes.key?(:'step_sequence_number')
        self.step_sequence_number = attributes[:'step_sequence_number']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'operation_type')
        self.operation_type = attributes[:'operation_type']
      else
        self.operation_type = nil
      end

      if attributes.key?(:'parent_step_uuid')
        self.parent_step_uuid = attributes[:'parent_step_uuid']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.key?(:'step_uuid')
        self.step_uuid = attributes[:'step_uuid']
      else
        self.step_uuid = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @operation_type.nil?
        invalid_properties.push('invalid value for "operation_type", operation_type cannot be nil.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@parent_step_uuid.nil? && @parent_step_uuid !~ pattern
        invalid_properties.push("invalid value for \"parent_step_uuid\", must conform to the pattern #{pattern}.")
      end

      if @step_uuid.nil?
        invalid_properties.push('invalid value for "step_uuid", step_uuid cannot be nil.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @step_uuid !~ pattern
        invalid_properties.push("invalid value for \"step_uuid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @status.nil?
      return false if @operation_type.nil?
      return false if !@parent_step_uuid.nil? && @parent_step_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if @step_uuid.nil?
      return false if @step_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_step_uuid Value to be assigned
    def parent_step_uuid=(parent_step_uuid)
      if parent_step_uuid.nil?
        fail ArgumentError, 'parent_step_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if parent_step_uuid !~ pattern
        fail ArgumentError, "invalid value for \"parent_step_uuid\", must conform to the pattern #{pattern}."
      end

      @parent_step_uuid = parent_step_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] step_uuid Value to be assigned
    def step_uuid=(step_uuid)
      if step_uuid.nil?
        fail ArgumentError, 'step_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if step_uuid !~ pattern
        fail ArgumentError, "invalid value for \"step_uuid\", must conform to the pattern #{pattern}."
      end

      @step_uuid = step_uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          error_detail == o.error_detail &&
          any_entity_reference_list == o.any_entity_reference_list &&
          start_time == o.start_time &&
          recovered_entity_info_list == o.recovered_entity_info_list &&
          percentage_complete == o.percentage_complete &&
          step_sequence_number == o.step_sequence_number &&
          end_time == o.end_time &&
          operation_type == o.operation_type &&
          parent_step_uuid == o.parent_step_uuid &&
          message == o.message &&
          error_code == o.error_code &&
          step_uuid == o.step_uuid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, error_detail, any_entity_reference_list, start_time, recovered_entity_info_list, percentage_complete, step_sequence_number, end_time, operation_type, parent_step_uuid, message, error_code, step_uuid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
