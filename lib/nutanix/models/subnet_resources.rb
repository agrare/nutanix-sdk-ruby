=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Subnet creation/modification spec.
  class SubnetResources
    attr_accessor :subnet_type

    attr_accessor :vpc_reference

    # Reference to virtual switch
    attr_accessor :virtual_switch_uuid

    # Whether the subnet is external subnet or not.
    attr_accessor :is_external

    attr_accessor :vswitch_name

    attr_accessor :network_function_chain_reference

    # List of IPs that are not considered while allocating IP addresses to Atlas ports. 
    attr_accessor :reserved_ip_address_list

    # List of availability zones from which resources are derived (Only supported on Xi). 
    attr_accessor :availability_zone_reference_list

    attr_accessor :ip_config

    # Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets. 
    attr_accessor :enable_nat

    # External connectivity state (Only supported on Xi)
    attr_accessor :external_connectivity_state

    attr_accessor :vlan_id

    attr_accessor :virtual_network_reference

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subnet_type' => :'subnet_type',
        :'vpc_reference' => :'vpc_reference',
        :'virtual_switch_uuid' => :'virtual_switch_uuid',
        :'is_external' => :'is_external',
        :'vswitch_name' => :'vswitch_name',
        :'network_function_chain_reference' => :'network_function_chain_reference',
        :'reserved_ip_address_list' => :'reserved_ip_address_list',
        :'availability_zone_reference_list' => :'availability_zone_reference_list',
        :'ip_config' => :'ip_config',
        :'enable_nat' => :'enable_nat',
        :'external_connectivity_state' => :'external_connectivity_state',
        :'vlan_id' => :'vlan_id',
        :'virtual_network_reference' => :'virtual_network_reference'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subnet_type' => :'String',
        :'vpc_reference' => :'VpcReference',
        :'virtual_switch_uuid' => :'String',
        :'is_external' => :'Boolean',
        :'vswitch_name' => :'String',
        :'network_function_chain_reference' => :'NetworkFunctionChainReference',
        :'reserved_ip_address_list' => :'Array<String>',
        :'availability_zone_reference_list' => :'Array<AvailabilityZoneReference>',
        :'ip_config' => :'IpConfig',
        :'enable_nat' => :'Boolean',
        :'external_connectivity_state' => :'String',
        :'vlan_id' => :'Integer',
        :'virtual_network_reference' => :'VirtualNetworkReference'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::SubnetResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::SubnetResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subnet_type')
        self.subnet_type = attributes[:'subnet_type']
      else
        self.subnet_type = nil
      end

      if attributes.key?(:'vpc_reference')
        self.vpc_reference = attributes[:'vpc_reference']
      end

      if attributes.key?(:'virtual_switch_uuid')
        self.virtual_switch_uuid = attributes[:'virtual_switch_uuid']
      end

      if attributes.key?(:'is_external')
        self.is_external = attributes[:'is_external']
      end

      if attributes.key?(:'vswitch_name')
        self.vswitch_name = attributes[:'vswitch_name']
      end

      if attributes.key?(:'network_function_chain_reference')
        self.network_function_chain_reference = attributes[:'network_function_chain_reference']
      end

      if attributes.key?(:'reserved_ip_address_list')
        if (value = attributes[:'reserved_ip_address_list']).is_a?(Array)
          self.reserved_ip_address_list = value
        end
      end

      if attributes.key?(:'availability_zone_reference_list')
        if (value = attributes[:'availability_zone_reference_list']).is_a?(Array)
          self.availability_zone_reference_list = value
        end
      end

      if attributes.key?(:'ip_config')
        self.ip_config = attributes[:'ip_config']
      end

      if attributes.key?(:'enable_nat')
        self.enable_nat = attributes[:'enable_nat']
      end

      if attributes.key?(:'external_connectivity_state')
        self.external_connectivity_state = attributes[:'external_connectivity_state']
      end

      if attributes.key?(:'vlan_id')
        self.vlan_id = attributes[:'vlan_id']
      end

      if attributes.key?(:'virtual_network_reference')
        self.virtual_network_reference = attributes[:'virtual_network_reference']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subnet_type.nil?
        invalid_properties.push('invalid value for "subnet_type", subnet_type cannot be nil.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@virtual_switch_uuid.nil? && @virtual_switch_uuid !~ pattern
        invalid_properties.push("invalid value for \"virtual_switch_uuid\", must conform to the pattern #{pattern}.")
      end

      if !@vswitch_name.nil? && @vswitch_name.to_s.length > 64
        invalid_properties.push('invalid value for "vswitch_name", the character length must be smaller than or equal to 64.')
      end

      if !@vlan_id.nil? && @vlan_id < 0
        invalid_properties.push('invalid value for "vlan_id", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subnet_type.nil?
      return false if !@virtual_switch_uuid.nil? && @virtual_switch_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@vswitch_name.nil? && @vswitch_name.to_s.length > 64
      return false if !@vlan_id.nil? && @vlan_id < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] virtual_switch_uuid Value to be assigned
    def virtual_switch_uuid=(virtual_switch_uuid)
      if virtual_switch_uuid.nil?
        fail ArgumentError, 'virtual_switch_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if virtual_switch_uuid !~ pattern
        fail ArgumentError, "invalid value for \"virtual_switch_uuid\", must conform to the pattern #{pattern}."
      end

      @virtual_switch_uuid = virtual_switch_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] vswitch_name Value to be assigned
    def vswitch_name=(vswitch_name)
      if vswitch_name.nil?
        fail ArgumentError, 'vswitch_name cannot be nil'
      end

      if vswitch_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "vswitch_name", the character length must be smaller than or equal to 64.'
      end

      @vswitch_name = vswitch_name
    end

    # Custom attribute writer method with validation
    # @param [Object] vlan_id Value to be assigned
    def vlan_id=(vlan_id)
      if vlan_id.nil?
        fail ArgumentError, 'vlan_id cannot be nil'
      end

      if vlan_id < 0
        fail ArgumentError, 'invalid value for "vlan_id", must be greater than or equal to 0.'
      end

      @vlan_id = vlan_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subnet_type == o.subnet_type &&
          vpc_reference == o.vpc_reference &&
          virtual_switch_uuid == o.virtual_switch_uuid &&
          is_external == o.is_external &&
          vswitch_name == o.vswitch_name &&
          network_function_chain_reference == o.network_function_chain_reference &&
          reserved_ip_address_list == o.reserved_ip_address_list &&
          availability_zone_reference_list == o.availability_zone_reference_list &&
          ip_config == o.ip_config &&
          enable_nat == o.enable_nat &&
          external_connectivity_state == o.external_connectivity_state &&
          vlan_id == o.vlan_id &&
          virtual_network_reference == o.virtual_network_reference
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subnet_type, vpc_reference, virtual_switch_uuid, is_external, vswitch_name, network_function_chain_reference, reserved_ip_address_list, availability_zone_reference_list, ip_config, enable_nat, external_connectivity_state, vlan_id, virtual_network_reference].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
