=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # IPSEC related configuration spec for the VPN connections.
  class IpsecConfig
    # Virtual tunnel interface IP of the remote VPN gateway.
    attr_accessor :remote_vti_ip

    # IKE Authentication ID of the remote peer.
    attr_accessor :remote_authentication_id

    # Virtual tunnel interface IP of the local VPN gateway.
    attr_accessor :local_vti_ip

    # IKE lifetime (in seconds)
    attr_accessor :ike_lifetime_secs

    # Diffie-Hellman group to be used for Perfect Forward Secrecy (PFS). Supported DH groups are 14, 19 and 20. 
    attr_accessor :esp_pfs_dh_group_number

    # Local IKE authentication ID used for this connection.
    attr_accessor :local_authentication_id

    # IPSec lifetime (in seconds)
    attr_accessor :ipsec_lifetime_secs

    # IP prefix length of the virtual tunnel interface.
    attr_accessor :vti_ip_prefix_length

    # Shared secret for authentication between gateway peers.
    attr_accessor :pre_shared_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'remote_vti_ip' => :'remote_vti_ip',
        :'remote_authentication_id' => :'remote_authentication_id',
        :'local_vti_ip' => :'local_vti_ip',
        :'ike_lifetime_secs' => :'ike_lifetime_secs',
        :'esp_pfs_dh_group_number' => :'esp_pfs_dh_group_number',
        :'local_authentication_id' => :'local_authentication_id',
        :'ipsec_lifetime_secs' => :'ipsec_lifetime_secs',
        :'vti_ip_prefix_length' => :'vti_ip_prefix_length',
        :'pre_shared_key' => :'pre_shared_key'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'remote_vti_ip' => :'String',
        :'remote_authentication_id' => :'String',
        :'local_vti_ip' => :'String',
        :'ike_lifetime_secs' => :'Integer',
        :'esp_pfs_dh_group_number' => :'Integer',
        :'local_authentication_id' => :'String',
        :'ipsec_lifetime_secs' => :'Integer',
        :'vti_ip_prefix_length' => :'Integer',
        :'pre_shared_key' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::IpsecConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::IpsecConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'remote_vti_ip')
        self.remote_vti_ip = attributes[:'remote_vti_ip']
      end

      if attributes.key?(:'remote_authentication_id')
        self.remote_authentication_id = attributes[:'remote_authentication_id']
      end

      if attributes.key?(:'local_vti_ip')
        self.local_vti_ip = attributes[:'local_vti_ip']
      end

      if attributes.key?(:'ike_lifetime_secs')
        self.ike_lifetime_secs = attributes[:'ike_lifetime_secs']
      end

      if attributes.key?(:'esp_pfs_dh_group_number')
        self.esp_pfs_dh_group_number = attributes[:'esp_pfs_dh_group_number']
      end

      if attributes.key?(:'local_authentication_id')
        self.local_authentication_id = attributes[:'local_authentication_id']
      end

      if attributes.key?(:'ipsec_lifetime_secs')
        self.ipsec_lifetime_secs = attributes[:'ipsec_lifetime_secs']
      end

      if attributes.key?(:'vti_ip_prefix_length')
        self.vti_ip_prefix_length = attributes[:'vti_ip_prefix_length']
      end

      if attributes.key?(:'pre_shared_key')
        self.pre_shared_key = attributes[:'pre_shared_key']
      else
        self.pre_shared_key = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@remote_vti_ip.nil? && @remote_vti_ip !~ pattern
        invalid_properties.push("invalid value for \"remote_vti_ip\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@local_vti_ip.nil? && @local_vti_ip !~ pattern
        invalid_properties.push("invalid value for \"local_vti_ip\", must conform to the pattern #{pattern}.")
      end

      if !@vti_ip_prefix_length.nil? && @vti_ip_prefix_length > 32
        invalid_properties.push('invalid value for "vti_ip_prefix_length", must be smaller than or equal to 32.')
      end

      if !@vti_ip_prefix_length.nil? && @vti_ip_prefix_length < 0
        invalid_properties.push('invalid value for "vti_ip_prefix_length", must be greater than or equal to 0.')
      end

      if @pre_shared_key.nil?
        invalid_properties.push('invalid value for "pre_shared_key", pre_shared_key cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@remote_vti_ip.nil? && @remote_vti_ip !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@local_vti_ip.nil? && @local_vti_ip !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@vti_ip_prefix_length.nil? && @vti_ip_prefix_length > 32
      return false if !@vti_ip_prefix_length.nil? && @vti_ip_prefix_length < 0
      return false if @pre_shared_key.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] remote_vti_ip Value to be assigned
    def remote_vti_ip=(remote_vti_ip)
      if remote_vti_ip.nil?
        fail ArgumentError, 'remote_vti_ip cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if remote_vti_ip !~ pattern
        fail ArgumentError, "invalid value for \"remote_vti_ip\", must conform to the pattern #{pattern}."
      end

      @remote_vti_ip = remote_vti_ip
    end

    # Custom attribute writer method with validation
    # @param [Object] local_vti_ip Value to be assigned
    def local_vti_ip=(local_vti_ip)
      if local_vti_ip.nil?
        fail ArgumentError, 'local_vti_ip cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if local_vti_ip !~ pattern
        fail ArgumentError, "invalid value for \"local_vti_ip\", must conform to the pattern #{pattern}."
      end

      @local_vti_ip = local_vti_ip
    end

    # Custom attribute writer method with validation
    # @param [Object] vti_ip_prefix_length Value to be assigned
    def vti_ip_prefix_length=(vti_ip_prefix_length)
      if vti_ip_prefix_length.nil?
        fail ArgumentError, 'vti_ip_prefix_length cannot be nil'
      end

      if vti_ip_prefix_length > 32
        fail ArgumentError, 'invalid value for "vti_ip_prefix_length", must be smaller than or equal to 32.'
      end

      if vti_ip_prefix_length < 0
        fail ArgumentError, 'invalid value for "vti_ip_prefix_length", must be greater than or equal to 0.'
      end

      @vti_ip_prefix_length = vti_ip_prefix_length
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          remote_vti_ip == o.remote_vti_ip &&
          remote_authentication_id == o.remote_authentication_id &&
          local_vti_ip == o.local_vti_ip &&
          ike_lifetime_secs == o.ike_lifetime_secs &&
          esp_pfs_dh_group_number == o.esp_pfs_dh_group_number &&
          local_authentication_id == o.local_authentication_id &&
          ipsec_lifetime_secs == o.ipsec_lifetime_secs &&
          vti_ip_prefix_length == o.vti_ip_prefix_length &&
          pre_shared_key == o.pre_shared_key
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [remote_vti_ip, remote_authentication_id, local_vti_ip, ike_lifetime_secs, esp_pfs_dh_group_number, local_authentication_id, ipsec_lifetime_secs, vti_ip_prefix_length, pre_shared_key].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
