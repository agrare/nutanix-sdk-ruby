=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Alert entity definition.
  class AlertResources
    # The last time this alert was updated.  System sets this.
    attr_accessor :last_update_time

    attr_accessor :source_entity

    # List of cause and resolution object from alert RCA metadata.
    attr_accessor :rca_metadata_list

    # A list of entities causing and/or related to this alert. 
    attr_accessor :affected_entity_list

    # Alert severity
    attr_accessor :severity

    # Alert title
    attr_accessor :title

    # Alert message.
    attr_accessor :default_message

    # The time that this alert was created.
    attr_accessor :creation_time

    attr_accessor :resolution_status

    # The symptoms that caused this alert
    attr_accessor :indicator_list

    attr_accessor :acknowledged_status

    # The alert is raised by user defined policy or not.
    attr_accessor :is_user_defined

    # The field has a list of information alert severity change history. If the alert is duplicated without severity change, then, that instance will not be saved here. 
    attr_accessor :severity_trail_list

    # Component classification
    attr_accessor :classification_list

    # An ordered list of the possible causes and resolutions for the alert. 
    attr_accessor :possible_cause_list

    # The area this alert could impact. 
    attr_accessor :impact_type_list

    # Alert notification type specific parameters.
    attr_accessor :parameters

    # A preconfigured, or dynamically created alert type or alert type UUID. For example, A1128 for the storage pool space usage exceeded alerts, or, a real UUID for user defined alert policy. 
    attr_accessor :type

    # The impact of the alert.
    attr_accessor :impact_list

    # Alert instances could be dedupped by the system.  However, the last time this similar alert was received is still be updated in this field. 
    attr_accessor :latest_occurrence_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'last_update_time' => :'last_update_time',
        :'source_entity' => :'source_entity',
        :'rca_metadata_list' => :'rca_metadata_list',
        :'affected_entity_list' => :'affected_entity_list',
        :'severity' => :'severity',
        :'title' => :'title',
        :'default_message' => :'default_message',
        :'creation_time' => :'creation_time',
        :'resolution_status' => :'resolution_status',
        :'indicator_list' => :'indicator_list',
        :'acknowledged_status' => :'acknowledged_status',
        :'is_user_defined' => :'is_user_defined',
        :'severity_trail_list' => :'severity_trail_list',
        :'classification_list' => :'classification_list',
        :'possible_cause_list' => :'possible_cause_list',
        :'impact_type_list' => :'impact_type_list',
        :'parameters' => :'parameters',
        :'type' => :'type',
        :'impact_list' => :'impact_list',
        :'latest_occurrence_time' => :'latest_occurrence_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'last_update_time' => :'Time',
        :'source_entity' => :'AlertResourcesSourceEntity',
        :'rca_metadata_list' => :'Array<RcaMetadata>',
        :'affected_entity_list' => :'Array<EntityInfo>',
        :'severity' => :'String',
        :'title' => :'String',
        :'default_message' => :'String',
        :'creation_time' => :'Time',
        :'resolution_status' => :'AlertState',
        :'indicator_list' => :'Array<Indicator>',
        :'acknowledged_status' => :'AlertState',
        :'is_user_defined' => :'Boolean',
        :'severity_trail_list' => :'Array<AlertResourcesSeverityTrailListInner>',
        :'classification_list' => :'Array<String>',
        :'possible_cause_list' => :'Array<CauseAnalysis>',
        :'impact_type_list' => :'Array<String>',
        :'parameters' => :'Hash<String, ParamValue>',
        :'type' => :'String',
        :'impact_list' => :'Array<String>',
        :'latest_occurrence_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::AlertResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::AlertResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'last_update_time')
        self.last_update_time = attributes[:'last_update_time']
      end

      if attributes.key?(:'source_entity')
        self.source_entity = attributes[:'source_entity']
      end

      if attributes.key?(:'rca_metadata_list')
        if (value = attributes[:'rca_metadata_list']).is_a?(Array)
          self.rca_metadata_list = value
        end
      end

      if attributes.key?(:'affected_entity_list')
        if (value = attributes[:'affected_entity_list']).is_a?(Array)
          self.affected_entity_list = value
        end
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      else
        self.severity = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end

      if attributes.key?(:'default_message')
        self.default_message = attributes[:'default_message']
      end

      if attributes.key?(:'creation_time')
        self.creation_time = attributes[:'creation_time']
      end

      if attributes.key?(:'resolution_status')
        self.resolution_status = attributes[:'resolution_status']
      end

      if attributes.key?(:'indicator_list')
        if (value = attributes[:'indicator_list']).is_a?(Array)
          self.indicator_list = value
        end
      end

      if attributes.key?(:'acknowledged_status')
        self.acknowledged_status = attributes[:'acknowledged_status']
      end

      if attributes.key?(:'is_user_defined')
        self.is_user_defined = attributes[:'is_user_defined']
      end

      if attributes.key?(:'severity_trail_list')
        if (value = attributes[:'severity_trail_list']).is_a?(Array)
          self.severity_trail_list = value
        end
      end

      if attributes.key?(:'classification_list')
        if (value = attributes[:'classification_list']).is_a?(Array)
          self.classification_list = value
        end
      end

      if attributes.key?(:'possible_cause_list')
        if (value = attributes[:'possible_cause_list']).is_a?(Array)
          self.possible_cause_list = value
        end
      end

      if attributes.key?(:'impact_type_list')
        if (value = attributes[:'impact_type_list']).is_a?(Array)
          self.impact_type_list = value
        end
      end

      if attributes.key?(:'parameters')
        if (value = attributes[:'parameters']).is_a?(Hash)
          self.parameters = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'impact_list')
        if (value = attributes[:'impact_list']).is_a?(Array)
          self.impact_list = value
        end
      end

      if attributes.key?(:'latest_occurrence_time')
        self.latest_occurrence_time = attributes[:'latest_occurrence_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @severity.nil?
        invalid_properties.push('invalid value for "severity", severity cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @severity.nil?
      return false if @title.nil?
      return false if @type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          last_update_time == o.last_update_time &&
          source_entity == o.source_entity &&
          rca_metadata_list == o.rca_metadata_list &&
          affected_entity_list == o.affected_entity_list &&
          severity == o.severity &&
          title == o.title &&
          default_message == o.default_message &&
          creation_time == o.creation_time &&
          resolution_status == o.resolution_status &&
          indicator_list == o.indicator_list &&
          acknowledged_status == o.acknowledged_status &&
          is_user_defined == o.is_user_defined &&
          severity_trail_list == o.severity_trail_list &&
          classification_list == o.classification_list &&
          possible_cause_list == o.possible_cause_list &&
          impact_type_list == o.impact_type_list &&
          parameters == o.parameters &&
          type == o.type &&
          impact_list == o.impact_list &&
          latest_occurrence_time == o.latest_occurrence_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [last_update_time, source_entity, rca_metadata_list, affected_entity_list, severity, title, default_message, creation_time, resolution_status, indicator_list, acknowledged_status, is_user_defined, severity_trail_list, classification_list, possible_cause_list, impact_type_list, parameters, type, impact_list, latest_occurrence_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
