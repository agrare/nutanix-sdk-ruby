=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Direct connect virtual interface spec.
  class DirectConnectVirtualInterfaceResources
    attr_accessor :vpc_reference

    attr_accessor :virtual_network_reference

    attr_accessor :direct_connect_reference

    # Priority assigned to routes received on this connection over eBGP. A higher priority value indicates that the routes are more preferred. 
    attr_accessor :dynamic_route_priority

    # Autonomous system number
    attr_accessor :peer_asn

    # Customer peering IPv4 /30 or /31 prefix.
    attr_accessor :peer_ip_prefix

    # md5 hash for bgp peering.
    attr_accessor :md5

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vpc_reference' => :'vpc_reference',
        :'virtual_network_reference' => :'virtual_network_reference',
        :'direct_connect_reference' => :'direct_connect_reference',
        :'dynamic_route_priority' => :'dynamic_route_priority',
        :'peer_asn' => :'peer_asn',
        :'peer_ip_prefix' => :'peer_ip_prefix',
        :'md5' => :'md5'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'vpc_reference' => :'VpcReference',
        :'virtual_network_reference' => :'VirtualNetworkReference',
        :'direct_connect_reference' => :'DirectConnectReference',
        :'dynamic_route_priority' => :'Integer',
        :'peer_asn' => :'Integer',
        :'peer_ip_prefix' => :'String',
        :'md5' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::DirectConnectVirtualInterfaceResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::DirectConnectVirtualInterfaceResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'vpc_reference')
        self.vpc_reference = attributes[:'vpc_reference']
      end

      if attributes.key?(:'virtual_network_reference')
        self.virtual_network_reference = attributes[:'virtual_network_reference']
      end

      if attributes.key?(:'direct_connect_reference')
        self.direct_connect_reference = attributes[:'direct_connect_reference']
      else
        self.direct_connect_reference = nil
      end

      if attributes.key?(:'dynamic_route_priority')
        self.dynamic_route_priority = attributes[:'dynamic_route_priority']
      end

      if attributes.key?(:'peer_asn')
        self.peer_asn = attributes[:'peer_asn']
      else
        self.peer_asn = nil
      end

      if attributes.key?(:'peer_ip_prefix')
        self.peer_ip_prefix = attributes[:'peer_ip_prefix']
      else
        self.peer_ip_prefix = nil
      end

      if attributes.key?(:'md5')
        self.md5 = attributes[:'md5']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @direct_connect_reference.nil?
        invalid_properties.push('invalid value for "direct_connect_reference", direct_connect_reference cannot be nil.')
      end

      if !@dynamic_route_priority.nil? && @dynamic_route_priority > 1000
        invalid_properties.push('invalid value for "dynamic_route_priority", must be smaller than or equal to 1000.')
      end

      if !@dynamic_route_priority.nil? && @dynamic_route_priority < 10
        invalid_properties.push('invalid value for "dynamic_route_priority", must be greater than or equal to 10.')
      end

      if @peer_asn.nil?
        invalid_properties.push('invalid value for "peer_asn", peer_asn cannot be nil.')
      end

      if @peer_asn > 4294967294
        invalid_properties.push('invalid value for "peer_asn", must be smaller than or equal to 4294967294.')
      end

      if @peer_asn < 0
        invalid_properties.push('invalid value for "peer_asn", must be greater than or equal to 0.')
      end

      if @peer_ip_prefix.nil?
        invalid_properties.push('invalid value for "peer_ip_prefix", peer_ip_prefix cannot be nil.')
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\d|[1-2]\d|3[0-2]))$/)
      if @peer_ip_prefix !~ pattern
        invalid_properties.push("invalid value for \"peer_ip_prefix\", must conform to the pattern #{pattern}.")
      end

      if !@md5.nil? && @md5.to_s.length > 32
        invalid_properties.push('invalid value for "md5", the character length must be smaller than or equal to 32.')
      end

      if !@md5.nil? && @md5.to_s.length < 1
        invalid_properties.push('invalid value for "md5", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @direct_connect_reference.nil?
      return false if !@dynamic_route_priority.nil? && @dynamic_route_priority > 1000
      return false if !@dynamic_route_priority.nil? && @dynamic_route_priority < 10
      return false if @peer_asn.nil?
      return false if @peer_asn > 4294967294
      return false if @peer_asn < 0
      return false if @peer_ip_prefix.nil?
      return false if @peer_ip_prefix !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\d|[1-2]\d|3[0-2]))$/)
      return false if !@md5.nil? && @md5.to_s.length > 32
      return false if !@md5.nil? && @md5.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] dynamic_route_priority Value to be assigned
    def dynamic_route_priority=(dynamic_route_priority)
      if dynamic_route_priority.nil?
        fail ArgumentError, 'dynamic_route_priority cannot be nil'
      end

      if dynamic_route_priority > 1000
        fail ArgumentError, 'invalid value for "dynamic_route_priority", must be smaller than or equal to 1000.'
      end

      if dynamic_route_priority < 10
        fail ArgumentError, 'invalid value for "dynamic_route_priority", must be greater than or equal to 10.'
      end

      @dynamic_route_priority = dynamic_route_priority
    end

    # Custom attribute writer method with validation
    # @param [Object] peer_asn Value to be assigned
    def peer_asn=(peer_asn)
      if peer_asn.nil?
        fail ArgumentError, 'peer_asn cannot be nil'
      end

      if peer_asn > 4294967294
        fail ArgumentError, 'invalid value for "peer_asn", must be smaller than or equal to 4294967294.'
      end

      if peer_asn < 0
        fail ArgumentError, 'invalid value for "peer_asn", must be greater than or equal to 0.'
      end

      @peer_asn = peer_asn
    end

    # Custom attribute writer method with validation
    # @param [Object] peer_ip_prefix Value to be assigned
    def peer_ip_prefix=(peer_ip_prefix)
      if peer_ip_prefix.nil?
        fail ArgumentError, 'peer_ip_prefix cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\d|[1-2]\d|3[0-2]))$/)
      if peer_ip_prefix !~ pattern
        fail ArgumentError, "invalid value for \"peer_ip_prefix\", must conform to the pattern #{pattern}."
      end

      @peer_ip_prefix = peer_ip_prefix
    end

    # Custom attribute writer method with validation
    # @param [Object] md5 Value to be assigned
    def md5=(md5)
      if md5.nil?
        fail ArgumentError, 'md5 cannot be nil'
      end

      if md5.to_s.length > 32
        fail ArgumentError, 'invalid value for "md5", the character length must be smaller than or equal to 32.'
      end

      if md5.to_s.length < 1
        fail ArgumentError, 'invalid value for "md5", the character length must be great than or equal to 1.'
      end

      @md5 = md5
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vpc_reference == o.vpc_reference &&
          virtual_network_reference == o.virtual_network_reference &&
          direct_connect_reference == o.direct_connect_reference &&
          dynamic_route_priority == o.dynamic_route_priority &&
          peer_asn == o.peer_asn &&
          peer_ip_prefix == o.peer_ip_prefix &&
          md5 == o.md5
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [vpc_reference, virtual_network_reference, direct_connect_reference, dynamic_route_priority, peer_asn, peer_ip_prefix, md5].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
