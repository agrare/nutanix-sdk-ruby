=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Action rule result entity definition
  class ActionRuleResultResources
    # Ordered list of action execution results.
    attr_accessor :action_result_list

    attr_accessor :execution_plan

    # The execution status of an action or an action rule.
    attr_accessor :execution_status

    attr_accessor :action_rule_reference

    # The trigger or action required input parameter value map, or the output parameters. 
    attr_accessor :rule_parameter_values

    # List of messages associated with rule execution.
    attr_accessor :execution_messages

    # The time the first action started execution.
    attr_accessor :execution_start_time

    # The information about the triggers.
    attr_accessor :trigger_info_list

    # The time the last action finished execution.
    attr_accessor :execution_end_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action_result_list' => :'action_result_list',
        :'execution_plan' => :'execution_plan',
        :'execution_status' => :'execution_status',
        :'action_rule_reference' => :'action_rule_reference',
        :'rule_parameter_values' => :'rule_parameter_values',
        :'execution_messages' => :'execution_messages',
        :'execution_start_time' => :'execution_start_time',
        :'trigger_info_list' => :'trigger_info_list',
        :'execution_end_time' => :'execution_end_time'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'action_result_list' => :'Array<ActionResult>',
        :'execution_plan' => :'RuleExecutionPlan',
        :'execution_status' => :'String',
        :'action_rule_reference' => :'ActionRuleReference',
        :'rule_parameter_values' => :'Hash<String, String>',
        :'execution_messages' => :'Array<String>',
        :'execution_start_time' => :'Time',
        :'trigger_info_list' => :'Array<TriggerInfo>',
        :'execution_end_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ActionRuleResultResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ActionRuleResultResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'action_result_list')
        if (value = attributes[:'action_result_list']).is_a?(Array)
          self.action_result_list = value
        end
      else
        self.action_result_list = nil
      end

      if attributes.key?(:'execution_plan')
        self.execution_plan = attributes[:'execution_plan']
      else
        self.execution_plan = nil
      end

      if attributes.key?(:'execution_status')
        self.execution_status = attributes[:'execution_status']
      else
        self.execution_status = nil
      end

      if attributes.key?(:'action_rule_reference')
        self.action_rule_reference = attributes[:'action_rule_reference']
      else
        self.action_rule_reference = nil
      end

      if attributes.key?(:'rule_parameter_values')
        if (value = attributes[:'rule_parameter_values']).is_a?(Hash)
          self.rule_parameter_values = value
        end
      end

      if attributes.key?(:'execution_messages')
        if (value = attributes[:'execution_messages']).is_a?(Array)
          self.execution_messages = value
        end
      end

      if attributes.key?(:'execution_start_time')
        self.execution_start_time = attributes[:'execution_start_time']
      end

      if attributes.key?(:'trigger_info_list')
        if (value = attributes[:'trigger_info_list']).is_a?(Array)
          self.trigger_info_list = value
        end
      else
        self.trigger_info_list = nil
      end

      if attributes.key?(:'execution_end_time')
        self.execution_end_time = attributes[:'execution_end_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @action_result_list.nil?
        invalid_properties.push('invalid value for "action_result_list", action_result_list cannot be nil.')
      end

      if @execution_plan.nil?
        invalid_properties.push('invalid value for "execution_plan", execution_plan cannot be nil.')
      end

      if @execution_status.nil?
        invalid_properties.push('invalid value for "execution_status", execution_status cannot be nil.')
      end

      if @action_rule_reference.nil?
        invalid_properties.push('invalid value for "action_rule_reference", action_rule_reference cannot be nil.')
      end

      if @trigger_info_list.nil?
        invalid_properties.push('invalid value for "trigger_info_list", trigger_info_list cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @action_result_list.nil?
      return false if @execution_plan.nil?
      return false if @execution_status.nil?
      return false if @action_rule_reference.nil?
      return false if @trigger_info_list.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action_result_list == o.action_result_list &&
          execution_plan == o.execution_plan &&
          execution_status == o.execution_status &&
          action_rule_reference == o.action_rule_reference &&
          rule_parameter_values == o.rule_parameter_values &&
          execution_messages == o.execution_messages &&
          execution_start_time == o.execution_start_time &&
          trigger_info_list == o.trigger_info_list &&
          execution_end_time == o.execution_end_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [action_result_list, execution_plan, execution_status, action_rule_reference, rule_parameter_values, execution_messages, execution_start_time, trigger_info_list, execution_end_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
