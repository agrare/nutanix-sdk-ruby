=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Status for Application.
  class AppResourcesDefStatus
    attr_accessor :app_state

    # List of Action for Application.
    attr_accessor :action_list

    # Name of the marketplace item used to create this app
    attr_accessor :source_marketplace_name

    # Credential list for appspec
    attr_accessor :credential_list

    attr_accessor :app_blueprint_config_reference

    attr_accessor :app_blueprint_reference

    attr_accessor :app_profile_config_reference

    # Version of the marketplace item used to create this app
    attr_accessor :source_marketplace_version

    # Data needed for clients.
    attr_accessor :client_attrs

    # Dependencies or edges between callrunbook tasks formed by usage of macros in child tasks
    attr_accessor :dependency_list

    # List of variables
    attr_accessor :variable_list

    # List of Deployment Spec for Application.
    attr_accessor :deployment_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_state' => :'app_state',
        :'action_list' => :'action_list',
        :'source_marketplace_name' => :'source_marketplace_name',
        :'credential_list' => :'credential_list',
        :'app_blueprint_config_reference' => :'app_blueprint_config_reference',
        :'app_blueprint_reference' => :'app_blueprint_reference',
        :'app_profile_config_reference' => :'app_profile_config_reference',
        :'source_marketplace_version' => :'source_marketplace_version',
        :'client_attrs' => :'client_attrs',
        :'dependency_list' => :'dependency_list',
        :'variable_list' => :'variable_list',
        :'deployment_list' => :'deployment_list'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_state' => :'String',
        :'action_list' => :'Array<AppActionResponse>',
        :'source_marketplace_name' => :'String',
        :'credential_list' => :'Array<AppCredentialResponse>',
        :'app_blueprint_config_reference' => :'BlueprintReference',
        :'app_blueprint_reference' => :'BlueprintReference',
        :'app_profile_config_reference' => :'AppProfileReference',
        :'source_marketplace_version' => :'String',
        :'client_attrs' => :'Hash<String, Object>',
        :'dependency_list' => :'Array<BlueprintDependencyList>',
        :'variable_list' => :'Array<AppVariableResponse>',
        :'deployment_list' => :'Array<AppDeploymentResponse>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::AppResourcesDefStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::AppResourcesDefStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_state')
        self.app_state = attributes[:'app_state']
      else
        self.app_state = nil
      end

      if attributes.key?(:'action_list')
        if (value = attributes[:'action_list']).is_a?(Array)
          self.action_list = value
        end
      else
        self.action_list = nil
      end

      if attributes.key?(:'source_marketplace_name')
        self.source_marketplace_name = attributes[:'source_marketplace_name']
      end

      if attributes.key?(:'credential_list')
        if (value = attributes[:'credential_list']).is_a?(Array)
          self.credential_list = value
        end
      else
        self.credential_list = nil
      end

      if attributes.key?(:'app_blueprint_config_reference')
        self.app_blueprint_config_reference = attributes[:'app_blueprint_config_reference']
      end

      if attributes.key?(:'app_blueprint_reference')
        self.app_blueprint_reference = attributes[:'app_blueprint_reference']
      else
        self.app_blueprint_reference = nil
      end

      if attributes.key?(:'app_profile_config_reference')
        self.app_profile_config_reference = attributes[:'app_profile_config_reference']
      end

      if attributes.key?(:'source_marketplace_version')
        self.source_marketplace_version = attributes[:'source_marketplace_version']
      end

      if attributes.key?(:'client_attrs')
        if (value = attributes[:'client_attrs']).is_a?(Hash)
          self.client_attrs = value
        end
      end

      if attributes.key?(:'dependency_list')
        if (value = attributes[:'dependency_list']).is_a?(Array)
          self.dependency_list = value
        end
      end

      if attributes.key?(:'variable_list')
        if (value = attributes[:'variable_list']).is_a?(Array)
          self.variable_list = value
        end
      else
        self.variable_list = nil
      end

      if attributes.key?(:'deployment_list')
        if (value = attributes[:'deployment_list']).is_a?(Array)
          self.deployment_list = value
        end
      else
        self.deployment_list = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @app_state.nil?
        invalid_properties.push('invalid value for "app_state", app_state cannot be nil.')
      end

      if @action_list.nil?
        invalid_properties.push('invalid value for "action_list", action_list cannot be nil.')
      end

      if @credential_list.nil?
        invalid_properties.push('invalid value for "credential_list", credential_list cannot be nil.')
      end

      if @app_blueprint_reference.nil?
        invalid_properties.push('invalid value for "app_blueprint_reference", app_blueprint_reference cannot be nil.')
      end

      if @variable_list.nil?
        invalid_properties.push('invalid value for "variable_list", variable_list cannot be nil.')
      end

      if @deployment_list.nil?
        invalid_properties.push('invalid value for "deployment_list", deployment_list cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @app_state.nil?
      return false if @action_list.nil?
      return false if @credential_list.nil?
      return false if @app_blueprint_reference.nil?
      return false if @variable_list.nil?
      return false if @deployment_list.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_state == o.app_state &&
          action_list == o.action_list &&
          source_marketplace_name == o.source_marketplace_name &&
          credential_list == o.credential_list &&
          app_blueprint_config_reference == o.app_blueprint_config_reference &&
          app_blueprint_reference == o.app_blueprint_reference &&
          app_profile_config_reference == o.app_profile_config_reference &&
          source_marketplace_version == o.source_marketplace_version &&
          client_attrs == o.client_attrs &&
          dependency_list == o.dependency_list &&
          variable_list == o.variable_list &&
          deployment_list == o.deployment_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_state, action_list, source_marketplace_name, credential_list, app_blueprint_config_reference, app_blueprint_reference, app_profile_config_reference, source_marketplace_version, client_attrs, dependency_list, variable_list, deployment_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
