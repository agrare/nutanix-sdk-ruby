=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Properties of the VM that can be overriden during clone.
  class VmCloneOverrideSpec
    # Number of logical threads per core.
    attr_accessor :num_threads_per_core

    # If specified, the complete list of NICs attached to the cloned VM. 
    attr_accessor :nic_list

    # VM Name.
    attr_accessor :name

    # Number of vCPUs per socket.
    attr_accessor :num_vcpus_per_socket

    # Number of vCPU sockets.
    attr_accessor :num_sockets

    # Memory size in MiB.
    attr_accessor :memory_size_mib

    attr_accessor :boot_config

    attr_accessor :guest_customization

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'num_threads_per_core' => :'num_threads_per_core',
        :'nic_list' => :'nic_list',
        :'name' => :'name',
        :'num_vcpus_per_socket' => :'num_vcpus_per_socket',
        :'num_sockets' => :'num_sockets',
        :'memory_size_mib' => :'memory_size_mib',
        :'boot_config' => :'boot_config',
        :'guest_customization' => :'guest_customization'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'num_threads_per_core' => :'Integer',
        :'nic_list' => :'Array<VmNic>',
        :'name' => :'String',
        :'num_vcpus_per_socket' => :'Integer',
        :'num_sockets' => :'Integer',
        :'memory_size_mib' => :'Integer',
        :'boot_config' => :'VmBootConfig',
        :'guest_customization' => :'GuestCustomization'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::VmCloneOverrideSpec` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::VmCloneOverrideSpec`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'num_threads_per_core')
        self.num_threads_per_core = attributes[:'num_threads_per_core']
      end

      if attributes.key?(:'nic_list')
        if (value = attributes[:'nic_list']).is_a?(Array)
          self.nic_list = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'num_vcpus_per_socket')
        self.num_vcpus_per_socket = attributes[:'num_vcpus_per_socket']
      end

      if attributes.key?(:'num_sockets')
        self.num_sockets = attributes[:'num_sockets']
      end

      if attributes.key?(:'memory_size_mib')
        self.memory_size_mib = attributes[:'memory_size_mib']
      end

      if attributes.key?(:'boot_config')
        self.boot_config = attributes[:'boot_config']
      end

      if attributes.key?(:'guest_customization')
        self.guest_customization = attributes[:'guest_customization']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@num_threads_per_core.nil? && @num_threads_per_core < 1
        invalid_properties.push('invalid value for "num_threads_per_core", must be greater than or equal to 1.')
      end

      if !@name.nil? && @name.to_s.length > 80
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 80.')
      end

      if !@num_vcpus_per_socket.nil? && @num_vcpus_per_socket < 1
        invalid_properties.push('invalid value for "num_vcpus_per_socket", must be greater than or equal to 1.')
      end

      if !@num_sockets.nil? && @num_sockets < 1
        invalid_properties.push('invalid value for "num_sockets", must be greater than or equal to 1.')
      end

      if !@memory_size_mib.nil? && @memory_size_mib < 1
        invalid_properties.push('invalid value for "memory_size_mib", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@num_threads_per_core.nil? && @num_threads_per_core < 1
      return false if !@name.nil? && @name.to_s.length > 80
      return false if !@num_vcpus_per_socket.nil? && @num_vcpus_per_socket < 1
      return false if !@num_sockets.nil? && @num_sockets < 1
      return false if !@memory_size_mib.nil? && @memory_size_mib < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] num_threads_per_core Value to be assigned
    def num_threads_per_core=(num_threads_per_core)
      if num_threads_per_core.nil?
        fail ArgumentError, 'num_threads_per_core cannot be nil'
      end

      if num_threads_per_core < 1
        fail ArgumentError, 'invalid value for "num_threads_per_core", must be greater than or equal to 1.'
      end

      @num_threads_per_core = num_threads_per_core
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 80
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 80.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] num_vcpus_per_socket Value to be assigned
    def num_vcpus_per_socket=(num_vcpus_per_socket)
      if num_vcpus_per_socket.nil?
        fail ArgumentError, 'num_vcpus_per_socket cannot be nil'
      end

      if num_vcpus_per_socket < 1
        fail ArgumentError, 'invalid value for "num_vcpus_per_socket", must be greater than or equal to 1.'
      end

      @num_vcpus_per_socket = num_vcpus_per_socket
    end

    # Custom attribute writer method with validation
    # @param [Object] num_sockets Value to be assigned
    def num_sockets=(num_sockets)
      if num_sockets.nil?
        fail ArgumentError, 'num_sockets cannot be nil'
      end

      if num_sockets < 1
        fail ArgumentError, 'invalid value for "num_sockets", must be greater than or equal to 1.'
      end

      @num_sockets = num_sockets
    end

    # Custom attribute writer method with validation
    # @param [Object] memory_size_mib Value to be assigned
    def memory_size_mib=(memory_size_mib)
      if memory_size_mib.nil?
        fail ArgumentError, 'memory_size_mib cannot be nil'
      end

      if memory_size_mib < 1
        fail ArgumentError, 'invalid value for "memory_size_mib", must be greater than or equal to 1.'
      end

      @memory_size_mib = memory_size_mib
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          num_threads_per_core == o.num_threads_per_core &&
          nic_list == o.nic_list &&
          name == o.name &&
          num_vcpus_per_socket == o.num_vcpus_per_socket &&
          num_sockets == o.num_sockets &&
          memory_size_mib == o.memory_size_mib &&
          boot_config == o.boot_config &&
          guest_customization == o.guest_customization
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [num_threads_per_core, nic_list, name, num_vcpus_per_socket, num_sockets, memory_size_mib, boot_config, guest_customization].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
