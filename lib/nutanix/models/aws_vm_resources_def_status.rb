=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # VM Resources Status Definition.
  class AwsVmResourcesDefStatus
    # The root device type
    attr_accessor :root_device_type

    # The private DNS name of the instance.
    attr_accessor :private_dns_name

    # The zone on which the instance is created
    attr_accessor :availability_zone

    attr_accessor :block_device_map

    # The AWS ID of the instance.
    attr_accessor :id

    # The subnet within the VPC the instance belongs to.
    attr_accessor :subnet_id

    # Platform of the instance e.g. Windows
    attr_accessor :platform

    # Instance's current state.
    attr_accessor :state

    # Console output of the instance
    attr_accessor :console_output

    # The public IP of the instance
    attr_accessor :public_ip_address

    # The name of the key pair used to launch the instance
    attr_accessor :key_name

    # The AWS ID of the AMI on the instance.
    attr_accessor :image_id

    # The public DNS name of the instance.
    attr_accessor :public_dns_name

    # The AWS account to which the instance belongs.
    attr_accessor :account_uuid

    # The name of the IAM Instance Profile (IIP) associated with the instance. 
    attr_accessor :instance_profile_name

    # The region to which the instance belongs.
    attr_accessor :region

    # The time the instance was launched
    attr_accessor :launch_time

    # Specifies whether the instance stops or terminates on instance-initiated shutdown. 
    attr_accessor :instance_initiated_shutdown_behavior

    # The type of instance e.g.'t1.micro', 'm1.small'
    attr_accessor :instance_type

    # List of AWS security group IDs.
    attr_accessor :security_group_list

    # The specific available IP from the subnet assigned to the instance. 
    attr_accessor :private_ip_address

    # The VPC AWS ID, if running in VPC.
    attr_accessor :vpc_id

    # The AWS Tags associated with any AWS resource
    attr_accessor :tag_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'root_device_type' => :'root_device_type',
        :'private_dns_name' => :'private_dns_name',
        :'availability_zone' => :'availability_zone',
        :'block_device_map' => :'block_device_map',
        :'id' => :'id',
        :'subnet_id' => :'subnet_id',
        :'platform' => :'platform',
        :'state' => :'state',
        :'console_output' => :'console_output',
        :'public_ip_address' => :'public_ip_address',
        :'key_name' => :'key_name',
        :'image_id' => :'image_id',
        :'public_dns_name' => :'public_dns_name',
        :'account_uuid' => :'account_uuid',
        :'instance_profile_name' => :'instance_profile_name',
        :'region' => :'region',
        :'launch_time' => :'launch_time',
        :'instance_initiated_shutdown_behavior' => :'instance_initiated_shutdown_behavior',
        :'instance_type' => :'instance_type',
        :'security_group_list' => :'security_group_list',
        :'private_ip_address' => :'private_ip_address',
        :'vpc_id' => :'vpc_id',
        :'tag_list' => :'tag_list'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'root_device_type' => :'String',
        :'private_dns_name' => :'String',
        :'availability_zone' => :'String',
        :'block_device_map' => :'AwsBlockDeviceMapOutputStatus',
        :'id' => :'String',
        :'subnet_id' => :'String',
        :'platform' => :'String',
        :'state' => :'String',
        :'console_output' => :'String',
        :'public_ip_address' => :'String',
        :'key_name' => :'String',
        :'image_id' => :'String',
        :'public_dns_name' => :'String',
        :'account_uuid' => :'String',
        :'instance_profile_name' => :'String',
        :'region' => :'String',
        :'launch_time' => :'String',
        :'instance_initiated_shutdown_behavior' => :'String',
        :'instance_type' => :'String',
        :'security_group_list' => :'Array<AwsSecurityGroupListInner>',
        :'private_ip_address' => :'String',
        :'vpc_id' => :'String',
        :'tag_list' => :'Array<AwsTagListInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::AwsVmResourcesDefStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::AwsVmResourcesDefStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'root_device_type')
        self.root_device_type = attributes[:'root_device_type']
      end

      if attributes.key?(:'private_dns_name')
        self.private_dns_name = attributes[:'private_dns_name']
      end

      if attributes.key?(:'availability_zone')
        self.availability_zone = attributes[:'availability_zone']
      end

      if attributes.key?(:'block_device_map')
        self.block_device_map = attributes[:'block_device_map']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'subnet_id')
        self.subnet_id = attributes[:'subnet_id']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'console_output')
        self.console_output = attributes[:'console_output']
      end

      if attributes.key?(:'public_ip_address')
        self.public_ip_address = attributes[:'public_ip_address']
      end

      if attributes.key?(:'key_name')
        self.key_name = attributes[:'key_name']
      end

      if attributes.key?(:'image_id')
        self.image_id = attributes[:'image_id']
      end

      if attributes.key?(:'public_dns_name')
        self.public_dns_name = attributes[:'public_dns_name']
      end

      if attributes.key?(:'account_uuid')
        self.account_uuid = attributes[:'account_uuid']
      end

      if attributes.key?(:'instance_profile_name')
        self.instance_profile_name = attributes[:'instance_profile_name']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'launch_time')
        self.launch_time = attributes[:'launch_time']
      end

      if attributes.key?(:'instance_initiated_shutdown_behavior')
        self.instance_initiated_shutdown_behavior = attributes[:'instance_initiated_shutdown_behavior']
      end

      if attributes.key?(:'instance_type')
        self.instance_type = attributes[:'instance_type']
      end

      if attributes.key?(:'security_group_list')
        if (value = attributes[:'security_group_list']).is_a?(Array)
          self.security_group_list = value
        end
      end

      if attributes.key?(:'private_ip_address')
        self.private_ip_address = attributes[:'private_ip_address']
      end

      if attributes.key?(:'vpc_id')
        self.vpc_id = attributes[:'vpc_id']
      end

      if attributes.key?(:'tag_list')
        if (value = attributes[:'tag_list']).is_a?(Array)
          self.tag_list = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^i-[a-f0-9]{1,17}$/)
      if !@id.nil? && @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^subnet-[a-f0-9]{1,17}$/)
      if !@subnet_id.nil? && @subnet_id !~ pattern
        invalid_properties.push("invalid value for \"subnet_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@public_ip_address.nil? && @public_ip_address !~ pattern
        invalid_properties.push("invalid value for \"public_ip_address\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^ami-[a-f0-9]{1,17}$/)
      if !@image_id.nil? && @image_id !~ pattern
        invalid_properties.push("invalid value for \"image_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@account_uuid.nil? && @account_uuid !~ pattern
        invalid_properties.push("invalid value for \"account_uuid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-z]{2}-[a-z\-]*-[1-9]{1}$/)
      if !@region.nil? && @region !~ pattern
        invalid_properties.push("invalid value for \"region\", must conform to the pattern #{pattern}.")
      end

      if !@instance_type.nil? && @instance_type.to_s.length > 64
        invalid_properties.push('invalid value for "instance_type", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@private_ip_address.nil? && @private_ip_address !~ pattern
        invalid_properties.push("invalid value for \"private_ip_address\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^vpc-[a-f0-9]{1,17}$/)
      if !@vpc_id.nil? && @vpc_id !~ pattern
        invalid_properties.push("invalid value for \"vpc_id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@id.nil? && @id !~ Regexp.new(/^i-[a-f0-9]{1,17}$/)
      return false if !@subnet_id.nil? && @subnet_id !~ Regexp.new(/^subnet-[a-f0-9]{1,17}$/)
      return false if !@public_ip_address.nil? && @public_ip_address !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@image_id.nil? && @image_id !~ Regexp.new(/^ami-[a-f0-9]{1,17}$/)
      return false if !@account_uuid.nil? && @account_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@region.nil? && @region !~ Regexp.new(/^[a-z]{2}-[a-z\-]*-[1-9]{1}$/)
      return false if !@instance_type.nil? && @instance_type.to_s.length > 64
      return false if !@private_ip_address.nil? && @private_ip_address !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@vpc_id.nil? && @vpc_id !~ Regexp.new(/^vpc-[a-f0-9]{1,17}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^i-[a-f0-9]{1,17}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] subnet_id Value to be assigned
    def subnet_id=(subnet_id)
      if subnet_id.nil?
        fail ArgumentError, 'subnet_id cannot be nil'
      end

      pattern = Regexp.new(/^subnet-[a-f0-9]{1,17}$/)
      if subnet_id !~ pattern
        fail ArgumentError, "invalid value for \"subnet_id\", must conform to the pattern #{pattern}."
      end

      @subnet_id = subnet_id
    end

    # Custom attribute writer method with validation
    # @param [Object] public_ip_address Value to be assigned
    def public_ip_address=(public_ip_address)
      if public_ip_address.nil?
        fail ArgumentError, 'public_ip_address cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if public_ip_address !~ pattern
        fail ArgumentError, "invalid value for \"public_ip_address\", must conform to the pattern #{pattern}."
      end

      @public_ip_address = public_ip_address
    end

    # Custom attribute writer method with validation
    # @param [Object] image_id Value to be assigned
    def image_id=(image_id)
      if image_id.nil?
        fail ArgumentError, 'image_id cannot be nil'
      end

      pattern = Regexp.new(/^ami-[a-f0-9]{1,17}$/)
      if image_id !~ pattern
        fail ArgumentError, "invalid value for \"image_id\", must conform to the pattern #{pattern}."
      end

      @image_id = image_id
    end

    # Custom attribute writer method with validation
    # @param [Object] account_uuid Value to be assigned
    def account_uuid=(account_uuid)
      if account_uuid.nil?
        fail ArgumentError, 'account_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if account_uuid !~ pattern
        fail ArgumentError, "invalid value for \"account_uuid\", must conform to the pattern #{pattern}."
      end

      @account_uuid = account_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if region.nil?
        fail ArgumentError, 'region cannot be nil'
      end

      pattern = Regexp.new(/^[a-z]{2}-[a-z\-]*-[1-9]{1}$/)
      if region !~ pattern
        fail ArgumentError, "invalid value for \"region\", must conform to the pattern #{pattern}."
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] instance_type Value to be assigned
    def instance_type=(instance_type)
      if instance_type.nil?
        fail ArgumentError, 'instance_type cannot be nil'
      end

      if instance_type.to_s.length > 64
        fail ArgumentError, 'invalid value for "instance_type", the character length must be smaller than or equal to 64.'
      end

      @instance_type = instance_type
    end

    # Custom attribute writer method with validation
    # @param [Object] private_ip_address Value to be assigned
    def private_ip_address=(private_ip_address)
      if private_ip_address.nil?
        fail ArgumentError, 'private_ip_address cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if private_ip_address !~ pattern
        fail ArgumentError, "invalid value for \"private_ip_address\", must conform to the pattern #{pattern}."
      end

      @private_ip_address = private_ip_address
    end

    # Custom attribute writer method with validation
    # @param [Object] vpc_id Value to be assigned
    def vpc_id=(vpc_id)
      if vpc_id.nil?
        fail ArgumentError, 'vpc_id cannot be nil'
      end

      pattern = Regexp.new(/^vpc-[a-f0-9]{1,17}$/)
      if vpc_id !~ pattern
        fail ArgumentError, "invalid value for \"vpc_id\", must conform to the pattern #{pattern}."
      end

      @vpc_id = vpc_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          root_device_type == o.root_device_type &&
          private_dns_name == o.private_dns_name &&
          availability_zone == o.availability_zone &&
          block_device_map == o.block_device_map &&
          id == o.id &&
          subnet_id == o.subnet_id &&
          platform == o.platform &&
          state == o.state &&
          console_output == o.console_output &&
          public_ip_address == o.public_ip_address &&
          key_name == o.key_name &&
          image_id == o.image_id &&
          public_dns_name == o.public_dns_name &&
          account_uuid == o.account_uuid &&
          instance_profile_name == o.instance_profile_name &&
          region == o.region &&
          launch_time == o.launch_time &&
          instance_initiated_shutdown_behavior == o.instance_initiated_shutdown_behavior &&
          instance_type == o.instance_type &&
          security_group_list == o.security_group_list &&
          private_ip_address == o.private_ip_address &&
          vpc_id == o.vpc_id &&
          tag_list == o.tag_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [root_device_type, private_dns_name, availability_zone, block_device_map, id, subnet_id, platform, state, console_output, public_ip_address, key_name, image_id, public_dns_name, account_uuid, instance_profile_name, region, launch_time, instance_initiated_shutdown_behavior, instance_type, security_group_list, private_ip_address, vpc_id, tag_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
