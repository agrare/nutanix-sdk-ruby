=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Virtual Machine NIC Status.
  class VmNicOutputStatus
    # List of DNS IP addresses.
    attr_accessor :dns_ip_addresses_list

    # The type of this NIC. Defaults to NORMAL_NIC.
    attr_accessor :nic_type

    attr_accessor :subnet_reference

    # The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to. 
    attr_accessor :uuid

    # IP endpoints for the adapter. Currently, IPv4 addresses are supported. 
    attr_accessor :ip_endpoint_list

    attr_accessor :network_function_chain_reference

    # Secondary IPv4 Addresses for this NIC.
    attr_accessor :secondary_ip_address_list

    # The Floating IP associated with the vnic.
    attr_accessor :floating_ip

    # The MAC address for the adapter.
    attr_accessor :mac_address

    # The type of this Network function NIC. Defaults to INGRESS. 
    attr_accessor :network_function_nic_type

    # VLAN mode.
    attr_accessor :vlan_mode

    # The number of tx/rx queue pairs for this NIC. 
    attr_accessor :num_queues

    # Default gateway IP addresses.
    attr_accessor :default_gateway_address_list

    # IP address of the DHCP server.
    attr_accessor :dhcp_server_ip

    # The model of this NIC.
    attr_accessor :model

    # Whether or not the NIC is connected. True by default.
    attr_accessor :is_connected

    # List of VLANs to trunk if vlan_mode is TRUNKED. If empty, all VLANs are trunked. 
    attr_accessor :trunked_vlan_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dns_ip_addresses_list' => :'dns_ip_addresses_list',
        :'nic_type' => :'nic_type',
        :'subnet_reference' => :'subnet_reference',
        :'uuid' => :'uuid',
        :'ip_endpoint_list' => :'ip_endpoint_list',
        :'network_function_chain_reference' => :'network_function_chain_reference',
        :'secondary_ip_address_list' => :'secondary_ip_address_list',
        :'floating_ip' => :'floating_ip',
        :'mac_address' => :'mac_address',
        :'network_function_nic_type' => :'network_function_nic_type',
        :'vlan_mode' => :'vlan_mode',
        :'num_queues' => :'num_queues',
        :'default_gateway_address_list' => :'default_gateway_address_list',
        :'dhcp_server_ip' => :'dhcp_server_ip',
        :'model' => :'model',
        :'is_connected' => :'is_connected',
        :'trunked_vlan_list' => :'trunked_vlan_list'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'dns_ip_addresses_list' => :'Array<String>',
        :'nic_type' => :'String',
        :'subnet_reference' => :'SubnetReference',
        :'uuid' => :'String',
        :'ip_endpoint_list' => :'Array<IpAddress>',
        :'network_function_chain_reference' => :'NetworkFunctionChainReference',
        :'secondary_ip_address_list' => :'Array<String>',
        :'floating_ip' => :'String',
        :'mac_address' => :'String',
        :'network_function_nic_type' => :'String',
        :'vlan_mode' => :'String',
        :'num_queues' => :'Integer',
        :'default_gateway_address_list' => :'Array<String>',
        :'dhcp_server_ip' => :'String',
        :'model' => :'String',
        :'is_connected' => :'Boolean',
        :'trunked_vlan_list' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::VmNicOutputStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::VmNicOutputStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'dns_ip_addresses_list')
        if (value = attributes[:'dns_ip_addresses_list']).is_a?(Array)
          self.dns_ip_addresses_list = value
        end
      end

      if attributes.key?(:'nic_type')
        self.nic_type = attributes[:'nic_type']
      end

      if attributes.key?(:'subnet_reference')
        self.subnet_reference = attributes[:'subnet_reference']
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.key?(:'ip_endpoint_list')
        if (value = attributes[:'ip_endpoint_list']).is_a?(Array)
          self.ip_endpoint_list = value
        end
      end

      if attributes.key?(:'network_function_chain_reference')
        self.network_function_chain_reference = attributes[:'network_function_chain_reference']
      end

      if attributes.key?(:'secondary_ip_address_list')
        if (value = attributes[:'secondary_ip_address_list']).is_a?(Array)
          self.secondary_ip_address_list = value
        end
      end

      if attributes.key?(:'floating_ip')
        self.floating_ip = attributes[:'floating_ip']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      end

      if attributes.key?(:'network_function_nic_type')
        self.network_function_nic_type = attributes[:'network_function_nic_type']
      end

      if attributes.key?(:'vlan_mode')
        self.vlan_mode = attributes[:'vlan_mode']
      end

      if attributes.key?(:'num_queues')
        self.num_queues = attributes[:'num_queues']
      end

      if attributes.key?(:'default_gateway_address_list')
        if (value = attributes[:'default_gateway_address_list']).is_a?(Array)
          self.default_gateway_address_list = value
        end
      end

      if attributes.key?(:'dhcp_server_ip')
        self.dhcp_server_ip = attributes[:'dhcp_server_ip']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'is_connected')
        self.is_connected = attributes[:'is_connected']
      end

      if attributes.key?(:'trunked_vlan_list')
        if (value = attributes[:'trunked_vlan_list']).is_a?(Array)
          self.trunked_vlan_list = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@uuid.nil? && @uuid !~ pattern
        invalid_properties.push("invalid value for \"uuid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@floating_ip.nil? && @floating_ip !~ pattern
        invalid_properties.push("invalid value for \"floating_ip\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      if !@mac_address.nil? && @mac_address !~ pattern
        invalid_properties.push("invalid value for \"mac_address\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@dhcp_server_ip.nil? && @dhcp_server_ip !~ pattern
        invalid_properties.push("invalid value for \"dhcp_server_ip\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@uuid.nil? && @uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@floating_ip.nil? && @floating_ip !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@mac_address.nil? && @mac_address !~ Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      return false if !@dhcp_server_ip.nil? && @dhcp_server_ip !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] uuid Value to be assigned
    def uuid=(uuid)
      if uuid.nil?
        fail ArgumentError, 'uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if uuid !~ pattern
        fail ArgumentError, "invalid value for \"uuid\", must conform to the pattern #{pattern}."
      end

      @uuid = uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] floating_ip Value to be assigned
    def floating_ip=(floating_ip)
      if floating_ip.nil?
        fail ArgumentError, 'floating_ip cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if floating_ip !~ pattern
        fail ArgumentError, "invalid value for \"floating_ip\", must conform to the pattern #{pattern}."
      end

      @floating_ip = floating_ip
    end

    # Custom attribute writer method with validation
    # @param [Object] mac_address Value to be assigned
    def mac_address=(mac_address)
      if mac_address.nil?
        fail ArgumentError, 'mac_address cannot be nil'
      end

      pattern = Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      if mac_address !~ pattern
        fail ArgumentError, "invalid value for \"mac_address\", must conform to the pattern #{pattern}."
      end

      @mac_address = mac_address
    end

    # Custom attribute writer method with validation
    # @param [Object] dhcp_server_ip Value to be assigned
    def dhcp_server_ip=(dhcp_server_ip)
      if dhcp_server_ip.nil?
        fail ArgumentError, 'dhcp_server_ip cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if dhcp_server_ip !~ pattern
        fail ArgumentError, "invalid value for \"dhcp_server_ip\", must conform to the pattern #{pattern}."
      end

      @dhcp_server_ip = dhcp_server_ip
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dns_ip_addresses_list == o.dns_ip_addresses_list &&
          nic_type == o.nic_type &&
          subnet_reference == o.subnet_reference &&
          uuid == o.uuid &&
          ip_endpoint_list == o.ip_endpoint_list &&
          network_function_chain_reference == o.network_function_chain_reference &&
          secondary_ip_address_list == o.secondary_ip_address_list &&
          floating_ip == o.floating_ip &&
          mac_address == o.mac_address &&
          network_function_nic_type == o.network_function_nic_type &&
          vlan_mode == o.vlan_mode &&
          num_queues == o.num_queues &&
          default_gateway_address_list == o.default_gateway_address_list &&
          dhcp_server_ip == o.dhcp_server_ip &&
          model == o.model &&
          is_connected == o.is_connected &&
          trunked_vlan_list == o.trunked_vlan_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [dns_ip_addresses_list, nic_type, subnet_reference, uuid, ip_endpoint_list, network_function_chain_reference, secondary_ip_address_list, floating_ip, mac_address, network_function_nic_type, vlan_mode, num_queues, default_gateway_address_list, dhcp_server_ip, model, is_connected, trunked_vlan_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
