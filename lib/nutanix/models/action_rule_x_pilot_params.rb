=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Parameters required for XPilot enabled rule
  class ActionRuleXPilotParams
    # The name of the KPI that will be monitored
    attr_accessor :metric_name

    # The Type of the entity whose KPI will be monitored
    attr_accessor :entity_type

    # Lower Bound for desired KPI value
    attr_accessor :min_threshold

    # Duration(minutes) for which the playbook will be monitored
    attr_accessor :monitor_duration_mins

    # The Entity Info of the entity whose KPI will be monitored
    attr_accessor :entity_info

    # Should XPilot play wait for approval after every retry.
    attr_accessor :request_approval_after_each_retry

    # Upper Bound for desired KPI value
    attr_accessor :max_threshold

    # Count of number of times rule can be rerun in case of positive feedback 
    attr_accessor :max_retry_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'metric_name' => :'metric_name',
        :'entity_type' => :'entity_type',
        :'min_threshold' => :'min_threshold',
        :'monitor_duration_mins' => :'monitor_duration_mins',
        :'entity_info' => :'entity_info',
        :'request_approval_after_each_retry' => :'request_approval_after_each_retry',
        :'max_threshold' => :'max_threshold',
        :'max_retry_count' => :'max_retry_count'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'metric_name' => :'String',
        :'entity_type' => :'String',
        :'min_threshold' => :'Float',
        :'monitor_duration_mins' => :'Integer',
        :'entity_info' => :'String',
        :'request_approval_after_each_retry' => :'Boolean',
        :'max_threshold' => :'Float',
        :'max_retry_count' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ActionRuleXPilotParams` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ActionRuleXPilotParams`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'metric_name')
        self.metric_name = attributes[:'metric_name']
      else
        self.metric_name = nil
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      else
        self.entity_type = nil
      end

      if attributes.key?(:'min_threshold')
        self.min_threshold = attributes[:'min_threshold']
      end

      if attributes.key?(:'monitor_duration_mins')
        self.monitor_duration_mins = attributes[:'monitor_duration_mins']
      end

      if attributes.key?(:'entity_info')
        self.entity_info = attributes[:'entity_info']
      else
        self.entity_info = nil
      end

      if attributes.key?(:'request_approval_after_each_retry')
        self.request_approval_after_each_retry = attributes[:'request_approval_after_each_retry']
      end

      if attributes.key?(:'max_threshold')
        self.max_threshold = attributes[:'max_threshold']
      end

      if attributes.key?(:'max_retry_count')
        self.max_retry_count = attributes[:'max_retry_count']
      else
        self.max_retry_count = 5
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @metric_name.nil?
        invalid_properties.push('invalid value for "metric_name", metric_name cannot be nil.')
      end

      if @metric_name.to_s.length > 128
        invalid_properties.push('invalid value for "metric_name", the character length must be smaller than or equal to 128.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @metric_name !~ pattern
        invalid_properties.push("invalid value for \"metric_name\", must conform to the pattern #{pattern}.")
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if @entity_type.to_s.length > 64
        invalid_properties.push('invalid value for "entity_type", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @entity_type !~ pattern
        invalid_properties.push("invalid value for \"entity_type\", must conform to the pattern #{pattern}.")
      end

      if @entity_info.nil?
        invalid_properties.push('invalid value for "entity_info", entity_info cannot be nil.')
      end

      if @entity_info.to_s.length > 256
        invalid_properties.push('invalid value for "entity_info", the character length must be smaller than or equal to 256.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @metric_name.nil?
      return false if @metric_name.to_s.length > 128
      return false if @metric_name !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if @entity_type.nil?
      return false if @entity_type.to_s.length > 64
      return false if @entity_type !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if @entity_info.nil?
      return false if @entity_info.to_s.length > 256
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] metric_name Value to be assigned
    def metric_name=(metric_name)
      if metric_name.nil?
        fail ArgumentError, 'metric_name cannot be nil'
      end

      if metric_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "metric_name", the character length must be smaller than or equal to 128.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if metric_name !~ pattern
        fail ArgumentError, "invalid value for \"metric_name\", must conform to the pattern #{pattern}."
      end

      @metric_name = metric_name
    end

    # Custom attribute writer method with validation
    # @param [Object] entity_type Value to be assigned
    def entity_type=(entity_type)
      if entity_type.nil?
        fail ArgumentError, 'entity_type cannot be nil'
      end

      if entity_type.to_s.length > 64
        fail ArgumentError, 'invalid value for "entity_type", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if entity_type !~ pattern
        fail ArgumentError, "invalid value for \"entity_type\", must conform to the pattern #{pattern}."
      end

      @entity_type = entity_type
    end

    # Custom attribute writer method with validation
    # @param [Object] entity_info Value to be assigned
    def entity_info=(entity_info)
      if entity_info.nil?
        fail ArgumentError, 'entity_info cannot be nil'
      end

      if entity_info.to_s.length > 256
        fail ArgumentError, 'invalid value for "entity_info", the character length must be smaller than or equal to 256.'
      end

      @entity_info = entity_info
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          metric_name == o.metric_name &&
          entity_type == o.entity_type &&
          min_threshold == o.min_threshold &&
          monitor_duration_mins == o.monitor_duration_mins &&
          entity_info == o.entity_info &&
          request_approval_after_each_retry == o.request_approval_after_each_retry &&
          max_threshold == o.max_threshold &&
          max_retry_count == o.max_retry_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [metric_name, entity_type, min_threshold, monitor_duration_mins, entity_info, request_approval_after_each_retry, max_threshold, max_retry_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
