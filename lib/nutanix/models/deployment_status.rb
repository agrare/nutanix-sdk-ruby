=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Deployment related status for this gateway.
  class DeploymentStatus
    # Boolean flag indicating user opt-in for installing Xi LB route in on-prem PC and PE CVMs provided on-prem PC, PE and VPN VM are in the same subnet 
    attr_accessor :install_lb_route

    attr_accessor :vm_reference

    attr_accessor :vcenter_deployment_details

    # IP prefix length of the subnet that the gateway VM is on.
    attr_accessor :ip_prefix_length

    # Static IP address of the VPN gateway VM.
    attr_accessor :static_ip

    # Default gateway IP address.
    attr_accessor :default_gateway_ip

    # The software image installed on the gateway appliance.
    attr_accessor :image_source_url

    attr_accessor :pe_cluster_reference

    attr_accessor :subnet_reference

    # The supported gateway appliance version.
    attr_accessor :supported_software_version

    # The software version installed on the gateway appliance.
    attr_accessor :installed_software_version

    # The on-prem VLAN to deploy the VPN gateway on.
    attr_accessor :vlan_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'install_lb_route' => :'install_lb_route',
        :'vm_reference' => :'vm_reference',
        :'vcenter_deployment_details' => :'vcenter_deployment_details',
        :'ip_prefix_length' => :'ip_prefix_length',
        :'static_ip' => :'static_ip',
        :'default_gateway_ip' => :'default_gateway_ip',
        :'image_source_url' => :'image_source_url',
        :'pe_cluster_reference' => :'pe_cluster_reference',
        :'subnet_reference' => :'subnet_reference',
        :'supported_software_version' => :'supported_software_version',
        :'installed_software_version' => :'installed_software_version',
        :'vlan_id' => :'vlan_id'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'install_lb_route' => :'Boolean',
        :'vm_reference' => :'VmReference',
        :'vcenter_deployment_details' => :'VcenterDeploymentDetails',
        :'ip_prefix_length' => :'Integer',
        :'static_ip' => :'String',
        :'default_gateway_ip' => :'String',
        :'image_source_url' => :'String',
        :'pe_cluster_reference' => :'ClusterReference',
        :'subnet_reference' => :'SubnetReference',
        :'supported_software_version' => :'String',
        :'installed_software_version' => :'String',
        :'vlan_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::DeploymentStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::DeploymentStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'install_lb_route')
        self.install_lb_route = attributes[:'install_lb_route']
      end

      if attributes.key?(:'vm_reference')
        self.vm_reference = attributes[:'vm_reference']
      end

      if attributes.key?(:'vcenter_deployment_details')
        self.vcenter_deployment_details = attributes[:'vcenter_deployment_details']
      end

      if attributes.key?(:'ip_prefix_length')
        self.ip_prefix_length = attributes[:'ip_prefix_length']
      end

      if attributes.key?(:'static_ip')
        self.static_ip = attributes[:'static_ip']
      end

      if attributes.key?(:'default_gateway_ip')
        self.default_gateway_ip = attributes[:'default_gateway_ip']
      end

      if attributes.key?(:'image_source_url')
        self.image_source_url = attributes[:'image_source_url']
      end

      if attributes.key?(:'pe_cluster_reference')
        self.pe_cluster_reference = attributes[:'pe_cluster_reference']
      end

      if attributes.key?(:'subnet_reference')
        self.subnet_reference = attributes[:'subnet_reference']
      end

      if attributes.key?(:'supported_software_version')
        self.supported_software_version = attributes[:'supported_software_version']
      end

      if attributes.key?(:'installed_software_version')
        self.installed_software_version = attributes[:'installed_software_version']
      end

      if attributes.key?(:'vlan_id')
        self.vlan_id = attributes[:'vlan_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@static_ip.nil? && @static_ip !~ pattern
        invalid_properties.push("invalid value for \"static_ip\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@default_gateway_ip.nil? && @default_gateway_ip !~ pattern
        invalid_properties.push("invalid value for \"default_gateway_ip\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@static_ip.nil? && @static_ip !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@default_gateway_ip.nil? && @default_gateway_ip !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] static_ip Value to be assigned
    def static_ip=(static_ip)
      if static_ip.nil?
        fail ArgumentError, 'static_ip cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if static_ip !~ pattern
        fail ArgumentError, "invalid value for \"static_ip\", must conform to the pattern #{pattern}."
      end

      @static_ip = static_ip
    end

    # Custom attribute writer method with validation
    # @param [Object] default_gateway_ip Value to be assigned
    def default_gateway_ip=(default_gateway_ip)
      if default_gateway_ip.nil?
        fail ArgumentError, 'default_gateway_ip cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if default_gateway_ip !~ pattern
        fail ArgumentError, "invalid value for \"default_gateway_ip\", must conform to the pattern #{pattern}."
      end

      @default_gateway_ip = default_gateway_ip
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          install_lb_route == o.install_lb_route &&
          vm_reference == o.vm_reference &&
          vcenter_deployment_details == o.vcenter_deployment_details &&
          ip_prefix_length == o.ip_prefix_length &&
          static_ip == o.static_ip &&
          default_gateway_ip == o.default_gateway_ip &&
          image_source_url == o.image_source_url &&
          pe_cluster_reference == o.pe_cluster_reference &&
          subnet_reference == o.subnet_reference &&
          supported_software_version == o.supported_software_version &&
          installed_software_version == o.installed_software_version &&
          vlan_id == o.vlan_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [install_lb_route, vm_reference, vcenter_deployment_details, ip_prefix_length, static_ip, default_gateway_ip, image_source_url, pe_cluster_reference, subnet_reference, supported_software_version, installed_software_version, vlan_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
