=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # VirtualMachine Disk (VM Disk).
  class VmDisk
    # The device ID which is used to uniquely identify this particular disk. 
    attr_accessor :uuid

    # Size of the disk in Bytes.
    attr_accessor :disk_size_bytes

    attr_accessor :storage_config

    attr_accessor :device_properties

    attr_accessor :data_source_reference

    # Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB -  when that field is present. 
    attr_accessor :disk_size_mib

    attr_accessor :volume_group_reference

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'uuid' => :'uuid',
        :'disk_size_bytes' => :'disk_size_bytes',
        :'storage_config' => :'storage_config',
        :'device_properties' => :'device_properties',
        :'data_source_reference' => :'data_source_reference',
        :'disk_size_mib' => :'disk_size_mib',
        :'volume_group_reference' => :'volume_group_reference'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'uuid' => :'String',
        :'disk_size_bytes' => :'Integer',
        :'storage_config' => :'DiskStorageConfig',
        :'device_properties' => :'VmDiskDeviceProperties',
        :'data_source_reference' => :'VmDiskDataSourceReference',
        :'disk_size_mib' => :'Integer',
        :'volume_group_reference' => :'Reference'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::VmDisk` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::VmDisk`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.key?(:'disk_size_bytes')
        self.disk_size_bytes = attributes[:'disk_size_bytes']
      end

      if attributes.key?(:'storage_config')
        self.storage_config = attributes[:'storage_config']
      end

      if attributes.key?(:'device_properties')
        self.device_properties = attributes[:'device_properties']
      end

      if attributes.key?(:'data_source_reference')
        self.data_source_reference = attributes[:'data_source_reference']
      end

      if attributes.key?(:'disk_size_mib')
        self.disk_size_mib = attributes[:'disk_size_mib']
      end

      if attributes.key?(:'volume_group_reference')
        self.volume_group_reference = attributes[:'volume_group_reference']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@uuid.nil? && @uuid !~ pattern
        invalid_properties.push("invalid value for \"uuid\", must conform to the pattern #{pattern}.")
      end

      if !@disk_size_bytes.nil? && @disk_size_bytes < 1
        invalid_properties.push('invalid value for "disk_size_bytes", must be greater than or equal to 1.')
      end

      if !@disk_size_mib.nil? && @disk_size_mib < 1
        invalid_properties.push('invalid value for "disk_size_mib", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@uuid.nil? && @uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@disk_size_bytes.nil? && @disk_size_bytes < 1
      return false if !@disk_size_mib.nil? && @disk_size_mib < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] uuid Value to be assigned
    def uuid=(uuid)
      if uuid.nil?
        fail ArgumentError, 'uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if uuid !~ pattern
        fail ArgumentError, "invalid value for \"uuid\", must conform to the pattern #{pattern}."
      end

      @uuid = uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_size_bytes Value to be assigned
    def disk_size_bytes=(disk_size_bytes)
      if disk_size_bytes.nil?
        fail ArgumentError, 'disk_size_bytes cannot be nil'
      end

      if disk_size_bytes < 1
        fail ArgumentError, 'invalid value for "disk_size_bytes", must be greater than or equal to 1.'
      end

      @disk_size_bytes = disk_size_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_size_mib Value to be assigned
    def disk_size_mib=(disk_size_mib)
      if disk_size_mib.nil?
        fail ArgumentError, 'disk_size_mib cannot be nil'
      end

      if disk_size_mib < 1
        fail ArgumentError, 'invalid value for "disk_size_mib", must be greater than or equal to 1.'
      end

      @disk_size_mib = disk_size_mib
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          uuid == o.uuid &&
          disk_size_bytes == o.disk_size_bytes &&
          storage_config == o.storage_config &&
          device_properties == o.device_properties &&
          data_source_reference == o.data_source_reference &&
          disk_size_mib == o.disk_size_mib &&
          volume_group_reference == o.volume_group_reference
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [uuid, disk_size_bytes, storage_config, device_properties, data_source_reference, disk_size_mib, volume_group_reference].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
