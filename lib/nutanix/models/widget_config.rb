=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Configuration of the widget.
  class WidgetConfig
    # List of selected fields for the widget.
    attr_accessor :widget_field_list

    # Type of the entity.
    attr_accessor :entity_type

    attr_accessor :repetition_criteria

    attr_accessor :widget_data_projection

    # Description of the entity.
    attr_accessor :widget_description

    # Type of widget. Widget type can be one of these.   - bar_chart   - config_summary   - count_summary   - line_chart   - metric_summary_chart   - metric_summary_text   - table   - text 
    attr_accessor :widget_type

    # Size of the widget.
    attr_accessor :widget_size

    # Heading for a widget.
    attr_accessor :widget_heading

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'widget_field_list' => :'widget_field_list',
        :'entity_type' => :'entity_type',
        :'repetition_criteria' => :'repetition_criteria',
        :'widget_data_projection' => :'widget_data_projection',
        :'widget_description' => :'widget_description',
        :'widget_type' => :'widget_type',
        :'widget_size' => :'widget_size',
        :'widget_heading' => :'widget_heading'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'widget_field_list' => :'Array<WidgetFieldDescriptor>',
        :'entity_type' => :'String',
        :'repetition_criteria' => :'RepetitionCriteria',
        :'widget_data_projection' => :'WidgetDataProjection',
        :'widget_description' => :'String',
        :'widget_type' => :'String',
        :'widget_size' => :'String',
        :'widget_heading' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::WidgetConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::WidgetConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'widget_field_list')
        if (value = attributes[:'widget_field_list']).is_a?(Array)
          self.widget_field_list = value
        end
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'repetition_criteria')
        self.repetition_criteria = attributes[:'repetition_criteria']
      end

      if attributes.key?(:'widget_data_projection')
        self.widget_data_projection = attributes[:'widget_data_projection']
      end

      if attributes.key?(:'widget_description')
        self.widget_description = attributes[:'widget_description']
      end

      if attributes.key?(:'widget_type')
        self.widget_type = attributes[:'widget_type']
      else
        self.widget_type = nil
      end

      if attributes.key?(:'widget_size')
        self.widget_size = attributes[:'widget_size']
      end

      if attributes.key?(:'widget_heading')
        self.widget_heading = attributes[:'widget_heading']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@widget_description.nil? && @widget_description.to_s.length > 1000
        invalid_properties.push('invalid value for "widget_description", the character length must be smaller than or equal to 1000.')
      end

      if @widget_type.nil?
        invalid_properties.push('invalid value for "widget_type", widget_type cannot be nil.')
      end

      if !@widget_heading.nil? && @widget_heading.to_s.length > 64
        invalid_properties.push('invalid value for "widget_heading", the character length must be smaller than or equal to 64.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@widget_description.nil? && @widget_description.to_s.length > 1000
      return false if @widget_type.nil?
      return false if !@widget_heading.nil? && @widget_heading.to_s.length > 64
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] widget_description Value to be assigned
    def widget_description=(widget_description)
      if widget_description.nil?
        fail ArgumentError, 'widget_description cannot be nil'
      end

      if widget_description.to_s.length > 1000
        fail ArgumentError, 'invalid value for "widget_description", the character length must be smaller than or equal to 1000.'
      end

      @widget_description = widget_description
    end

    # Custom attribute writer method with validation
    # @param [Object] widget_heading Value to be assigned
    def widget_heading=(widget_heading)
      if widget_heading.nil?
        fail ArgumentError, 'widget_heading cannot be nil'
      end

      if widget_heading.to_s.length > 64
        fail ArgumentError, 'invalid value for "widget_heading", the character length must be smaller than or equal to 64.'
      end

      @widget_heading = widget_heading
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          widget_field_list == o.widget_field_list &&
          entity_type == o.entity_type &&
          repetition_criteria == o.repetition_criteria &&
          widget_data_projection == o.widget_data_projection &&
          widget_description == o.widget_description &&
          widget_type == o.widget_type &&
          widget_size == o.widget_size &&
          widget_heading == o.widget_heading
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [widget_field_list, entity_type, repetition_criteria, widget_data_projection, widget_description, widget_type, widget_size, widget_heading].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
