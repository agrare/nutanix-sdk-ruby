=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Deployment definition for Application.
  class AppDeploymentInput
    # 
    attr_accessor :percent_fault_tolerance

    # List of references for published services
    attr_accessor :published_service_list

    attr_accessor :substrate

    # 
    attr_accessor :description

    # List of references to action 
    attr_accessor :action_list

    # List of references for services
    attr_accessor :service_list

    # 
    attr_accessor :name

    # 
    attr_accessor :uuid

    # List of references for the packages
    attr_accessor :package_list

    # 
    attr_accessor :state

    # 
    attr_accessor :depends_on_list

    # Maximum replicas for the deployment.
    attr_accessor :max_replicas

    # 
    attr_accessor :type

    attr_accessor :config_reference

    # 
    attr_accessor :fault_domain_scope

    # 
    attr_accessor :variable_list

    # Minimum replicas for the deployment.
    attr_accessor :min_replicas

    # Additional deployment options
    attr_accessor :options

    # 
    attr_accessor :num_fault_tolerance

    # list of brownfield elements
    attr_accessor :brownfield_instance_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'percent_fault_tolerance' => :'percent_fault_tolerance',
        :'published_service_list' => :'published_service_list',
        :'substrate' => :'substrate',
        :'description' => :'description',
        :'action_list' => :'action_list',
        :'service_list' => :'service_list',
        :'name' => :'name',
        :'uuid' => :'uuid',
        :'package_list' => :'package_list',
        :'state' => :'state',
        :'depends_on_list' => :'depends_on_list',
        :'max_replicas' => :'max_replicas',
        :'type' => :'type',
        :'config_reference' => :'config_reference',
        :'fault_domain_scope' => :'fault_domain_scope',
        :'variable_list' => :'variable_list',
        :'min_replicas' => :'min_replicas',
        :'options' => :'options',
        :'num_fault_tolerance' => :'num_fault_tolerance',
        :'brownfield_instance_list' => :'brownfield_instance_list'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'percent_fault_tolerance' => :'Integer',
        :'published_service_list' => :'Array<AppPublishedServiceInput>',
        :'substrate' => :'AppSubstrateInput',
        :'description' => :'String',
        :'action_list' => :'Array<AppActionInput>',
        :'service_list' => :'Array<AppServiceInput>',
        :'name' => :'String',
        :'uuid' => :'String',
        :'package_list' => :'Array<AppPackageInput>',
        :'state' => :'String',
        :'depends_on_list' => :'Array<EntityReference>',
        :'max_replicas' => :'String',
        :'type' => :'String',
        :'config_reference' => :'AppBlueprintDeploymentReference',
        :'fault_domain_scope' => :'String',
        :'variable_list' => :'Array<AppVariableInput>',
        :'min_replicas' => :'String',
        :'options' => :'Object',
        :'num_fault_tolerance' => :'Integer',
        :'brownfield_instance_list' => :'Array<BrownfieldInstanceInput>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::AppDeploymentInput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::AppDeploymentInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'percent_fault_tolerance')
        self.percent_fault_tolerance = attributes[:'percent_fault_tolerance']
      end

      if attributes.key?(:'published_service_list')
        if (value = attributes[:'published_service_list']).is_a?(Array)
          self.published_service_list = value
        end
      end

      if attributes.key?(:'substrate')
        self.substrate = attributes[:'substrate']
      else
        self.substrate = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'action_list')
        if (value = attributes[:'action_list']).is_a?(Array)
          self.action_list = value
        end
      end

      if attributes.key?(:'service_list')
        if (value = attributes[:'service_list']).is_a?(Array)
          self.service_list = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      else
        self.uuid = nil
      end

      if attributes.key?(:'package_list')
        if (value = attributes[:'package_list']).is_a?(Array)
          self.package_list = value
        end
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'depends_on_list')
        if (value = attributes[:'depends_on_list']).is_a?(Array)
          self.depends_on_list = value
        end
      end

      if attributes.key?(:'max_replicas')
        self.max_replicas = attributes[:'max_replicas']
      else
        self.max_replicas = '1'
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'GREENFIELD'
      end

      if attributes.key?(:'config_reference')
        self.config_reference = attributes[:'config_reference']
      end

      if attributes.key?(:'fault_domain_scope')
        self.fault_domain_scope = attributes[:'fault_domain_scope']
      end

      if attributes.key?(:'variable_list')
        if (value = attributes[:'variable_list']).is_a?(Array)
          self.variable_list = value
        end
      end

      if attributes.key?(:'min_replicas')
        self.min_replicas = attributes[:'min_replicas']
      else
        self.min_replicas = '1'
      end

      if attributes.key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.key?(:'num_fault_tolerance')
        self.num_fault_tolerance = attributes[:'num_fault_tolerance']
      end

      if attributes.key?(:'brownfield_instance_list')
        if (value = attributes[:'brownfield_instance_list']).is_a?(Array)
          self.brownfield_instance_list = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @substrate.nil?
        invalid_properties.push('invalid value for "substrate", substrate cannot be nil.')
      end

      if !@description.nil? && @description.to_s.length > 1000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1000.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      if @uuid.nil?
        invalid_properties.push('invalid value for "uuid", uuid cannot be nil.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @uuid !~ pattern
        invalid_properties.push("invalid value for \"uuid\", must conform to the pattern #{pattern}.")
      end

      if @max_replicas.nil?
        invalid_properties.push('invalid value for "max_replicas", max_replicas cannot be nil.')
      end

      if @min_replicas.nil?
        invalid_properties.push('invalid value for "min_replicas", min_replicas cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @substrate.nil?
      return false if !@description.nil? && @description.to_s.length > 1000
      return false if @name.nil?
      return false if @name.to_s.length > 64
      return false if @uuid.nil?
      return false if @uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if @max_replicas.nil?
      return false if @min_replicas.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 1000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1000.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] uuid Value to be assigned
    def uuid=(uuid)
      if uuid.nil?
        fail ArgumentError, 'uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if uuid !~ pattern
        fail ArgumentError, "invalid value for \"uuid\", must conform to the pattern #{pattern}."
      end

      @uuid = uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          percent_fault_tolerance == o.percent_fault_tolerance &&
          published_service_list == o.published_service_list &&
          substrate == o.substrate &&
          description == o.description &&
          action_list == o.action_list &&
          service_list == o.service_list &&
          name == o.name &&
          uuid == o.uuid &&
          package_list == o.package_list &&
          state == o.state &&
          depends_on_list == o.depends_on_list &&
          max_replicas == o.max_replicas &&
          type == o.type &&
          config_reference == o.config_reference &&
          fault_domain_scope == o.fault_domain_scope &&
          variable_list == o.variable_list &&
          min_replicas == o.min_replicas &&
          options == o.options &&
          num_fault_tolerance == o.num_fault_tolerance &&
          brownfield_instance_list == o.brownfield_instance_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [percent_fault_tolerance, published_service_list, substrate, description, action_list, service_list, name, uuid, package_list, state, depends_on_list, max_replicas, type, config_reference, fault_domain_scope, variable_list, min_replicas, options, num_fault_tolerance, brownfield_instance_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
