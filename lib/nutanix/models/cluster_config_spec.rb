=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Cluster Configuration.
  class ClusterConfigSpec
    # GPU driver version.
    attr_accessor :gpu_driver_version

    attr_accessor :client_auth

    # List of valid ssh keys for the cluster.
    attr_accessor :authorized_public_key_list

    # Map of software on the cluster with software type as the key. 
    attr_accessor :software_map

    # Cluster encryption status.
    attr_accessor :encryption_status

    # Cluster supported redundancy factor. Default is 2.
    attr_accessor :redundancy_factor

    attr_accessor :certification_signing_info

    # Verbosity level settings for populating support information. - 'Nothing': Send nothing - 'Basic': Send basic information - skip core dump and hypervisor            stats information - 'BasicPlusCoreDump': Send basic and core dump information - 'All': Send all information 
    attr_accessor :supported_information_verbosity

    attr_accessor :external_configurations

    # Domain awareness supported on cluster.
    attr_accessor :domain_awareness_level

    # Array of enabled features.
    attr_accessor :enabled_feature_list

    # Zone name used in value of TZ environment variable.
    attr_accessor :timezone

    # Indicates if downsampling of metrics syncing between PE and PC is enabled or not. 
    attr_accessor :enable_efficient_metric_sync

    # Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is                  valid only for single node or two node clusters. - 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node                         cluster. - 'OVERRIDE': Valid only for single node cluster. If the user wants to               run vms on a single node cluster in read only mode, he               can set the cluster peration mode to override. Writes               will be allowed in override mode. 
    attr_accessor :operation_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'gpu_driver_version' => :'gpu_driver_version',
        :'client_auth' => :'client_auth',
        :'authorized_public_key_list' => :'authorized_public_key_list',
        :'software_map' => :'software_map',
        :'encryption_status' => :'encryption_status',
        :'redundancy_factor' => :'redundancy_factor',
        :'certification_signing_info' => :'certification_signing_info',
        :'supported_information_verbosity' => :'supported_information_verbosity',
        :'external_configurations' => :'external_configurations',
        :'domain_awareness_level' => :'domain_awareness_level',
        :'enabled_feature_list' => :'enabled_feature_list',
        :'timezone' => :'timezone',
        :'enable_efficient_metric_sync' => :'enable_efficient_metric_sync',
        :'operation_mode' => :'operation_mode'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'gpu_driver_version' => :'String',
        :'client_auth' => :'ClientAuth',
        :'authorized_public_key_list' => :'Array<PublicKey>',
        :'software_map' => :'Hash<String, ClusterSoftware>',
        :'encryption_status' => :'String',
        :'redundancy_factor' => :'Integer',
        :'certification_signing_info' => :'CertificationSigningInfo',
        :'supported_information_verbosity' => :'String',
        :'external_configurations' => :'ExternalConfigurationsSpec',
        :'domain_awareness_level' => :'String',
        :'enabled_feature_list' => :'Array<String>',
        :'timezone' => :'String',
        :'enable_efficient_metric_sync' => :'Boolean',
        :'operation_mode' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ClusterConfigSpec` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ClusterConfigSpec`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'gpu_driver_version')
        self.gpu_driver_version = attributes[:'gpu_driver_version']
      end

      if attributes.key?(:'client_auth')
        self.client_auth = attributes[:'client_auth']
      end

      if attributes.key?(:'authorized_public_key_list')
        if (value = attributes[:'authorized_public_key_list']).is_a?(Array)
          self.authorized_public_key_list = value
        end
      end

      if attributes.key?(:'software_map')
        if (value = attributes[:'software_map']).is_a?(Hash)
          self.software_map = value
        end
      end

      if attributes.key?(:'encryption_status')
        self.encryption_status = attributes[:'encryption_status']
      else
        self.encryption_status = 'NOT_SUPPORTED'
      end

      if attributes.key?(:'redundancy_factor')
        self.redundancy_factor = attributes[:'redundancy_factor']
      end

      if attributes.key?(:'certification_signing_info')
        self.certification_signing_info = attributes[:'certification_signing_info']
      end

      if attributes.key?(:'supported_information_verbosity')
        self.supported_information_verbosity = attributes[:'supported_information_verbosity']
      else
        self.supported_information_verbosity = 'BASIC_PLUS_CORE_DUMP'
      end

      if attributes.key?(:'external_configurations')
        self.external_configurations = attributes[:'external_configurations']
      end

      if attributes.key?(:'domain_awareness_level')
        self.domain_awareness_level = attributes[:'domain_awareness_level']
      else
        self.domain_awareness_level = 'NODE'
      end

      if attributes.key?(:'enabled_feature_list')
        if (value = attributes[:'enabled_feature_list']).is_a?(Array)
          self.enabled_feature_list = value
        end
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'enable_efficient_metric_sync')
        self.enable_efficient_metric_sync = attributes[:'enable_efficient_metric_sync']
      end

      if attributes.key?(:'operation_mode')
        self.operation_mode = attributes[:'operation_mode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          gpu_driver_version == o.gpu_driver_version &&
          client_auth == o.client_auth &&
          authorized_public_key_list == o.authorized_public_key_list &&
          software_map == o.software_map &&
          encryption_status == o.encryption_status &&
          redundancy_factor == o.redundancy_factor &&
          certification_signing_info == o.certification_signing_info &&
          supported_information_verbosity == o.supported_information_verbosity &&
          external_configurations == o.external_configurations &&
          domain_awareness_level == o.domain_awareness_level &&
          enabled_feature_list == o.enabled_feature_list &&
          timezone == o.timezone &&
          enable_efficient_metric_sync == o.enable_efficient_metric_sync &&
          operation_mode == o.operation_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [gpu_driver_version, client_auth, authorized_public_key_list, software_map, encryption_status, redundancy_factor, certification_signing_info, supported_information_verbosity, external_configurations, domain_awareness_level, enabled_feature_list, timezone, enable_efficient_metric_sync, operation_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
