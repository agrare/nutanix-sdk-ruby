=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # line item of an invoice.
  class BillingInvoiceItem
    # Nature of the charge.
    attr_accessor :charge_type

    # Name of the subscription.
    attr_accessor :subscription_name

    attr_accessor :tax_amount

    attr_accessor :charge_amount

    # Date on which subscription to the line item ends.
    attr_accessor :service_end_date

    # Id of the charge plan applicable to the subscription.
    attr_accessor :charge_id

    # Date on which this service was started.
    attr_accessor :service_start_date

    # Name of the charge plan applicable to the subscription.
    attr_accessor :charge_name

    # Id of the subscription.
    attr_accessor :subscription_id

    # Type of processing done on the charge.
    attr_accessor :processing_type

    # Date on which this line item will be charged.
    attr_accessor :charge_date

    # Description of the charge plan applicable to the subscription. 
    attr_accessor :charge_description

    # Number of instances of the line item subscribed.
    attr_accessor :quantity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'charge_type' => :'charge_type',
        :'subscription_name' => :'subscription_name',
        :'tax_amount' => :'tax_amount',
        :'charge_amount' => :'charge_amount',
        :'service_end_date' => :'service_end_date',
        :'charge_id' => :'charge_id',
        :'service_start_date' => :'service_start_date',
        :'charge_name' => :'charge_name',
        :'subscription_id' => :'subscription_id',
        :'processing_type' => :'processing_type',
        :'charge_date' => :'charge_date',
        :'charge_description' => :'charge_description',
        :'quantity' => :'quantity'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'charge_type' => :'String',
        :'subscription_name' => :'String',
        :'tax_amount' => :'MonetaryValue',
        :'charge_amount' => :'MonetaryValue',
        :'service_end_date' => :'Date',
        :'charge_id' => :'String',
        :'service_start_date' => :'Date',
        :'charge_name' => :'String',
        :'subscription_id' => :'String',
        :'processing_type' => :'String',
        :'charge_date' => :'Date',
        :'charge_description' => :'String',
        :'quantity' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::BillingInvoiceItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::BillingInvoiceItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'charge_type')
        self.charge_type = attributes[:'charge_type']
      end

      if attributes.key?(:'subscription_name')
        self.subscription_name = attributes[:'subscription_name']
      end

      if attributes.key?(:'tax_amount')
        self.tax_amount = attributes[:'tax_amount']
      end

      if attributes.key?(:'charge_amount')
        self.charge_amount = attributes[:'charge_amount']
      end

      if attributes.key?(:'service_end_date')
        self.service_end_date = attributes[:'service_end_date']
      end

      if attributes.key?(:'charge_id')
        self.charge_id = attributes[:'charge_id']
      end

      if attributes.key?(:'service_start_date')
        self.service_start_date = attributes[:'service_start_date']
      end

      if attributes.key?(:'charge_name')
        self.charge_name = attributes[:'charge_name']
      end

      if attributes.key?(:'subscription_id')
        self.subscription_id = attributes[:'subscription_id']
      end

      if attributes.key?(:'processing_type')
        self.processing_type = attributes[:'processing_type']
      end

      if attributes.key?(:'charge_date')
        self.charge_date = attributes[:'charge_date']
      end

      if attributes.key?(:'charge_description')
        self.charge_description = attributes[:'charge_description']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          charge_type == o.charge_type &&
          subscription_name == o.subscription_name &&
          tax_amount == o.tax_amount &&
          charge_amount == o.charge_amount &&
          service_end_date == o.service_end_date &&
          charge_id == o.charge_id &&
          service_start_date == o.service_start_date &&
          charge_name == o.charge_name &&
          subscription_id == o.subscription_id &&
          processing_type == o.processing_type &&
          charge_date == o.charge_date &&
          charge_description == o.charge_description &&
          quantity == o.quantity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [charge_type, subscription_name, tax_amount, charge_amount, service_end_date, charge_id, service_start_date, charge_name, subscription_id, processing_type, charge_date, charge_description, quantity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
