=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Network device entity definition
  class NetworkDeviceResources
    attr_accessor :description

    # The current firmware version
    attr_accessor :current_firmware_version

    # A well known string for network device class information
    attr_accessor :device_class

    attr_accessor :component

    # device IP address
    attr_accessor :ip_address

    # upgrade status
    attr_accessor :upgrade_status

    attr_accessor :rack_reference

    # device model
    attr_accessor :model

    # Device serial number
    attr_accessor :device_serial

    # The target firmware version
    attr_accessor :target_firmware_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'description',
        :'current_firmware_version' => :'current_firmware_version',
        :'device_class' => :'device_class',
        :'component' => :'component',
        :'ip_address' => :'ip_address',
        :'upgrade_status' => :'upgrade_status',
        :'rack_reference' => :'rack_reference',
        :'model' => :'model',
        :'device_serial' => :'device_serial',
        :'target_firmware_version' => :'target_firmware_version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'description' => :'String',
        :'current_firmware_version' => :'String',
        :'device_class' => :'String',
        :'component' => :'DatacenterComponent',
        :'ip_address' => :'String',
        :'upgrade_status' => :'String',
        :'rack_reference' => :'RackReference',
        :'model' => :'String',
        :'device_serial' => :'String',
        :'target_firmware_version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::NetworkDeviceResources` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::NetworkDeviceResources`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'current_firmware_version')
        self.current_firmware_version = attributes[:'current_firmware_version']
      end

      if attributes.key?(:'device_class')
        self.device_class = attributes[:'device_class']
      end

      if attributes.key?(:'component')
        self.component = attributes[:'component']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'upgrade_status')
        self.upgrade_status = attributes[:'upgrade_status']
      end

      if attributes.key?(:'rack_reference')
        self.rack_reference = attributes[:'rack_reference']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'device_serial')
        self.device_serial = attributes[:'device_serial']
      end

      if attributes.key?(:'target_firmware_version')
        self.target_firmware_version = attributes[:'target_firmware_version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@description.nil? && @description.to_s.length > 500
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 500.')
      end

      if !@current_firmware_version.nil? && @current_firmware_version.to_s.length > 50
        invalid_properties.push('invalid value for "current_firmware_version", the character length must be smaller than or equal to 50.')
      end

      if !@device_class.nil? && @device_class.to_s.length > 100
        invalid_properties.push('invalid value for "device_class", the character length must be smaller than or equal to 100.')
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if !@ip_address.nil? && @ip_address !~ pattern
        invalid_properties.push("invalid value for \"ip_address\", must conform to the pattern #{pattern}.")
      end

      if !@upgrade_status.nil? && @upgrade_status.to_s.length > 25
        invalid_properties.push('invalid value for "upgrade_status", the character length must be smaller than or equal to 25.')
      end

      if !@model.nil? && @model.to_s.length > 50
        invalid_properties.push('invalid value for "model", the character length must be smaller than or equal to 50.')
      end

      if !@device_serial.nil? && @device_serial.to_s.length > 100
        invalid_properties.push('invalid value for "device_serial", the character length must be smaller than or equal to 100.')
      end

      if !@target_firmware_version.nil? && @target_firmware_version.to_s.length > 50
        invalid_properties.push('invalid value for "target_firmware_version", the character length must be smaller than or equal to 50.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@description.nil? && @description.to_s.length > 500
      return false if !@current_firmware_version.nil? && @current_firmware_version.to_s.length > 50
      return false if !@device_class.nil? && @device_class.to_s.length > 100
      return false if !@ip_address.nil? && @ip_address !~ Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      return false if !@upgrade_status.nil? && @upgrade_status.to_s.length > 25
      return false if !@model.nil? && @model.to_s.length > 50
      return false if !@device_serial.nil? && @device_serial.to_s.length > 100
      return false if !@target_firmware_version.nil? && @target_firmware_version.to_s.length > 50
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 500
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 500.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] current_firmware_version Value to be assigned
    def current_firmware_version=(current_firmware_version)
      if current_firmware_version.nil?
        fail ArgumentError, 'current_firmware_version cannot be nil'
      end

      if current_firmware_version.to_s.length > 50
        fail ArgumentError, 'invalid value for "current_firmware_version", the character length must be smaller than or equal to 50.'
      end

      @current_firmware_version = current_firmware_version
    end

    # Custom attribute writer method with validation
    # @param [Object] device_class Value to be assigned
    def device_class=(device_class)
      if device_class.nil?
        fail ArgumentError, 'device_class cannot be nil'
      end

      if device_class.to_s.length > 100
        fail ArgumentError, 'invalid value for "device_class", the character length must be smaller than or equal to 100.'
      end

      @device_class = device_class
    end

    # Custom attribute writer method with validation
    # @param [Object] ip_address Value to be assigned
    def ip_address=(ip_address)
      if ip_address.nil?
        fail ArgumentError, 'ip_address cannot be nil'
      end

      pattern = Regexp.new(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/)
      if ip_address !~ pattern
        fail ArgumentError, "invalid value for \"ip_address\", must conform to the pattern #{pattern}."
      end

      @ip_address = ip_address
    end

    # Custom attribute writer method with validation
    # @param [Object] upgrade_status Value to be assigned
    def upgrade_status=(upgrade_status)
      if upgrade_status.nil?
        fail ArgumentError, 'upgrade_status cannot be nil'
      end

      if upgrade_status.to_s.length > 25
        fail ArgumentError, 'invalid value for "upgrade_status", the character length must be smaller than or equal to 25.'
      end

      @upgrade_status = upgrade_status
    end

    # Custom attribute writer method with validation
    # @param [Object] model Value to be assigned
    def model=(model)
      if model.nil?
        fail ArgumentError, 'model cannot be nil'
      end

      if model.to_s.length > 50
        fail ArgumentError, 'invalid value for "model", the character length must be smaller than or equal to 50.'
      end

      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] device_serial Value to be assigned
    def device_serial=(device_serial)
      if device_serial.nil?
        fail ArgumentError, 'device_serial cannot be nil'
      end

      if device_serial.to_s.length > 100
        fail ArgumentError, 'invalid value for "device_serial", the character length must be smaller than or equal to 100.'
      end

      @device_serial = device_serial
    end

    # Custom attribute writer method with validation
    # @param [Object] target_firmware_version Value to be assigned
    def target_firmware_version=(target_firmware_version)
      if target_firmware_version.nil?
        fail ArgumentError, 'target_firmware_version cannot be nil'
      end

      if target_firmware_version.to_s.length > 50
        fail ArgumentError, 'invalid value for "target_firmware_version", the character length must be smaller than or equal to 50.'
      end

      @target_firmware_version = target_firmware_version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          current_firmware_version == o.current_firmware_version &&
          device_class == o.device_class &&
          component == o.component &&
          ip_address == o.ip_address &&
          upgrade_status == o.upgrade_status &&
          rack_reference == o.rack_reference &&
          model == o.model &&
          device_serial == o.device_serial &&
          target_firmware_version == o.target_firmware_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, current_firmware_version, device_class, component, ip_address, upgrade_status, rack_reference, model, device_serial, target_firmware_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
