=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # Connection information
  class RemoteConnectionInfo
    # public key
    attr_accessor :public_key

    # Cluster Fully Qualified Domain Name
    attr_accessor :cluster_fqdn

    # Connection uuid for remote Peer
    attr_accessor :peer_remote_connection_uuid

    attr_accessor :additional_capabilities

    attr_accessor :node_address_list

    attr_accessor :token

    # UUID of cluster
    attr_accessor :cluster_uuid

    # cluster function string
    attr_accessor :cluster_function

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'public_key' => :'public_key',
        :'cluster_fqdn' => :'cluster_fqdn',
        :'peer_remote_connection_uuid' => :'peer_remote_connection_uuid',
        :'additional_capabilities' => :'additional_capabilities',
        :'node_address_list' => :'node_address_list',
        :'token' => :'token',
        :'cluster_uuid' => :'cluster_uuid',
        :'cluster_function' => :'cluster_function'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'public_key' => :'String',
        :'cluster_fqdn' => :'String',
        :'peer_remote_connection_uuid' => :'String',
        :'additional_capabilities' => :'Array<String>',
        :'node_address_list' => :'Array<Address>',
        :'token' => :'RemoteConnectionToken',
        :'cluster_uuid' => :'String',
        :'cluster_function' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::RemoteConnectionInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::RemoteConnectionInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'public_key')
        self.public_key = attributes[:'public_key']
      end

      if attributes.key?(:'cluster_fqdn')
        self.cluster_fqdn = attributes[:'cluster_fqdn']
      end

      if attributes.key?(:'peer_remote_connection_uuid')
        self.peer_remote_connection_uuid = attributes[:'peer_remote_connection_uuid']
      end

      if attributes.key?(:'additional_capabilities')
        if (value = attributes[:'additional_capabilities']).is_a?(Array)
          self.additional_capabilities = value
        end
      end

      if attributes.key?(:'node_address_list')
        if (value = attributes[:'node_address_list']).is_a?(Array)
          self.node_address_list = value
        end
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'cluster_uuid')
        self.cluster_uuid = attributes[:'cluster_uuid']
      end

      if attributes.key?(:'cluster_function')
        self.cluster_function = attributes[:'cluster_function']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@cluster_fqdn.nil? && @cluster_fqdn.to_s.length > 255
        invalid_properties.push('invalid value for "cluster_fqdn", the character length must be smaller than or equal to 255.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@peer_remote_connection_uuid.nil? && @peer_remote_connection_uuid !~ pattern
        invalid_properties.push("invalid value for \"peer_remote_connection_uuid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@cluster_uuid.nil? && @cluster_uuid !~ pattern
        invalid_properties.push("invalid value for \"cluster_uuid\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@cluster_fqdn.nil? && @cluster_fqdn.to_s.length > 255
      return false if !@peer_remote_connection_uuid.nil? && @peer_remote_connection_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@cluster_uuid.nil? && @cluster_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_fqdn Value to be assigned
    def cluster_fqdn=(cluster_fqdn)
      if cluster_fqdn.nil?
        fail ArgumentError, 'cluster_fqdn cannot be nil'
      end

      if cluster_fqdn.to_s.length > 255
        fail ArgumentError, 'invalid value for "cluster_fqdn", the character length must be smaller than or equal to 255.'
      end

      @cluster_fqdn = cluster_fqdn
    end

    # Custom attribute writer method with validation
    # @param [Object] peer_remote_connection_uuid Value to be assigned
    def peer_remote_connection_uuid=(peer_remote_connection_uuid)
      if peer_remote_connection_uuid.nil?
        fail ArgumentError, 'peer_remote_connection_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if peer_remote_connection_uuid !~ pattern
        fail ArgumentError, "invalid value for \"peer_remote_connection_uuid\", must conform to the pattern #{pattern}."
      end

      @peer_remote_connection_uuid = peer_remote_connection_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_uuid Value to be assigned
    def cluster_uuid=(cluster_uuid)
      if cluster_uuid.nil?
        fail ArgumentError, 'cluster_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if cluster_uuid !~ pattern
        fail ArgumentError, "invalid value for \"cluster_uuid\", must conform to the pattern #{pattern}."
      end

      @cluster_uuid = cluster_uuid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          public_key == o.public_key &&
          cluster_fqdn == o.cluster_fqdn &&
          peer_remote_connection_uuid == o.peer_remote_connection_uuid &&
          additional_capabilities == o.additional_capabilities &&
          node_address_list == o.node_address_list &&
          token == o.token &&
          cluster_uuid == o.cluster_uuid &&
          cluster_function == o.cluster_function
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [public_key, cluster_fqdn, peer_remote_connection_uuid, additional_capabilities, node_address_list, token, cluster_uuid, cluster_function].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
