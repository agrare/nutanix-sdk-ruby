=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module Nutanix
  # The metadata describes what a parameter is.
  class ParamDescriptor
    attr_accessor :default_value

    # The possible entity types the param value be holding like vm, etc.
    attr_accessor :entity_types

    # parameter display name
    attr_accessor :display_name

    # parameter name
    attr_accessor :name

    # The field can take parameter or not.
    attr_accessor :is_parameterized

    # The parameter can only be one of the choices in this ordered list. We do not support choice list of elements with complex type. 
    attr_accessor :choice_list

    # Is this parameter a list or a scalar value
    attr_accessor :is_array

    # Deprecated. Please use entity_types instead. The entity type the param value be holding like vm, etc. 
    attr_accessor :entity_type

    attr_accessor :value_info

    # The parameter's data type.  If the parameter is a list, it is the element data type. 
    attr_accessor :element_data_type

    # Flag to indicate if this parameter is deprecated.
    attr_accessor :is_deprecated

    # Is this parameter a secret like password, security token? 
    attr_accessor :is_secret

    # A list of parent params with their expected values. Any one of these params must have the provided value in order for this field to be valid.
    attr_accessor :parent_params

    # The field is hidden from other actions or triggers.  For example, not showing in the UI. 
    attr_accessor :is_hidden

    # Is this parameter optional.
    attr_accessor :is_required

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'default_value' => :'default_value',
        :'entity_types' => :'entity_types',
        :'display_name' => :'display_name',
        :'name' => :'name',
        :'is_parameterized' => :'is_parameterized',
        :'choice_list' => :'choice_list',
        :'is_array' => :'is_array',
        :'entity_type' => :'entity_type',
        :'value_info' => :'value_info',
        :'element_data_type' => :'element_data_type',
        :'is_deprecated' => :'is_deprecated',
        :'is_secret' => :'is_secret',
        :'parent_params' => :'parent_params',
        :'is_hidden' => :'is_hidden',
        :'is_required' => :'is_required'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'default_value' => :'ActionServiceParamValue',
        :'entity_types' => :'Array<String>',
        :'display_name' => :'String',
        :'name' => :'String',
        :'is_parameterized' => :'Boolean',
        :'choice_list' => :'Array<ParamDescriptorChoiceListInner>',
        :'is_array' => :'Boolean',
        :'entity_type' => :'String',
        :'value_info' => :'ValueInfo',
        :'element_data_type' => :'String',
        :'is_deprecated' => :'Boolean',
        :'is_secret' => :'Boolean',
        :'parent_params' => :'Array<ParamDescriptorParentParamsInner>',
        :'is_hidden' => :'Boolean',
        :'is_required' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nutanix::ParamDescriptor` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nutanix::ParamDescriptor`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'default_value')
        self.default_value = attributes[:'default_value']
      end

      if attributes.key?(:'entity_types')
        if (value = attributes[:'entity_types']).is_a?(Array)
          self.entity_types = value
        end
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      else
        self.display_name = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'is_parameterized')
        self.is_parameterized = attributes[:'is_parameterized']
      end

      if attributes.key?(:'choice_list')
        if (value = attributes[:'choice_list']).is_a?(Array)
          self.choice_list = value
        end
      end

      if attributes.key?(:'is_array')
        self.is_array = attributes[:'is_array']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'value_info')
        self.value_info = attributes[:'value_info']
      end

      if attributes.key?(:'element_data_type')
        self.element_data_type = attributes[:'element_data_type']
      else
        self.element_data_type = nil
      end

      if attributes.key?(:'is_deprecated')
        self.is_deprecated = attributes[:'is_deprecated']
      end

      if attributes.key?(:'is_secret')
        self.is_secret = attributes[:'is_secret']
      end

      if attributes.key?(:'parent_params')
        if (value = attributes[:'parent_params']).is_a?(Array)
          self.parent_params = value
        end
      end

      if attributes.key?(:'is_hidden')
        self.is_hidden = attributes[:'is_hidden']
      end

      if attributes.key?(:'is_required')
        self.is_required = attributes[:'is_required']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @display_name.to_s.length > 64
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @display_name !~ pattern
        invalid_properties.push("invalid value for \"display_name\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      if !@entity_type.nil? && @entity_type.to_s.length > 64
        invalid_properties.push('invalid value for "entity_type", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if !@entity_type.nil? && @entity_type !~ pattern
        invalid_properties.push("invalid value for \"entity_type\", must conform to the pattern #{pattern}.")
      end

      if @element_data_type.nil?
        invalid_properties.push('invalid value for "element_data_type", element_data_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @display_name.nil?
      return false if @display_name.to_s.length > 64
      return false if @display_name !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if @name.nil?
      return false if @name.to_s.length > 64
      return false if @name !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if !@entity_type.nil? && @entity_type.to_s.length > 64
      return false if !@entity_type.nil? && @entity_type !~ Regexp.new(/^[^&<>'\/"]*$/)
      return false if @element_data_type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.nil?
        fail ArgumentError, 'display_name cannot be nil'
      end

      if display_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if display_name !~ pattern
        fail ArgumentError, "invalid value for \"display_name\", must conform to the pattern #{pattern}."
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] entity_type Value to be assigned
    def entity_type=(entity_type)
      if entity_type.nil?
        fail ArgumentError, 'entity_type cannot be nil'
      end

      if entity_type.to_s.length > 64
        fail ArgumentError, 'invalid value for "entity_type", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[^&<>'\/"]*$/)
      if entity_type !~ pattern
        fail ArgumentError, "invalid value for \"entity_type\", must conform to the pattern #{pattern}."
      end

      @entity_type = entity_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          default_value == o.default_value &&
          entity_types == o.entity_types &&
          display_name == o.display_name &&
          name == o.name &&
          is_parameterized == o.is_parameterized &&
          choice_list == o.choice_list &&
          is_array == o.is_array &&
          entity_type == o.entity_type &&
          value_info == o.value_info &&
          element_data_type == o.element_data_type &&
          is_deprecated == o.is_deprecated &&
          is_secret == o.is_secret &&
          parent_params == o.parent_params &&
          is_hidden == o.is_hidden &&
          is_required == o.is_required
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [default_value, entity_types, display_name, name, is_parameterized, choice_list, is_array, entity_type, value_info, element_data_type, is_deprecated, is_secret, parent_params, is_hidden, is_required].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Nutanix.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
