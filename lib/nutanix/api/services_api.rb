=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class ServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Manage Disaster Recovery service.
    # Manage Disaster Recovery service.
    # @param body [DisasterRecoveryServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceResponse]
    def services_disaster_recovery_post(body, opts = {})
      data, _status_code, _headers = services_disaster_recovery_post_with_http_info(body, opts)
      data
    end

    # Manage Disaster Recovery service.
    # Manage Disaster Recovery service.
    # @param body [DisasterRecoveryServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceResponse, Integer, Hash)>] ServiceResponse data, response status code and response headers
    def services_disaster_recovery_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_disaster_recovery_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_disaster_recovery_post"
      end
      # resource path
      local_var_path = '/services/disaster_recovery'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_disaster_recovery_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_disaster_recovery_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage Files Manager service.
    # Manage Files Manager service.
    # @param body [FilesManagerServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceResponse]
    def services_files_manager_post(body, opts = {})
      data, _status_code, _headers = services_files_manager_post_with_http_info(body, opts)
      data
    end

    # Manage Files Manager service.
    # Manage Files Manager service.
    # @param body [FilesManagerServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceResponse, Integer, Hash)>] ServiceResponse data, response status code and response headers
    def services_files_manager_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_files_manager_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_files_manager_post"
      end
      # resource path
      local_var_path = '/services/files_manager'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_files_manager_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_files_manager_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cluster feature status.
    # Cluster feature capability status.
    # @param [Hash] opts the optional parameters
    # @return [SecurityPlanningClusterCapabilityStatus]
    def services_flow_security_planning_cluster_capability_get(opts = {})
      data, _status_code, _headers = services_flow_security_planning_cluster_capability_get_with_http_info(opts)
      data
    end

    # Cluster feature status.
    # Cluster feature capability status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPlanningClusterCapabilityStatus, Integer, Hash)>] SecurityPlanningClusterCapabilityStatus data, response status code and response headers
    def services_flow_security_planning_cluster_capability_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_flow_security_planning_cluster_capability_get ...'
      end
      # resource path
      local_var_path = '/services/flow/security_planning/cluster_capability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SecurityPlanningClusterCapabilityStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_flow_security_planning_cluster_capability_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_flow_security_planning_cluster_capability_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data Collector Upgrade Status.
    # Data Collector Upgrade Status.
    # @param [Hash] opts the optional parameters
    # @return [SecurityPlanningDataCollectorUpgradeStatus]
    def services_flow_security_planning_data_collector_upgrade_get(opts = {})
      data, _status_code, _headers = services_flow_security_planning_data_collector_upgrade_get_with_http_info(opts)
      data
    end

    # Data Collector Upgrade Status.
    # Data Collector Upgrade Status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecurityPlanningDataCollectorUpgradeStatus, Integer, Hash)>] SecurityPlanningDataCollectorUpgradeStatus data, response status code and response headers
    def services_flow_security_planning_data_collector_upgrade_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_flow_security_planning_data_collector_upgrade_get ...'
      end
      # resource path
      local_var_path = '/services/flow/security_planning/data_collector/upgrade'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SecurityPlanningDataCollectorUpgradeStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_flow_security_planning_data_collector_upgrade_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_flow_security_planning_data_collector_upgrade_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Security Planning Data Collector Upgrade.
    # Security Planning Data Collector Upgrade.
    # @param body [SecurityPlanningDataCollectorUpgradeConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfigStatus]
    def services_flow_security_planning_data_collector_upgrade_post(body, opts = {})
      data, _status_code, _headers = services_flow_security_planning_data_collector_upgrade_post_with_http_info(body, opts)
      data
    end

    # Security Planning Data Collector Upgrade.
    # Security Planning Data Collector Upgrade.
    # @param body [SecurityPlanningDataCollectorUpgradeConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfigStatus, Integer, Hash)>] ServiceConfigStatus data, response status code and response headers
    def services_flow_security_planning_data_collector_upgrade_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_flow_security_planning_data_collector_upgrade_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_flow_security_planning_data_collector_upgrade_post"
      end
      # resource path
      local_var_path = '/services/flow/security_planning/data_collector/upgrade'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceConfigStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_flow_security_planning_data_collector_upgrade_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_flow_security_planning_data_collector_upgrade_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Security Planning Configuration.
    # Security Planning Configuration.
    # @param body [FlowSecurityPlanningConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfigStatus]
    def services_flow_security_planning_post(body, opts = {})
      data, _status_code, _headers = services_flow_security_planning_post_with_http_info(body, opts)
      data
    end

    # Security Planning Configuration.
    # Security Planning Configuration.
    # @param body [FlowSecurityPlanningConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfigStatus, Integer, Hash)>] ServiceConfigStatus data, response status code and response headers
    def services_flow_security_planning_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_flow_security_planning_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_flow_security_planning_post"
      end
      # resource path
      local_var_path = '/services/flow/security_planning'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceConfigStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_flow_security_planning_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_flow_security_planning_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Service status.
    # Service status.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_capabilities Whether or not to include the capabilities of this service in the response. Capabilities for service include if it can be enabled/disabled or not. 
    # @return [ServiceEnablementStatus]
    def services_flow_security_planning_status_get(opts = {})
      data, _status_code, _headers = services_flow_security_planning_status_get_with_http_info(opts)
      data
    end

    # Service status.
    # Service status.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_capabilities Whether or not to include the capabilities of this service in the response. Capabilities for service include if it can be enabled/disabled or not. 
    # @return [Array<(ServiceEnablementStatus, Integer, Hash)>] ServiceEnablementStatus data, response status code and response headers
    def services_flow_security_planning_status_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_flow_security_planning_status_get ...'
      end
      # resource path
      local_var_path = '/services/flow/security_planning/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_capabilities'] = opts[:'include_capabilities'] if !opts[:'include_capabilities'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceEnablementStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_flow_security_planning_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_flow_security_planning_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage Microsegmentation.
    # Manage Microsegmentation.
    # @param body [MicrosegServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfigStatus]
    def services_microseg_post(body, opts = {})
      data, _status_code, _headers = services_microseg_post_with_http_info(body, opts)
      data
    end

    # Manage Microsegmentation.
    # Manage Microsegmentation.
    # @param body [MicrosegServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfigStatus, Integer, Hash)>] ServiceConfigStatus data, response status code and response headers
    def services_microseg_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_microseg_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_microseg_post"
      end
      # resource path
      local_var_path = '/services/microseg'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceConfigStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_microseg_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_microseg_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage NuCalm service.
    # Manage NuCalm service.
    # @param body [NucalmServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfigStatus]
    def services_nucalm_post(body, opts = {})
      data, _status_code, _headers = services_nucalm_post_with_http_info(body, opts)
      data
    end

    # Manage NuCalm service.
    # Manage NuCalm service.
    # @param body [NucalmServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfigStatus, Integer, Hash)>] ServiceConfigStatus data, response status code and response headers
    def services_nucalm_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_nucalm_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_nucalm_post"
      end
      # resource path
      local_var_path = '/services/nucalm'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceConfigStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_nucalm_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_nucalm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage Bucket Service Manager service.
    # Manage Bucket Service Manager service.
    # @param body [OssServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceResponse]
    def services_oss_post(body, opts = {})
      data, _status_code, _headers = services_oss_post_with_http_info(body, opts)
      data
    end

    # Manage Bucket Service Manager service.
    # Manage Bucket Service Manager service.
    # @param body [OssServiceConfigInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceResponse, Integer, Hash)>] ServiceResponse data, response status code and response headers
    def services_oss_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_oss_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_oss_post"
      end
      # resource path
      local_var_path = '/services/oss'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_oss_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_oss_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cluster feature status.
    # Cluster feature capability status.
    # @param service_name [String] The service name.
    # @param [Hash] opts the optional parameters
    # @return [ClusterCapabilityStatus]
    def services_service_name_cluster_capability_get(service_name, opts = {})
      data, _status_code, _headers = services_service_name_cluster_capability_get_with_http_info(service_name, opts)
      data
    end

    # Cluster feature status.
    # Cluster feature capability status.
    # @param service_name [String] The service name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterCapabilityStatus, Integer, Hash)>] ClusterCapabilityStatus data, response status code and response headers
    def services_service_name_cluster_capability_get_with_http_info(service_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_service_name_cluster_capability_get ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling ServicesApi.services_service_name_cluster_capability_get"
      end
      if @api_client.config.client_side_validation && service_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "service_name" when calling ServicesApi.services_service_name_cluster_capability_get, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/services/{service_name}/cluster_capability'.sub('{' + 'service_name' + '}', CGI.escape(service_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClusterCapabilityStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_service_name_cluster_capability_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_service_name_cluster_capability_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Service status.
    # Service status.
    # @param service_name [String] The service name.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_capabilities Whether or not to include the capabilities of this service in the response. Capabilities for service include if it can be enabled/disabled or not. 
    # @return [ServiceEnablementStatus]
    def services_service_name_status_get(service_name, opts = {})
      data, _status_code, _headers = services_service_name_status_get_with_http_info(service_name, opts)
      data
    end

    # Service status.
    # Service status.
    # @param service_name [String] The service name.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_capabilities Whether or not to include the capabilities of this service in the response. Capabilities for service include if it can be enabled/disabled or not. 
    # @return [Array<(ServiceEnablementStatus, Integer, Hash)>] ServiceEnablementStatus data, response status code and response headers
    def services_service_name_status_get_with_http_info(service_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_service_name_status_get ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling ServicesApi.services_service_name_status_get"
      end
      if @api_client.config.client_side_validation && service_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "service_name" when calling ServicesApi.services_service_name_status_get, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/services/{service_name}/status'.sub('{' + 'service_name' + '}', CGI.escape(service_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_capabilities'] = opts[:'include_capabilities'] if !opts[:'include_capabilities'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceEnablementStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_service_name_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_service_name_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manage xfit service.
    # Manage xfit service, including enabling the service.
    # @param body [XfitServiceInput] 
    # @param [Hash] opts the optional parameters
    # @return [ServiceConfigStatus]
    def services_xfit_post(body, opts = {})
      data, _status_code, _headers = services_xfit_post_with_http_info(body, opts)
      data
    end

    # Manage xfit service.
    # Manage xfit service, including enabling the service.
    # @param body [XfitServiceInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceConfigStatus, Integer, Hash)>] ServiceConfigStatus data, response status code and response headers
    def services_xfit_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServicesApi.services_xfit_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServicesApi.services_xfit_post"
      end
      # resource path
      local_var_path = '/services/xfit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceConfigStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ServicesApi.services_xfit_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServicesApi#services_xfit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
