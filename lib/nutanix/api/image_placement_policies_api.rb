=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class ImagePlacementPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of existing image_placement_policies
    # This operation gets a list of image_placement_policies, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [ImagePlacementPolicyListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [ImagePlacementPolicyListIntentResponse]
    def images_placement_policies_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = images_placement_policies_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing image_placement_policies
    # This operation gets a list of image_placement_policies, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [ImagePlacementPolicyListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagePlacementPolicyListIntentResponse, Integer, Hash)>] ImagePlacementPolicyListIntentResponse data, response status code and response headers
    def images_placement_policies_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.images_placement_policies_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling ImagePlacementPoliciesApi.images_placement_policies_list_post"
      end
      # resource path
      local_var_path = '/images/placement_policies/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ImagePlacementPolicyListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.images_placement_policies_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#images_placement_policies_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new image_placement_policy
    # Create a placement policy object by specifiying Image and Cluster categories and placement type. Based on this input the Images matching the category will be placed on the cluster which match the cluster category. 
    # @param [Hash] opts the optional parameters
    # @option opts [ImagePlacementPolicyIntentInput] :body 
    # @return [ImagePlacementPolicyIntentResponse]
    def images_placement_policies_post(opts = {})
      data, _status_code, _headers = images_placement_policies_post_with_http_info(opts)
      data
    end

    # Create a new image_placement_policy
    # Create a placement policy object by specifiying Image and Cluster categories and placement type. Based on this input the Images matching the category will be placed on the cluster which match the cluster category. 
    # @param [Hash] opts the optional parameters
    # @option opts [ImagePlacementPolicyIntentInput] :body 
    # @return [Array<(ImagePlacementPolicyIntentResponse, Integer, Hash)>] ImagePlacementPolicyIntentResponse data, response status code and response headers
    def images_placement_policies_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.images_placement_policies_post ...'
      end
      # resource path
      local_var_path = '/images/placement_policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ImagePlacementPolicyIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.images_placement_policies_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#images_placement_policies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing image_placement_policy
    # This operation submits a request to delete a existing image_placement_policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ImagePlacementPolicyIntentResponse]
    def images_placement_policies_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = images_placement_policies_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a existing image_placement_policy
    # This operation submits a request to delete a existing image_placement_policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagePlacementPolicyIntentResponse, Integer, Hash)>] ImagePlacementPolicyIntentResponse data, response status code and response headers
    def images_placement_policies_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.images_placement_policies_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/images/placement_policies/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagePlacementPolicyIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.images_placement_policies_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#images_placement_policies_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing image_placement_policy
    # This operation gets a existing image_placement_policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ImagePlacementPolicyIntentResponse]
    def images_placement_policies_uuid_get(uuid, opts = {})
      data, _status_code, _headers = images_placement_policies_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing image_placement_policy
    # This operation gets a existing image_placement_policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagePlacementPolicyIntentResponse, Integer, Hash)>] ImagePlacementPolicyIntentResponse data, response status code and response headers
    def images_placement_policies_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.images_placement_policies_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/images/placement_policies/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ImagePlacementPolicyIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.images_placement_policies_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#images_placement_policies_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing image_placement_policy
    # This operation submits a request to update a existing image_placement_policy based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [ImagePlacementPolicyIntentInput] Image placement policy to be updated
    # @param [Hash] opts the optional parameters
    # @return [ImagePlacementPolicyIntentResponse]
    def images_placement_policies_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = images_placement_policies_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a existing image_placement_policy
    # This operation submits a request to update a existing image_placement_policy based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [ImagePlacementPolicyIntentInput] Image placement policy to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImagePlacementPolicyIntentResponse, Integer, Hash)>] ImagePlacementPolicyIntentResponse data, response status code and response headers
    def images_placement_policies_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.images_placement_policies_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ImagePlacementPoliciesApi.images_placement_policies_uuid_put"
      end
      # resource path
      local_var_path = '/images/placement_policies/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ImagePlacementPolicyIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.images_placement_policies_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#images_placement_policies_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
