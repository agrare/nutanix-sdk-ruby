=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class VmHostAffinityPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of existing VM Host Affinity Policies
    # This operation gets a list of VM Host Affinity Policies, allowing for pagination. 
    # @param get_entities_request [VmHostAffinityPolicyListMetadata] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_vms_hosts_count Query param to include VMs and Hosts count associated with the Policy. When this param is set to True, returns counts of total VMs, compliant VMs, non compliant VMs and total Hosts associated with every policy.  (default to false)
    # @return [VmHostAffinityPolicyListResponse]
    def vm_host_affinity_policies_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing VM Host Affinity Policies
    # This operation gets a list of VM Host Affinity Policies, allowing for pagination. 
    # @param get_entities_request [VmHostAffinityPolicyListMetadata] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_vms_hosts_count Query param to include VMs and Hosts count associated with the Policy. When this param is set to True, returns counts of total VMs, compliant VMs, non compliant VMs and total Hosts associated with every policy.  (default to false)
    # @return [Array<(VmHostAffinityPolicyListResponse, Integer, Hash)>] VmHostAffinityPolicyListResponse data, response status code and response headers
    def vm_host_affinity_policies_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_list_post"
      end
      # resource path
      local_var_path = '/vm_host_affinity_policies/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_vms_hosts_count'] = opts[:'include_vms_hosts_count'] if !opts[:'include_vms_hosts_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VmHostAffinityPolicyListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new VM Host Affinity Policy
    # This operation submits a request to create a new VM Host Affinity Policy based on the input parameters. 
    # @param body [VmHostAffinityPolicyCreateInput] 
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vm_host_affinity_policies_post(body, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_post_with_http_info(body, opts)
      data
    end

    # Create a new VM Host Affinity Policy
    # This operation submits a request to create a new VM Host Affinity Policy based on the input parameters. 
    # @param body [VmHostAffinityPolicyCreateInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vm_host_affinity_policies_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_post"
      end
      # resource path
      local_var_path = '/vm_host_affinity_policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing VM Host Affinity Policy
    # This operation submits a request to delete a existing VM Host Affinity Policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vm_host_affinity_policies_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a existing VM Host Affinity Policy
    # This operation submits a request to delete a existing VM Host Affinity Policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vm_host_affinity_policies_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vm_host_affinity_policies/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing VM Host Affinity Policy
    # This operation gets a existing VM Host Affinity Policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_vms_hosts_count Query param to include VMs and Hosts count associated with the Policy. When this param is set to True, returns counts of total VMs, compliant VMs, non compliant VMs and total Hosts.  (default to false)
    # @return [VmHostAffinityPolicyGetResponse]
    def vm_host_affinity_policies_uuid_get(uuid, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing VM Host Affinity Policy
    # This operation gets a existing VM Host Affinity Policy.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_vms_hosts_count Query param to include VMs and Hosts count associated with the Policy. When this param is set to True, returns counts of total VMs, compliant VMs, non compliant VMs and total Hosts.  (default to false)
    # @return [Array<(VmHostAffinityPolicyGetResponse, Integer, Hash)>] VmHostAffinityPolicyGetResponse data, response status code and response headers
    def vm_host_affinity_policies_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vm_host_affinity_policies/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_vms_hosts_count'] = opts[:'include_vms_hosts_count'] if !opts[:'include_vms_hosts_count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VmHostAffinityPolicyGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing VM Host Affinity Policy
    # This operation submits a request to update a existing VM Host Affinity Policy based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmHostAffinityPolicyUpdateInput] :body 
    # @return [ProceduralResponse]
    def vm_host_affinity_policies_uuid_put(uuid, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_uuid_put_with_http_info(uuid, opts)
      data
    end

    # Update a existing VM Host Affinity Policy
    # This operation submits a request to update a existing VM Host Affinity Policy based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmHostAffinityPolicyUpdateInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vm_host_affinity_policies_uuid_put_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_put, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vm_host_affinity_policies/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-enforce VM Host Affinity Policy for all the applicable VMs
    # Reapply the policy for all the affected VMs.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vm_host_affinity_policies_uuid_re_enforce_post(uuid, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_uuid_re_enforce_post_with_http_info(uuid, opts)
      data
    end

    # Re-enforce VM Host Affinity Policy for all the applicable VMs
    # Reapply the policy for all the affected VMs.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vm_host_affinity_policies_uuid_re_enforce_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_re_enforce_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_re_enforce_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_re_enforce_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vm_host_affinity_policies/{uuid}/re_enforce'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_re_enforce_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_uuid_re_enforce_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Information about the VMs which are part of VM Host Affinity Policy
    # List of all the VMs which are part of input VM Host Affinity Policy and their compliance information. 
    # @param uuid [String] The UUID of the entity.
    # @param get_entities_request [VmHostAffinityPolicyVmsListMetadata] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Query filter to retrieve VMs based on compliance status. Valid status include - PENDING, COMPLIANT, NONCOMPLIANT. 
    # @return [VmHostAffinityPolicyVmsListResponse]
    def vm_host_affinity_policies_uuid_vms_list_post(uuid, get_entities_request, opts = {})
      data, _status_code, _headers = vm_host_affinity_policies_uuid_vms_list_post_with_http_info(uuid, get_entities_request, opts)
      data
    end

    # Information about the VMs which are part of VM Host Affinity Policy
    # List of all the VMs which are part of input VM Host Affinity Policy and their compliance information. 
    # @param uuid [String] The UUID of the entity.
    # @param get_entities_request [VmHostAffinityPolicyVmsListMetadata] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Query filter to retrieve VMs based on compliance status. Valid status include - PENDING, COMPLIANT, NONCOMPLIANT. 
    # @return [Array<(VmHostAffinityPolicyVmsListResponse, Integer, Hash)>] VmHostAffinityPolicyVmsListResponse data, response status code and response headers
    def vm_host_affinity_policies_uuid_vms_list_post_with_http_info(uuid, get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_vms_list_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_vms_list_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_vms_list_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_vms_list_post"
      end
      # resource path
      local_var_path = '/vm_host_affinity_policies/{uuid}/vms_list'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VmHostAffinityPolicyVmsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmHostAffinityPoliciesApi.vm_host_affinity_policies_uuid_vms_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmHostAffinityPoliciesApi#vm_host_affinity_policies_uuid_vms_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
