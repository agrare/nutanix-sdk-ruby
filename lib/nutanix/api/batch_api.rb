=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class BatchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Submit a list of one or more intentful REST APIs to be processed
    # Batching allows for instructions for several operations to be sent using a single HTTP request. Depending on the batch parameters, the Nutanix v3 gateway processes each independent operation sequentially or in parallel. Once all operations in the batch have been completed, a consolidated response is returned and the HTTP connection is closed. The batch API takes an array of logical HTTP requests represented as JSON arrays. Maximum size of the array should not exceed 60. Each request comprises the following: - A method (corresponding to HTTP methods such as GET, PUT, and POST) - A relative URL (relative_url) - (Optional) A body (for POST and PUT requests). The batch API returns an array of logical HTTP responses represented as JSON arrays containing the following: - A status code - (Optional) A body represented as a JSON-encoded string 
    # @param intent_list [BatchRequest] List of intent APIs
    # @param [Hash] opts the optional parameters
    # @return [BatchResponse]
    def batch_post(intent_list, opts = {})
      data, _status_code, _headers = batch_post_with_http_info(intent_list, opts)
      data
    end

    # Submit a list of one or more intentful REST APIs to be processed
    # Batching allows for instructions for several operations to be sent using a single HTTP request. Depending on the batch parameters, the Nutanix v3 gateway processes each independent operation sequentially or in parallel. Once all operations in the batch have been completed, a consolidated response is returned and the HTTP connection is closed. The batch API takes an array of logical HTTP requests represented as JSON arrays. Maximum size of the array should not exceed 60. Each request comprises the following: - A method (corresponding to HTTP methods such as GET, PUT, and POST) - A relative URL (relative_url) - (Optional) A body (for POST and PUT requests). The batch API returns an array of logical HTTP responses represented as JSON arrays containing the following: - A status code - (Optional) A body represented as a JSON-encoded string 
    # @param intent_list [BatchRequest] List of intent APIs
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchResponse, Integer, Hash)>] BatchResponse data, response status code and response headers
    def batch_post_with_http_info(intent_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchApi.batch_post ...'
      end
      # verify the required parameter 'intent_list' is set
      if @api_client.config.client_side_validation && intent_list.nil?
        fail ArgumentError, "Missing the required parameter 'intent_list' when calling BatchApi.batch_post"
      end
      # resource path
      local_var_path = '/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(intent_list)

      # return_type
      return_type = opts[:debug_return_type] || 'BatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BatchApi.batch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchApi#batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
