=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class CloudApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets the Nutanix hosted cloud config.
    # Gets the Nutanix hosted cloud config.
    # @param cloud_type [String] The Cloud Type.
    # @param [Hash] opts the optional parameters
    # @return [CloudConfigResponse]
    def cloud_configs_cloud_type_get(cloud_type, opts = {})
      data, _status_code, _headers = cloud_configs_cloud_type_get_with_http_info(cloud_type, opts)
      data
    end

    # Gets the Nutanix hosted cloud config.
    # Gets the Nutanix hosted cloud config.
    # @param cloud_type [String] The Cloud Type.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudConfigResponse, Integer, Hash)>] CloudConfigResponse data, response status code and response headers
    def cloud_configs_cloud_type_get_with_http_info(cloud_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudApi.cloud_configs_cloud_type_get ...'
      end
      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling CloudApi.cloud_configs_cloud_type_get"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling CloudApi.cloud_configs_cloud_type_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud_configs/{cloud_type}'.sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CloudApi.cloud_configs_cloud_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudApi#cloud_configs_cloud_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List trusted clouds.
    # Gets list of trusted clouds.
    # @param body [CloudTrustListMetadata] A cloud trust object
    # @param [Hash] opts the optional parameters
    # @return [CloudTrustListIntentResponse]
    def cloud_trusts_list_post(body, opts = {})
      data, _status_code, _headers = cloud_trusts_list_post_with_http_info(body, opts)
      data
    end

    # List trusted clouds.
    # Gets list of trusted clouds.
    # @param body [CloudTrustListMetadata] A cloud trust object
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudTrustListIntentResponse, Integer, Hash)>] CloudTrustListIntentResponse data, response status code and response headers
    def cloud_trusts_list_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudApi.cloud_trusts_list_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudApi.cloud_trusts_list_post"
      end
      # resource path
      local_var_path = '/cloud_trusts/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudTrustListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CloudApi.cloud_trusts_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudApi#cloud_trusts_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pairs this cloud with the given cloud (Nutanix hosted cloud/ Onprem Cloud).
    # Performs cloud pairing by establishing a trust with the provided cloud.
    # @param body [CloudTrustIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [CloudTrustIntentResponse]
    def cloud_trusts_post(body, opts = {})
      data, _status_code, _headers = cloud_trusts_post_with_http_info(body, opts)
      data
    end

    # Pairs this cloud with the given cloud (Nutanix hosted cloud/ Onprem Cloud).
    # Performs cloud pairing by establishing a trust with the provided cloud.
    # @param body [CloudTrustIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudTrustIntentResponse, Integer, Hash)>] CloudTrustIntentResponse data, response status code and response headers
    def cloud_trusts_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudApi.cloud_trusts_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudApi.cloud_trusts_post"
      end
      # resource path
      local_var_path = '/cloud_trusts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudTrustIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CloudApi.cloud_trusts_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudApi#cloud_trusts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified cloud pairing.
    # Deletes the specified cloud pairing by un-establishing trust with the cloud.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [CloudTrustIntentResponse]
    def cloud_trusts_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = cloud_trusts_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Deletes the specified cloud pairing.
    # Deletes the specified cloud pairing by un-establishing trust with the cloud.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudTrustIntentResponse, Integer, Hash)>] CloudTrustIntentResponse data, response status code and response headers
    def cloud_trusts_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudApi.cloud_trusts_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling CloudApi.cloud_trusts_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling CloudApi.cloud_trusts_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud_trusts/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudTrustIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CloudApi.cloud_trusts_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudApi#cloud_trusts_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of the specified trusted cloud.
    # Gets the details of the specified trusted cloud.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [CloudTrustIntentResponse]
    def cloud_trusts_uuid_get(uuid, opts = {})
      data, _status_code, _headers = cloud_trusts_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get the details of the specified trusted cloud.
    # Gets the details of the specified trusted cloud.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudTrustIntentResponse, Integer, Hash)>] CloudTrustIntentResponse data, response status code and response headers
    def cloud_trusts_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudApi.cloud_trusts_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling CloudApi.cloud_trusts_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling CloudApi.cloud_trusts_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/cloud_trusts/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudTrustIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CloudApi.cloud_trusts_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudApi#cloud_trusts_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
