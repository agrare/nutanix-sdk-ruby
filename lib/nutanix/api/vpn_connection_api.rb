=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class VpnConnectionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of existing vpn_connections
    # This operation gets a list of vpn_connections, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [VpnConnectionListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [VpnConnectionListIntentResponse]
    def vpn_connections_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = vpn_connections_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing vpn_connections
    # This operation gets a list of vpn_connections, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [VpnConnectionListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpnConnectionListIntentResponse, Integer, Hash)>] VpnConnectionListIntentResponse data, response status code and response headers
    def vpn_connections_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling VpnConnectionApi.vpn_connections_list_post"
      end
      # resource path
      local_var_path = '/vpn_connections/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VpnConnectionListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new vpn_connection
    # This operation submits a request to create a new vpn_connection based on the input parameters. A vpn_connection respresents the configuration               needed to establish an IPSEC vpn tunnel between the local               and remote vpn gateways. The vpn_gateway objects must be               created first. 
    # @param body [VpnConnectionIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [VpnConnectionIntentResponse]
    def vpn_connections_post(body, opts = {})
      data, _status_code, _headers = vpn_connections_post_with_http_info(body, opts)
      data
    end

    # Create a new vpn_connection
    # This operation submits a request to create a new vpn_connection based on the input parameters. A vpn_connection respresents the configuration               needed to establish an IPSEC vpn tunnel between the local               and remote vpn gateways. The vpn_gateway objects must be               created first. 
    # @param body [VpnConnectionIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpnConnectionIntentResponse, Integer, Hash)>] VpnConnectionIntentResponse data, response status code and response headers
    def vpn_connections_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VpnConnectionApi.vpn_connections_post"
      end
      # resource path
      local_var_path = '/vpn_connections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VpnConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing vpn_connection
    # This operation submits a request to delete a existing vpn_connection.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [VpnConnectionIntentResponse]
    def vpn_connections_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = vpn_connections_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a existing vpn_connection
    # This operation submits a request to delete a existing vpn_connection.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpnConnectionIntentResponse, Integer, Hash)>] VpnConnectionIntentResponse data, response status code and response headers
    def vpn_connections_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vpn_connections/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VpnConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing vpn_connection
    # This operation gets a existing vpn_connection.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [VpnConnectionIntentResponse]
    def vpn_connections_uuid_get(uuid, opts = {})
      data, _status_code, _headers = vpn_connections_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing vpn_connection
    # This operation gets a existing vpn_connection.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpnConnectionIntentResponse, Integer, Hash)>] VpnConnectionIntentResponse data, response status code and response headers
    def vpn_connections_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vpn_connections/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VpnConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing vpn_connection
    # This operation submits a request to update a existing vpn_connection based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VpnConnectionIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [VpnConnectionIntentResponse]
    def vpn_connections_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = vpn_connections_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a existing vpn_connection
    # This operation submits a request to update a existing vpn_connection based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VpnConnectionIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VpnConnectionIntentResponse, Integer, Hash)>] VpnConnectionIntentResponse data, response status code and response headers
    def vpn_connections_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VpnConnectionApi.vpn_connections_uuid_put"
      end
      # resource path
      local_var_path = '/vpn_connections/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VpnConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Vendor devices for which configuration steps can be downloaded.
    # Get list of vendor devices for which configuration steps can be downloaded. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [VendorConfigListResponse]
    def vpn_connections_uuid_vendor_config_get(uuid, opts = {})
      data, _status_code, _headers = vpn_connections_uuid_vendor_config_get_with_http_info(uuid, opts)
      data
    end

    # Vendor devices for which configuration steps can be downloaded.
    # Get list of vendor devices for which configuration steps can be downloaded. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VendorConfigListResponse, Integer, Hash)>] VendorConfigListResponse data, response status code and response headers
    def vpn_connections_uuid_vendor_config_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_uuid_vendor_config_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vpn_connections/{uuid}/vendor_config'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VendorConfigListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_uuid_vendor_config_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_uuid_vendor_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download vendor device configuration steps.
    # Download the configuration steps for the given vendor device's latest version. 
    # @param uuid [String] The UUID of the entity.
    # @param name [String] Vendor device name.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vpn_connections_uuid_vendor_config_name_get(uuid, name, opts = {})
      vpn_connections_uuid_vendor_config_name_get_with_http_info(uuid, name, opts)
      nil
    end

    # Download vendor device configuration steps.
    # Download the configuration steps for the given vendor device&#39;s latest version. 
    # @param uuid [String] The UUID of the entity.
    # @param name [String] Vendor device name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vpn_connections_uuid_vendor_config_name_get_with_http_info(uuid, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_uuid_vendor_config_name_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_get"
      end
      # resource path
      local_var_path = '/vpn_connections/{uuid}/vendor_config/{name}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_uuid_vendor_config_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_uuid_vendor_config_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download vendor device configuration steps.
    # Download the configuration steps for the given vendor device and version. 
    # @param uuid [String] The UUID of the entity.
    # @param name [String] Vendor device name.
    # @param version [String] Vendor device version.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vpn_connections_uuid_vendor_config_name_version_get(uuid, name, version, opts = {})
      vpn_connections_uuid_vendor_config_name_version_get_with_http_info(uuid, name, version, opts)
      nil
    end

    # Download vendor device configuration steps.
    # Download the configuration steps for the given vendor device and version. 
    # @param uuid [String] The UUID of the entity.
    # @param name [String] Vendor device name.
    # @param version [String] Vendor device version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vpn_connections_uuid_vendor_config_name_version_get_with_http_info(uuid, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VpnConnectionApi.vpn_connections_uuid_vendor_config_name_version_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_version_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_version_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_version_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling VpnConnectionApi.vpn_connections_uuid_vendor_config_name_version_get"
      end
      # resource path
      local_var_path = '/vpn_connections/{uuid}/vendor_config/{name}/{version}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VpnConnectionApi.vpn_connections_uuid_vendor_config_name_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VpnConnectionApi#vpn_connections_uuid_vendor_config_name_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
