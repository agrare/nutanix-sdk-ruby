=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class WhatifApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Recommend nodes for scenario.
    # Run scenario recommendation in background and return task uuid.
    # @param [Hash] opts the optional parameters
    # @option opts [RecommendationParams] :recommendation_params recommendation request include scenario uuid.
    # @return [ProceduralResponse]
    def capacity_planning_recommendations_post(opts = {})
      data, _status_code, _headers = capacity_planning_recommendations_post_with_http_info(opts)
      data
    end

    # Recommend nodes for scenario.
    # Run scenario recommendation in background and return task uuid.
    # @param [Hash] opts the optional parameters
    # @option opts [RecommendationParams] :recommendation_params recommendation request include scenario uuid.
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def capacity_planning_recommendations_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_recommendations_post ...'
      end
      # resource path
      local_var_path = '/capacity_planning/recommendations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'recommendation_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_recommendations_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_recommendations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get scenario runway and recommendation
    # Get scenario runway and recommendation.
    # @param task_uuid [String] Task uuid in path.
    # @param [Hash] opts the optional parameters
    # @return [WhatifScenario]
    def capacity_planning_recommendations_task_uuid_get(task_uuid, opts = {})
      data, _status_code, _headers = capacity_planning_recommendations_task_uuid_get_with_http_info(task_uuid, opts)
      data
    end

    # Get scenario runway and recommendation
    # Get scenario runway and recommendation.
    # @param task_uuid [String] Task uuid in path.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatifScenario, Integer, Hash)>] WhatifScenario data, response status code and response headers
    def capacity_planning_recommendations_task_uuid_get_with_http_info(task_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_recommendations_task_uuid_get ...'
      end
      # verify the required parameter 'task_uuid' is set
      if @api_client.config.client_side_validation && task_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'task_uuid' when calling WhatifApi.capacity_planning_recommendations_task_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && task_uuid !~ pattern
        fail ArgumentError, "invalid value for 'task_uuid' when calling WhatifApi.capacity_planning_recommendations_task_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/capacity_planning/recommendations/{task_uuid}'.sub('{' + 'task_uuid' + '}', CGI.escape(task_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatifScenario'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_recommendations_task_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_recommendations_task_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate scenario summary pdf report
    # Generate scenario summary pdf report and return task uuid.
    # @param [Hash] opts the optional parameters
    # @option opts [ReportParams] :report_params report request include scenario uuid and locale.
    # @return [ProceduralResponse]
    def capacity_planning_reports_post(opts = {})
      data, _status_code, _headers = capacity_planning_reports_post_with_http_info(opts)
      data
    end

    # Generate scenario summary pdf report
    # Generate scenario summary pdf report and return task uuid.
    # @param [Hash] opts the optional parameters
    # @option opts [ReportParams] :report_params report request include scenario uuid and locale.
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def capacity_planning_reports_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_reports_post ...'
      end
      # resource path
      local_var_path = '/capacity_planning/reports'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'report_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_reports_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_reports_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get scenario summary pdf report
    # Get scenario summary pdf report.
    # @param task_uuid [String] Task uuid in path.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def capacity_planning_reports_task_uuid_get(task_uuid, opts = {})
      data, _status_code, _headers = capacity_planning_reports_task_uuid_get_with_http_info(task_uuid, opts)
      data
    end

    # Get scenario summary pdf report
    # Get scenario summary pdf report.
    # @param task_uuid [String] Task uuid in path.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def capacity_planning_reports_task_uuid_get_with_http_info(task_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_reports_task_uuid_get ...'
      end
      # verify the required parameter 'task_uuid' is set
      if @api_client.config.client_side_validation && task_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'task_uuid' when calling WhatifApi.capacity_planning_reports_task_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && task_uuid !~ pattern
        fail ArgumentError, "invalid value for 'task_uuid' when calling WhatifApi.capacity_planning_reports_task_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/capacity_planning/reports/{task_uuid}'.sub('{' + 'task_uuid' + '}', CGI.escape(task_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_reports_task_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_reports_task_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get scenarios name and uuid with pagination
    # Query all scenarios name and uuid with pagination.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 50)
    # @return [WhatifScenarios]
    def capacity_planning_scenarios_get(opts = {})
      data, _status_code, _headers = capacity_planning_scenarios_get_with_http_info(opts)
      data
    end

    # Get scenarios name and uuid with pagination
    # Query all scenarios name and uuid with pagination.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset  (default to 0)
    # @option opts [Integer] :limit  (default to 50)
    # @return [Array<(WhatifScenarios, Integer, Hash)>] WhatifScenarios data, response status code and response headers
    def capacity_planning_scenarios_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_scenarios_get ...'
      end
      # resource path
      local_var_path = '/capacity_planning/scenarios'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatifScenarios'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_scenarios_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_scenarios_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a scenario
    # Create a new scenario in DB.
    # @param scenario [WhatifScenario] scenario body.
    # @param [Hash] opts the optional parameters
    # @return [CapacityPlanningScenariosPost201Response]
    def capacity_planning_scenarios_post(scenario, opts = {})
      data, _status_code, _headers = capacity_planning_scenarios_post_with_http_info(scenario, opts)
      data
    end

    # Create a scenario
    # Create a new scenario in DB.
    # @param scenario [WhatifScenario] scenario body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapacityPlanningScenariosPost201Response, Integer, Hash)>] CapacityPlanningScenariosPost201Response data, response status code and response headers
    def capacity_planning_scenarios_post_with_http_info(scenario, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_scenarios_post ...'
      end
      # verify the required parameter 'scenario' is set
      if @api_client.config.client_side_validation && scenario.nil?
        fail ArgumentError, "Missing the required parameter 'scenario' when calling WhatifApi.capacity_planning_scenarios_post"
      end
      # resource path
      local_var_path = '/capacity_planning/scenarios'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(scenario)

      # return_type
      return_type = opts[:debug_return_type] || 'CapacityPlanningScenariosPost201Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_scenarios_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_scenarios_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete scenario
    # Delete scenario.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def capacity_planning_scenarios_uuid_delete(uuid, opts = {})
      capacity_planning_scenarios_uuid_delete_with_http_info(uuid, opts)
      nil
    end

    # Delete scenario
    # Delete scenario.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def capacity_planning_scenarios_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_scenarios_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling WhatifApi.capacity_planning_scenarios_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling WhatifApi.capacity_planning_scenarios_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/capacity_planning/scenarios/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_scenarios_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_scenarios_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get scenario with uuid
    # Get scenario with given uuid.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [WhatifScenario]
    def capacity_planning_scenarios_uuid_get(uuid, opts = {})
      data, _status_code, _headers = capacity_planning_scenarios_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get scenario with uuid
    # Get scenario with given uuid.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatifScenario, Integer, Hash)>] WhatifScenario data, response status code and response headers
    def capacity_planning_scenarios_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_scenarios_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling WhatifApi.capacity_planning_scenarios_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling WhatifApi.capacity_planning_scenarios_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/capacity_planning/scenarios/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatifScenario'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_scenarios_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_scenarios_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update scenario
    # Update scenario.
    # @param uuid [String] The UUID of the entity.
    # @param scenario [WhatifScenario] scenario body.
    # @param [Hash] opts the optional parameters
    # @return [WhatifScenario]
    def capacity_planning_scenarios_uuid_put(uuid, scenario, opts = {})
      data, _status_code, _headers = capacity_planning_scenarios_uuid_put_with_http_info(uuid, scenario, opts)
      data
    end

    # Update scenario
    # Update scenario.
    # @param uuid [String] The UUID of the entity.
    # @param scenario [WhatifScenario] scenario body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatifScenario, Integer, Hash)>] WhatifScenario data, response status code and response headers
    def capacity_planning_scenarios_uuid_put_with_http_info(uuid, scenario, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatifApi.capacity_planning_scenarios_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling WhatifApi.capacity_planning_scenarios_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling WhatifApi.capacity_planning_scenarios_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'scenario' is set
      if @api_client.config.client_side_validation && scenario.nil?
        fail ArgumentError, "Missing the required parameter 'scenario' when calling WhatifApi.capacity_planning_scenarios_uuid_put"
      end
      # resource path
      local_var_path = '/capacity_planning/scenarios/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(scenario)

      # return_type
      return_type = opts[:debug_return_type] || 'WhatifScenario'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatifApi.capacity_planning_scenarios_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatifApi#capacity_planning_scenarios_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
