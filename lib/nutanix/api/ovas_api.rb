=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class OvasApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Capability information for OVAs.
    # Get capability information for OVAs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the capability
    # @return [CapabilityResponse]
    def ovas_capabilities_get(opts = {})
      data, _status_code, _headers = ovas_capabilities_get_with_http_info(opts)
      data
    end

    # Capability information for OVAs.
    # Get capability information for OVAs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the capability
    # @return [Array<(CapabilityResponse, Integer, Hash)>] CapabilityResponse data, response status code and response headers
    def ovas_capabilities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_capabilities_get ...'
      end
      # resource path
      local_var_path = '/ovas/capabilities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CapabilityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_capabilities_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_capabilities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns metadata for /ovas/capabilities endpoint.
    # List of dictionaries containing supported capability names and their descriptions for OVAs. 
    # @param [Hash] opts the optional parameters
    # @return [Array<CapabilityInformation>]
    def ovas_capabilities_options(opts = {})
      data, _status_code, _headers = ovas_capabilities_options_with_http_info(opts)
      data
    end

    # Returns metadata for /ovas/capabilities endpoint.
    # List of dictionaries containing supported capability names and their descriptions for OVAs. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CapabilityInformation>, Integer, Hash)>] Array<CapabilityInformation> data, response status code and response headers
    def ovas_capabilities_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_capabilities_options ...'
      end
      # resource path
      local_var_path = '/ovas/capabilities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CapabilityInformation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_capabilities_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_capabilities_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of existing OVAs
    # This operation gets a list of OVAs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [OvaListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [OvaListResponse]
    def ovas_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = ovas_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing OVAs
    # This operation gets a list of OVAs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [OvaListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OvaListResponse, Integer, Hash)>] OvaListResponse data, response status code and response headers
    def ovas_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling OvasApi.ovas_list_post"
      end
      # resource path
      local_var_path = '/ovas/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OvaListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new ova
    # Creates an ova entity. OVAs can be uploaded using this by user which can be later used to create a VM. 
    # @param [Hash] opts the optional parameters
    # @option opts [OvaCreateInput] :body 
    # @return [ProceduralResponse]
    def ovas_post(opts = {})
      data, _status_code, _headers = ovas_post_with_http_info(opts)
      data
    end

    # Create a new ova
    # Creates an ova entity. OVAs can be uploaded using this by user which can be later used to create a VM. 
    # @param [Hash] opts the optional parameters
    # @option opts [OvaCreateInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def ovas_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_post ...'
      end
      # resource path
      local_var_path = '/ovas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Concatenate uploaded file chunks of an OVA
    # This operation will concatenate file chunks in order of their upload offset to create the resulting OVA file. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def ovas_uuid_chunks_concatenate_post(uuid, opts = {})
      data, _status_code, _headers = ovas_uuid_chunks_concatenate_post_with_http_info(uuid, opts)
      data
    end

    # Concatenate uploaded file chunks of an OVA
    # This operation will concatenate file chunks in order of their upload offset to create the resulting OVA file. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def ovas_uuid_chunks_concatenate_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_chunks_concatenate_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_chunks_concatenate_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_chunks_concatenate_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}/chunks/concatenate'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_chunks_concatenate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_chunks_concatenate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploaded OVA file info
    # Information of the uploaded OVA file.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ovas_uuid_chunks_head(uuid, opts = {})
      ovas_uuid_chunks_head_with_http_info(uuid, opts)
      nil
    end

    # Uploaded OVA file info
    # Information of the uploaded OVA file.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ovas_uuid_chunks_head_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_chunks_head ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_chunks_head"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_chunks_head, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}/chunks'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_chunks_head",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_chunks_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload file chunk of an OVA
    # Upload a file chunk of an OVA based on the UUID specified. Note that the OVA must be created first before an upload can be done. 
    # @param uuid [String] The UUID of the entity.
    # @param x_nutanix_upload_offset [Integer] Offset of file chunk in original OVA file.
    # @param x_nutanix_content_length [Integer] Length of file chunk to upload.
    # @param ova [Object] File chunk in binary format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_nutanix_checksum_type Checksum type (e.g SHA_1, SHA_256).
    # @option opts [String] :x_nutanix_checksum_bytes Checksum bytes of file chunk.
    # @return [nil]
    def ovas_uuid_chunks_put(uuid, x_nutanix_upload_offset, x_nutanix_content_length, ova, opts = {})
      ovas_uuid_chunks_put_with_http_info(uuid, x_nutanix_upload_offset, x_nutanix_content_length, ova, opts)
      nil
    end

    # Upload file chunk of an OVA
    # Upload a file chunk of an OVA based on the UUID specified. Note that the OVA must be created first before an upload can be done. 
    # @param uuid [String] The UUID of the entity.
    # @param x_nutanix_upload_offset [Integer] Offset of file chunk in original OVA file.
    # @param x_nutanix_content_length [Integer] Length of file chunk to upload.
    # @param ova [Object] File chunk in binary format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_nutanix_checksum_type Checksum type (e.g SHA_1, SHA_256).
    # @option opts [String] :x_nutanix_checksum_bytes Checksum bytes of file chunk.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ovas_uuid_chunks_put_with_http_info(uuid, x_nutanix_upload_offset, x_nutanix_content_length, ova, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_chunks_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_chunks_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_chunks_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'x_nutanix_upload_offset' is set
      if @api_client.config.client_side_validation && x_nutanix_upload_offset.nil?
        fail ArgumentError, "Missing the required parameter 'x_nutanix_upload_offset' when calling OvasApi.ovas_uuid_chunks_put"
      end
      # verify the required parameter 'x_nutanix_content_length' is set
      if @api_client.config.client_side_validation && x_nutanix_content_length.nil?
        fail ArgumentError, "Missing the required parameter 'x_nutanix_content_length' when calling OvasApi.ovas_uuid_chunks_put"
      end
      # verify the required parameter 'ova' is set
      if @api_client.config.client_side_validation && ova.nil?
        fail ArgumentError, "Missing the required parameter 'ova' when calling OvasApi.ovas_uuid_chunks_put"
      end
      # resource path
      local_var_path = '/ovas/{uuid}/chunks'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Nutanix-Upload-Offset'] = x_nutanix_upload_offset
      header_params[:'X-Nutanix-Content-Length'] = x_nutanix_content_length
      header_params[:'X-Nutanix-Checksum-Type'] = opts[:'x_nutanix_checksum_type'] if !opts[:'x_nutanix_checksum_type'].nil?
      header_params[:'X-Nutanix-Checksum-Bytes'] = opts[:'x_nutanix_checksum_bytes'] if !opts[:'x_nutanix_checksum_bytes'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ova)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_chunks_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_chunks_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing OVA
    # This operation submits a request to delete a existing OVA.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def ovas_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = ovas_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a existing OVA
    # This operation submits a request to delete a existing OVA.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def ovas_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an existing disk of an OVA
    # This operation gets disk of an existing OVA
    # @param uuid [String] 
    # @param disk_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OvaDiskInfo]
    def ovas_uuid_disks_disk_id_get(uuid, disk_id, opts = {})
      data, _status_code, _headers = ovas_uuid_disks_disk_id_get_with_http_info(uuid, disk_id, opts)
      data
    end

    # Get an existing disk of an OVA
    # This operation gets disk of an existing OVA
    # @param uuid [String] 
    # @param disk_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OvaDiskInfo, Integer, Hash)>] OvaDiskInfo data, response status code and response headers
    def ovas_uuid_disks_disk_id_get_with_http_info(uuid, disk_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_disks_disk_id_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_disks_disk_id_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_disks_disk_id_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'disk_id' is set
      if @api_client.config.client_side_validation && disk_id.nil?
        fail ArgumentError, "Missing the required parameter 'disk_id' when calling OvasApi.ovas_uuid_disks_disk_id_get"
      end
      pattern = Regexp.new(/^[a-z]{3,5}\d+\.\d+$/)
      if @api_client.config.client_side_validation && disk_id !~ pattern
        fail ArgumentError, "invalid value for 'disk_id' when calling OvasApi.ovas_uuid_disks_disk_id_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}/disks/{disk_id}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'disk_id' + '}', CGI.escape(disk_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OvaDiskInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_disks_disk_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_disks_disk_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of existing disks of an OVA
    # This operation gets a list of disks of an exisiting OVA 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [OvaDiskListResponse]
    def ovas_uuid_disks_get(uuid, opts = {})
      data, _status_code, _headers = ovas_uuid_disks_get_with_http_info(uuid, opts)
      data
    end

    # Gets a list of existing disks of an OVA
    # This operation gets a list of disks of an exisiting OVA 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OvaDiskListResponse, Integer, Hash)>] OvaDiskListResponse data, response status code and response headers
    def ovas_uuid_disks_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_disks_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_disks_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_disks_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}/disks'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OvaDiskListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_disks_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_disks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get OVA Contents
    # Downloads the OVA based on the UUID specified.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def ovas_uuid_file_get(uuid, opts = {})
      data, _status_code, _headers = ovas_uuid_file_get_with_http_info(uuid, opts)
      data
    end

    # Get OVA Contents
    # Downloads the OVA based on the UUID specified.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def ovas_uuid_file_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_file_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_file_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_file_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}/file'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an existing OVA
    # This operation gets a existing OVA.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [OvaGetResponse]
    def ovas_uuid_get(uuid, opts = {})
      data, _status_code, _headers = ovas_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get an existing OVA
    # This operation gets a existing OVA.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OvaGetResponse, Integer, Hash)>] OvaGetResponse data, response status code and response headers
    def ovas_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OvaGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update name of an existing OVA
    # This operation updates a existing OVA based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [OvaUpdateInput] :body 
    # @return [nil]
    def ovas_uuid_put(uuid, opts = {})
      ovas_uuid_put_with_http_info(uuid, opts)
      nil
    end

    # Update name of an existing OVA
    # This operation updates a existing OVA based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [OvaUpdateInput] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ovas_uuid_put_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_put, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VM spec from an OVA.
    # Get VM spec from an OVA. This spec can be used to create a VM. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :ignore_unknown_fields 
    # @return [VmSpecOutput]
    def ovas_uuid_vm_spec_get(uuid, opts = {})
      data, _status_code, _headers = ovas_uuid_vm_spec_get_with_http_info(uuid, opts)
      data
    end

    # Get VM spec from an OVA.
    # Get VM spec from an OVA. This spec can be used to create a VM. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :ignore_unknown_fields 
    # @return [Array<(VmSpecOutput, Integer, Hash)>] VmSpecOutput data, response status code and response headers
    def ovas_uuid_vm_spec_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OvasApi.ovas_uuid_vm_spec_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling OvasApi.ovas_uuid_vm_spec_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling OvasApi.ovas_uuid_vm_spec_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/ovas/{uuid}/vm_spec'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ignore_unknown_fields'] = opts[:'ignore_unknown_fields'] if !opts[:'ignore_unknown_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VmSpecOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OvasApi.ovas_uuid_vm_spec_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OvasApi#ovas_uuid_vm_spec_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
