=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class IdempotenceIdentifiersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an existing idempotence_identifier
    # This operation submits a request to delete an existing idempotence_identifier.
    # @param client_identifier [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def idempotence_identifiers_client_identifier_delete(client_identifier, opts = {})
      idempotence_identifiers_client_identifier_delete_with_http_info(client_identifier, opts)
      nil
    end

    # Delete an existing idempotence_identifier
    # This operation submits a request to delete an existing idempotence_identifier.
    # @param client_identifier [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def idempotence_identifiers_client_identifier_delete_with_http_info(client_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdempotenceIdentifiersApi.idempotence_identifiers_client_identifier_delete ...'
      end
      # verify the required parameter 'client_identifier' is set
      if @api_client.config.client_side_validation && client_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'client_identifier' when calling IdempotenceIdentifiersApi.idempotence_identifiers_client_identifier_delete"
      end
      # resource path
      local_var_path = '/idempotence_identifiers/{client_identifier}'.sub('{' + 'client_identifier' + '}', CGI.escape(client_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"IdempotenceIdentifiersApi.idempotence_identifiers_client_identifier_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdempotenceIdentifiersApi#idempotence_identifiers_client_identifier_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an existing idempotence_identifier
    # This operation gets an existing idempotence_identifier.
    # @param client_identifier [String] 
    # @param [Hash] opts the optional parameters
    # @return [IdempotenceIdentifiersResponse]
    def idempotence_identifiers_client_identifier_get(client_identifier, opts = {})
      data, _status_code, _headers = idempotence_identifiers_client_identifier_get_with_http_info(client_identifier, opts)
      data
    end

    # Get an existing idempotence_identifier
    # This operation gets an existing idempotence_identifier.
    # @param client_identifier [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdempotenceIdentifiersResponse, Integer, Hash)>] IdempotenceIdentifiersResponse data, response status code and response headers
    def idempotence_identifiers_client_identifier_get_with_http_info(client_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdempotenceIdentifiersApi.idempotence_identifiers_client_identifier_get ...'
      end
      # verify the required parameter 'client_identifier' is set
      if @api_client.config.client_side_validation && client_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'client_identifier' when calling IdempotenceIdentifiersApi.idempotence_identifiers_client_identifier_get"
      end
      # resource path
      local_var_path = '/idempotence_identifiers/{client_identifier}'.sub('{' + 'client_identifier' + '}', CGI.escape(client_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdempotenceIdentifiersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"IdempotenceIdentifiersApi.idempotence_identifiers_client_identifier_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdempotenceIdentifiersApi#idempotence_identifiers_client_identifier_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an new idempotence_identifier \" (UUID4)\"
    # This operation submits a request to create an new idempotence_identifier based on the input parameters. The idempotence_identifiers API allows users to generate an idempotent UUID4 with a user-provided identifier. The idempotent UUID(s) can later be passed in POST requests. By default,  Nutanix v3 APIs do not allow for operations to be created with user-provided UUIDs; each POST request received by the API gateway results in a UUID4 being automatically generated and returned in the response JSON. 
    # @param [Hash] opts the optional parameters
    # @option opts [IdempotenceIdentifiersInput] :body An idempotence identifier object.
    # @return [IdempotenceIdentifiersResponse]
    def idempotence_identifiers_post(opts = {})
      data, _status_code, _headers = idempotence_identifiers_post_with_http_info(opts)
      data
    end

    # Create an new idempotence_identifier \&quot; (UUID4)\&quot;
    # This operation submits a request to create an new idempotence_identifier based on the input parameters. The idempotence_identifiers API allows users to generate an idempotent UUID4 with a user-provided identifier. The idempotent UUID(s) can later be passed in POST requests. By default,  Nutanix v3 APIs do not allow for operations to be created with user-provided UUIDs; each POST request received by the API gateway results in a UUID4 being automatically generated and returned in the response JSON. 
    # @param [Hash] opts the optional parameters
    # @option opts [IdempotenceIdentifiersInput] :body An idempotence identifier object.
    # @return [Array<(IdempotenceIdentifiersResponse, Integer, Hash)>] IdempotenceIdentifiersResponse data, response status code and response headers
    def idempotence_identifiers_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdempotenceIdentifiersApi.idempotence_identifiers_post ...'
      end
      # resource path
      local_var_path = '/idempotence_identifiers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'IdempotenceIdentifiersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"IdempotenceIdentifiersApi.idempotence_identifiers_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdempotenceIdentifiersApi#idempotence_identifiers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an new idempotence_identifier \" (Salted / UUID5)\"
    # This operation submits a request to create an new idempotence_identifier based on the input parameters. This internal API generates idempotent UUID5(s)for given name or list of names. These are deterministic UUID5, so use caution as this can result in duplicated uuids across environments. 
    # @param body [IdentifierInput] 
    # @param [Hash] opts the optional parameters
    # @return [IdentifierResponse]
    def idempotence_identifiers_salted_post(body, opts = {})
      data, _status_code, _headers = idempotence_identifiers_salted_post_with_http_info(body, opts)
      data
    end

    # Create an new idempotence_identifier \&quot; (Salted / UUID5)\&quot;
    # This operation submits a request to create an new idempotence_identifier based on the input parameters. This internal API generates idempotent UUID5(s)for given name or list of names. These are deterministic UUID5, so use caution as this can result in duplicated uuids across environments. 
    # @param body [IdentifierInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentifierResponse, Integer, Hash)>] IdentifierResponse data, response status code and response headers
    def idempotence_identifiers_salted_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdempotenceIdentifiersApi.idempotence_identifiers_salted_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IdempotenceIdentifiersApi.idempotence_identifiers_salted_post"
      end
      # resource path
      local_var_path = '/idempotence_identifiers/salted'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IdentifierResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"IdempotenceIdentifiersApi.idempotence_identifiers_salted_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdempotenceIdentifiersApi#idempotence_identifiers_salted_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
