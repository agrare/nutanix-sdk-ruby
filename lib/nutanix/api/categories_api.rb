=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class CategoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the category keys.
    # List the category keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryListMetadata] :get_entities_request 
    # @return [CategoryKeyListResponse]
    def categories_list_post(opts = {})
      data, _status_code, _headers = categories_list_post_with_http_info(opts)
      data
    end

    # List the category keys.
    # List the category keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryListMetadata] :get_entities_request 
    # @return [Array<(CategoryKeyListResponse, Integer, Hash)>] CategoryKeyListResponse data, response status code and response headers
    def categories_list_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_list_post ...'
      end
      # resource path
      local_var_path = '/categories/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_entities_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryKeyListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a category Key.
    # Delete a category Key.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def categories_name_delete(name, opts = {})
      categories_name_delete_with_http_info(name, opts)
      nil
    end

    # Delete a category Key.
    # Delete a category Key.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def categories_name_delete_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_delete"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_delete, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/categories/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a category key.
    # Get a category key.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryKeyStatus]
    def categories_name_get(name, opts = {})
      data, _status_code, _headers = categories_name_get_with_http_info(name, opts)
      data
    end

    # Get a category key.
    # Get a category key.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryKeyStatus, Integer, Hash)>] CategoryKeyStatus data, response status code and response headers
    def categories_name_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_get"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_get, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/categories/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryKeyStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the values for a specified key.
    # List the values for a specified key. 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryListMetadata] :get_entities_request 
    # @return [CategoryValueListResponse]
    def categories_name_list_post(name, opts = {})
      data, _status_code, _headers = categories_name_list_post_with_http_info(name, opts)
      data
    end

    # List the values for a specified key.
    # List the values for a specified key. 
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryListMetadata] :get_entities_request 
    # @return [Array<(CategoryValueListResponse, Integer, Hash)>] CategoryValueListResponse data, response status code and response headers
    def categories_name_list_post_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_list_post ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_list_post"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_list_post, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/categories/{name}/list'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_entities_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryValueListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update a category Key.
    # Create or Update a category Key.
    # @param name [String] 
    # @param spec [CategoryKey] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryKeyStatus]
    def categories_name_put(name, spec, opts = {})
      data, _status_code, _headers = categories_name_put_with_http_info(name, spec, opts)
      data
    end

    # Create or Update a category Key.
    # Create or Update a category Key.
    # @param name [String] 
    # @param spec [CategoryKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryKeyStatus, Integer, Hash)>] CategoryKeyStatus data, response status code and response headers
    def categories_name_put_with_http_info(name, spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_put ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_put"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_put, the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9_.-]+( [a-zA-Z0-9_.-]+)*$/)
      if @api_client.config.client_side_validation && name !~ pattern
        fail ArgumentError, "invalid value for 'name' when calling CategoriesApi.categories_name_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling CategoriesApi.categories_name_put"
      end
      # resource path
      local_var_path = '/categories/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryKeyStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a category value.
    # Delete a category value.
    # @param name [String] 
    # @param value [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def categories_name_value_delete(name, value, opts = {})
      categories_name_value_delete_with_http_info(name, value, opts)
      nil
    end

    # Delete a category value.
    # Delete a category value.
    # @param name [String] 
    # @param value [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def categories_name_value_delete_with_http_info(name, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_value_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_value_delete"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_value_delete, the character length must be smaller than or equal to 64.'
      end

      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CategoriesApi.categories_name_value_delete"
      end
      if @api_client.config.client_side_validation && value.to_s.length > 64
        fail ArgumentError, 'invalid value for "value" when calling CategoriesApi.categories_name_value_delete, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/categories/{name}/{value}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'value' + '}', CGI.escape(value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_value_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_value_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a category value.
    # Get a category value.
    # @param name [String] 
    # @param value [String] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryValueStatus]
    def categories_name_value_get(name, value, opts = {})
      data, _status_code, _headers = categories_name_value_get_with_http_info(name, value, opts)
      data
    end

    # Get a category value.
    # Get a category value.
    # @param name [String] 
    # @param value [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryValueStatus, Integer, Hash)>] CategoryValueStatus data, response status code and response headers
    def categories_name_value_get_with_http_info(name, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_value_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_value_get"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_value_get, the character length must be smaller than or equal to 64.'
      end

      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CategoriesApi.categories_name_value_get"
      end
      if @api_client.config.client_side_validation && value.to_s.length > 64
        fail ArgumentError, 'invalid value for "value" when calling CategoriesApi.categories_name_value_get, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/categories/{name}/{value}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'value' + '}', CGI.escape(value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryValueStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_value_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_value_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update a category value.
    # Create or Update a category value. Creates when value doesn't exist. 
    # @param name [String] 
    # @param value [String] 
    # @param spec [CategoryValue] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryValueStatus]
    def categories_name_value_put(name, value, spec, opts = {})
      data, _status_code, _headers = categories_name_value_put_with_http_info(name, value, spec, opts)
      data
    end

    # Create or Update a category value.
    # Create or Update a category value. Creates when value doesn&#39;t exist. 
    # @param name [String] 
    # @param value [String] 
    # @param spec [CategoryValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryValueStatus, Integer, Hash)>] CategoryValueStatus data, response status code and response headers
    def categories_name_value_put_with_http_info(name, value, spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.categories_name_value_put ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoriesApi.categories_name_value_put"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name" when calling CategoriesApi.categories_name_value_put, the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9_.-]+( [a-zA-Z0-9_.-]+)*$/)
      if @api_client.config.client_side_validation && name !~ pattern
        fail ArgumentError, "invalid value for 'name' when calling CategoriesApi.categories_name_value_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CategoriesApi.categories_name_value_put"
      end
      if @api_client.config.client_side_validation && value.to_s.length > 64
        fail ArgumentError, 'invalid value for "value" when calling CategoriesApi.categories_name_value_put, the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9_.-]+( [a-zA-Z0-9_.-]+)*$/)
      if @api_client.config.client_side_validation && value !~ pattern
        fail ArgumentError, "invalid value for 'value' when calling CategoriesApi.categories_name_value_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling CategoriesApi.categories_name_value_put"
      end
      # resource path
      local_var_path = '/categories/{name}/{value}'.sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'value' + '}', CGI.escape(value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryValueStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.categories_name_value_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#categories_name_value_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category usage details.
    # Get list of entities attached to categories or policies in which categories are used as defined by the filter criteria. 
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryQueryInput] :query 
    # @return [CategoryQueryResponse]
    def category_query_post(opts = {})
      data, _status_code, _headers = category_query_post_with_http_info(opts)
      data
    end

    # Get category usage details.
    # Get list of entities attached to categories or policies in which categories are used as defined by the filter criteria. 
    # @param [Hash] opts the optional parameters
    # @option opts [CategoryQueryInput] :query 
    # @return [Array<(CategoryQueryResponse, Integer, Hash)>] CategoryQueryResponse data, response status code and response headers
    def category_query_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoriesApi.category_query_post ...'
      end
      # resource path
      local_var_path = '/category/query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'query'])

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CategoriesApi.category_query_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoriesApi#category_query_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
