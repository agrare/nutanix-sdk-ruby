=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class NetworkSecurityRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Export all network security rules
    # Export all network security rules to save and for subsequent import
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def network_security_rules_export_get(opts = {})
      data, _status_code, _headers = network_security_rules_export_get_with_http_info(opts)
      data
    end

    # Export all network security rules
    # Export all network security rules to save and for subsequent import
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def network_security_rules_export_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_export_get ...'
      end
      # resource path
      local_var_path = '/network_security_rules/export'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_export_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Imports all the network security rules specified by the data.
    # Imports previously exported network security rules
    # @param import_data [Object] 
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def network_security_rules_import_apply_post(import_data, opts = {})
      data, _status_code, _headers = network_security_rules_import_apply_post_with_http_info(import_data, opts)
      data
    end

    # Imports all the network security rules specified by the data.
    # Imports previously exported network security rules
    # @param import_data [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def network_security_rules_import_apply_post_with_http_info(import_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_import_apply_post ...'
      end
      # verify the required parameter 'import_data' is set
      if @api_client.config.client_side_validation && import_data.nil?
        fail ArgumentError, "Missing the required parameter 'import_data' when calling NetworkSecurityRulesApi.network_security_rules_import_apply_post"
      end
      # resource path
      local_var_path = '/network_security_rules/import/apply'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(import_data)

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_import_apply_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_import_apply_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reports on the impact of importing the policy
    # Generates a report on the impact of importing the policy data
    # @param import_data [Object] 
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityRuleImportResponse]
    def network_security_rules_import_dry_run_post(import_data, opts = {})
      data, _status_code, _headers = network_security_rules_import_dry_run_post_with_http_info(import_data, opts)
      data
    end

    # Reports on the impact of importing the policy
    # Generates a report on the impact of importing the policy data
    # @param import_data [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityRuleImportResponse, Integer, Hash)>] NetworkSecurityRuleImportResponse data, response status code and response headers
    def network_security_rules_import_dry_run_post_with_http_info(import_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_import_dry_run_post ...'
      end
      # verify the required parameter 'import_data' is set
      if @api_client.config.client_side_validation && import_data.nil?
        fail ArgumentError, "Missing the required parameter 'import_data' when calling NetworkSecurityRulesApi.network_security_rules_import_dry_run_post"
      end
      # resource path
      local_var_path = '/network_security_rules/import/dry_run'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(import_data)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityRuleImportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_import_dry_run_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_import_dry_run_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all network security rules
    # This operation gets a list of Network security rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [NetworkSecurityRuleListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityRuleListIntentResponse]
    def network_security_rules_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = network_security_rules_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get all network security rules
    # This operation gets a list of Network security rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [NetworkSecurityRuleListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityRuleListIntentResponse, Integer, Hash)>] NetworkSecurityRuleListIntentResponse data, response status code and response headers
    def network_security_rules_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling NetworkSecurityRulesApi.network_security_rules_list_post"
      end
      # resource path
      local_var_path = '/network_security_rules/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityRuleListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Network security rule
    # This operation submits a request to create a new Network security rule based on the input parameters. 
    # @param body [NetworkSecurityRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityRuleIntentResponse]
    def network_security_rules_post(body, opts = {})
      data, _status_code, _headers = network_security_rules_post_with_http_info(body, opts)
      data
    end

    # Create a new Network security rule
    # This operation submits a request to create a new Network security rule based on the input parameters. 
    # @param body [NetworkSecurityRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityRuleIntentResponse, Integer, Hash)>] NetworkSecurityRuleIntentResponse data, response status code and response headers
    def network_security_rules_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityRulesApi.network_security_rules_post"
      end
      # resource path
      local_var_path = '/network_security_rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing Network security rule
    # This operation submits a request to delete a existing Network security rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityRuleIntentResponse]
    def network_security_rules_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = network_security_rules_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a existing Network security rule
    # This operation submits a request to delete a existing Network security rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityRuleIntentResponse, Integer, Hash)>] NetworkSecurityRuleIntentResponse data, response status code and response headers
    def network_security_rules_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling NetworkSecurityRulesApi.network_security_rules_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling NetworkSecurityRulesApi.network_security_rules_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/network_security_rules/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing Network security rule
    # This operation gets a existing Network security rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityRuleIntentResponse]
    def network_security_rules_uuid_get(uuid, opts = {})
      data, _status_code, _headers = network_security_rules_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing Network security rule
    # This operation gets a existing Network security rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityRuleIntentResponse, Integer, Hash)>] NetworkSecurityRuleIntentResponse data, response status code and response headers
    def network_security_rules_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling NetworkSecurityRulesApi.network_security_rules_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling NetworkSecurityRulesApi.network_security_rules_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/network_security_rules/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing Network security rule
    # This operation submits a request to update a existing Network security rule based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [NetworkSecurityRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [NetworkSecurityRuleIntentResponse]
    def network_security_rules_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = network_security_rules_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a existing Network security rule
    # This operation submits a request to update a existing Network security rule based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [NetworkSecurityRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkSecurityRuleIntentResponse, Integer, Hash)>] NetworkSecurityRuleIntentResponse data, response status code and response headers
    def network_security_rules_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkSecurityRulesApi.network_security_rules_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling NetworkSecurityRulesApi.network_security_rules_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling NetworkSecurityRulesApi.network_security_rules_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkSecurityRulesApi.network_security_rules_uuid_put"
      end
      # resource path
      local_var_path = '/network_security_rules/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkSecurityRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"NetworkSecurityRulesApi.network_security_rules_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkSecurityRulesApi#network_security_rules_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
