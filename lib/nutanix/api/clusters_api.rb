=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class ClustersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the placement information for an entity. This will be used to identify the replication target for an entity snapshot or placement of the entity. 
    # Get entity placement details.
    # @param spec [PlacementSpec] Entity spec.
    # @param [Hash] opts the optional parameters
    # @return [PlacementDetail]
    def clusters_entity_replication_target_details_post(spec, opts = {})
      data, _status_code, _headers = clusters_entity_replication_target_details_post_with_http_info(spec, opts)
      data
    end

    # Get the placement information for an entity. This will be used to identify the replication target for an entity snapshot or placement of the entity. 
    # Get entity placement details.
    # @param spec [PlacementSpec] Entity spec.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlacementDetail, Integer, Hash)>] PlacementDetail data, response status code and response headers
    def clusters_entity_replication_target_details_post_with_http_info(spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_entity_replication_target_details_post ...'
      end
      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling ClustersApi.clusters_entity_replication_target_details_post"
      end
      # resource path
      local_var_path = '/clusters/entity_replication_target_details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type] || 'PlacementDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_entity_replication_target_details_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_entity_replication_target_details_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of existing clusters
    # This operation gets a list of clusters, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [ClusterListMetadata] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :force_refresh Forcefully get the latest response. (Values can be True, False) 
    # @return [ClusterListIntentResponse]
    def clusters_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = clusters_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing clusters
    # This operation gets a list of clusters, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [ClusterListMetadata] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :force_refresh Forcefully get the latest response. (Values can be True, False) 
    # @return [Array<(ClusterListIntentResponse, Integer, Hash)>] ClusterListIntentResponse data, response status code and response headers
    def clusters_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling ClustersApi.clusters_list_post"
      end
      # resource path
      local_var_path = '/clusters/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'Force-Refresh'] = opts[:'force_refresh'] if !opts[:'force_refresh'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ClusterListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrate SSP config from a Prism Element.
    # Migrate SSP config from a Prism Element.
    # @param cluster_uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [SspConfigInput] :body 
    # @return [SspMigrationStatus]
    def clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post(cluster_uuid, opts = {})
      data, _status_code, _headers = clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post_with_http_info(cluster_uuid, opts)
      data
    end

    # Migrate SSP config from a Prism Element.
    # Migrate SSP config from a Prism Element.
    # @param cluster_uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [SspConfigInput] :body 
    # @return [Array<(SspMigrationStatus, Integer, Hash)>] SspMigrationStatus data, response status code and response headers
    def clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post_with_http_info(cluster_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post ...'
      end
      # verify the required parameter 'cluster_uuid' is set
      if @api_client.config.client_side_validation && cluster_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_uuid' when calling ClustersApi.clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_uuid !~ pattern
        fail ArgumentError, "invalid value for 'cluster_uuid' when calling ClustersApi.clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/multicluster_config/{cluster_uuid}/migrate_ssp_config'.sub('{' + 'cluster_uuid' + '}', CGI.escape(cluster_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'SspMigrationStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_cluster_uuid_migrate_ssp_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply multicluster configuration from Prism Central.
    # Apply multicluster configuration from Prism Central.
    # @param body [MulticlusterConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [MulticlusterConfigIntentResponse]
    def clusters_multicluster_config_post(body, opts = {})
      data, _status_code, _headers = clusters_multicluster_config_post_with_http_info(body, opts)
      data
    end

    # Apply multicluster configuration from Prism Central.
    # Apply multicluster configuration from Prism Central.
    # @param body [MulticlusterConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MulticlusterConfigIntentResponse, Integer, Hash)>] MulticlusterConfigIntentResponse data, response status code and response headers
    def clusters_multicluster_config_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_multicluster_config_post"
      end
      # resource path
      local_var_path = '/clusters/multicluster_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MulticlusterConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a multicluster configuration request from Prism Central.
    # Cancel a multicluster configuration request by cancelling all queued cluster configuration tasks. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_multicluster_config_uuid_cancel_post(uuid, opts = {})
      clusters_multicluster_config_uuid_cancel_post_with_http_info(uuid, opts)
      nil
    end

    # Cancel a multicluster configuration request from Prism Central.
    # Cancel a multicluster configuration request by cancelling all queued cluster configuration tasks. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_multicluster_config_uuid_cancel_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_uuid_cancel_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_cancel_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_cancel_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/multicluster_config/{uuid}/cancel'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_uuid_cancel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_uuid_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a scheduled and unprocessed multicluster configuration request. 
    # Delete a scheduled and unprocessed multicluster configuration request. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [MulticlusterConfigIntentResponse]
    def clusters_multicluster_config_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = clusters_multicluster_config_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a scheduled and unprocessed multicluster configuration request. 
    # Delete a scheduled and unprocessed multicluster configuration request. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MulticlusterConfigIntentResponse, Integer, Hash)>] MulticlusterConfigIntentResponse data, response status code and response headers
    def clusters_multicluster_config_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/multicluster_config/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MulticlusterConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause a multicluster configuration request from Prism Central.
    # Pause a multicluster configuration request by pausing all queued cluster configuration tasks. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_multicluster_config_uuid_pause_post(uuid, opts = {})
      clusters_multicluster_config_uuid_pause_post_with_http_info(uuid, opts)
      nil
    end

    # Pause a multicluster configuration request from Prism Central.
    # Pause a multicluster configuration request by pausing all queued cluster configuration tasks. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_multicluster_config_uuid_pause_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_uuid_pause_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_pause_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_pause_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/multicluster_config/{uuid}/pause'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_uuid_pause_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_uuid_pause_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a scheduled and unprocessed multicluster configuration request. 
    # Update a scheduled and unprocessed multicluster configuration request. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MulticlusterConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [MulticlusterConfigIntentResponse]
    def clusters_multicluster_config_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = clusters_multicluster_config_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a scheduled and unprocessed multicluster configuration request. 
    # Update a scheduled and unprocessed multicluster configuration request. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MulticlusterConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MulticlusterConfigIntentResponse, Integer, Hash)>] MulticlusterConfigIntentResponse data, response status code and response headers
    def clusters_multicluster_config_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_multicluster_config_uuid_put"
      end
      # resource path
      local_var_path = '/clusters/multicluster_config/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MulticlusterConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume a paused multicluster configuration request.
    # Resume a paused multicluster configuration request.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_multicluster_config_uuid_resume_post(uuid, opts = {})
      clusters_multicluster_config_uuid_resume_post_with_http_info(uuid, opts)
      nil
    end

    # Resume a paused multicluster configuration request.
    # Resume a paused multicluster configuration request.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_multicluster_config_uuid_resume_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_multicluster_config_uuid_resume_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_resume_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_multicluster_config_uuid_resume_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/multicluster_config/{uuid}/resume'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_multicluster_config_uuid_resume_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_multicluster_config_uuid_resume_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the Lazan resource reservation lease for the given recovery point replication. 
    # Update Lazan resource reservation lease.
    # @param spec [RecoveryPointResourceReservationSpec] Entity spec.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_recovery_point_resource_reservation_post(spec, opts = {})
      clusters_recovery_point_resource_reservation_post_with_http_info(spec, opts)
      nil
    end

    # Update the Lazan resource reservation lease for the given recovery point replication. 
    # Update Lazan resource reservation lease.
    # @param spec [RecoveryPointResourceReservationSpec] Entity spec.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_recovery_point_resource_reservation_post_with_http_info(spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_recovery_point_resource_reservation_post ...'
      end
      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling ClustersApi.clusters_recovery_point_resource_reservation_post"
      end
      # resource path
      local_var_path = '/clusters/recovery_point_resource_reservation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_recovery_point_resource_reservation_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_recovery_point_resource_reservation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of existing clusters
    # \"API to check if a remote cluster is synchronous replication capable.\" 
    # @param body [ClusterSynchronousReplicationCapableInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ClusterSynchronousReplicationCapableResponseInner>]
    def clusters_synchronous_replication_capable_post(body, opts = {})
      data, _status_code, _headers = clusters_synchronous_replication_capable_post_with_http_info(body, opts)
      data
    end

    # Get a list of existing clusters
    # \&quot;API to check if a remote cluster is synchronous replication capable.\&quot; 
    # @param body [ClusterSynchronousReplicationCapableInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClusterSynchronousReplicationCapableResponseInner>, Integer, Hash)>] Array<ClusterSynchronousReplicationCapableResponseInner> data, response status code and response headers
    def clusters_synchronous_replication_capable_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_synchronous_replication_capable_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_synchronous_replication_capable_post"
      end
      # resource path
      local_var_path = '/clusters/synchronous_replication_capable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ClusterSynchronousReplicationCapableResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_synchronous_replication_capable_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_synchronous_replication_capable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the CA certificate
    # Delete the CA certificate specified by certificate authority name 
    # @param uuid [String] The UUID of the entity.
    # @param ca_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_ca_certs_ca_name_delete(uuid, ca_name, opts = {})
      clusters_uuid_certificates_ca_certs_ca_name_delete_with_http_info(uuid, ca_name, opts)
      nil
    end

    # Delete the CA certificate
    # Delete the CA certificate specified by certificate authority name 
    # @param uuid [String] The UUID of the entity.
    # @param ca_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_ca_certs_ca_name_delete_with_http_info(uuid, ca_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_ca_certs_ca_name_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_ca_certs_ca_name_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_ca_certs_ca_name_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ca_name' is set
      if @api_client.config.client_side_validation && ca_name.nil?
        fail ArgumentError, "Missing the required parameter 'ca_name' when calling ClustersApi.clusters_uuid_certificates_ca_certs_ca_name_delete"
      end
      if @api_client.config.client_side_validation && ca_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "ca_name" when calling ClustersApi.clusters_uuid_certificates_ca_certs_ca_name_delete, the character length must be smaller than or equal to 64.'
      end

      # resource path
      local_var_path = '/clusters/{uuid}/certificates/ca_certs/{ca_name}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'ca_name' + '}', CGI.escape(ca_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_ca_certs_ca_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_ca_certs_ca_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new CA certificate
    # Add a new CA certificate
    # @param uuid [String] The UUID of the entity.
    # @param spec [CaCert] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_ca_certs_post(uuid, spec, opts = {})
      clusters_uuid_certificates_ca_certs_post_with_http_info(uuid, spec, opts)
      nil
    end

    # Add a new CA certificate
    # Add a new CA certificate
    # @param uuid [String] The UUID of the entity.
    # @param spec [CaCert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_ca_certs_post_with_http_info(uuid, spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_ca_certs_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_ca_certs_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_ca_certs_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling ClustersApi.clusters_uuid_certificates_ca_certs_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/ca_certs'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_ca_certs_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_ca_certs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove the CA chain for client authentication
    # Remove the CA chain for client authentication
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_client_auth_delete(uuid, opts = {})
      clusters_uuid_certificates_client_auth_delete_with_http_info(uuid, opts)
      nil
    end

    # Remove the CA chain for client authentication
    # Remove the CA chain for client authentication
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_client_auth_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_client_auth_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_client_auth_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_client_auth_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}/certificates/client_auth'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_client_auth_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_client_auth_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import CA chain for client authentication
    # Import CA chain for client authentication
    # @param uuid [String] The UUID of the entity.
    # @param spec [CaChainSpec] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_client_auth_post(uuid, spec, opts = {})
      clusters_uuid_certificates_client_auth_post_with_http_info(uuid, spec, opts)
      nil
    end

    # Import CA chain for client authentication
    # Import CA chain for client authentication
    # @param uuid [String] The UUID of the entity.
    # @param spec [CaChainSpec] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_client_auth_post_with_http_info(uuid, spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_client_auth_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_client_auth_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_client_auth_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling ClustersApi.clusters_uuid_certificates_client_auth_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/client_auth'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_client_auth_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_client_auth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace the CA chain for client authentication
    # Replace the CA chain for client authentication
    # @param uuid [String] The UUID of the entity.
    # @param spec [CaChainSpec] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_client_auth_put(uuid, spec, opts = {})
      clusters_uuid_certificates_client_auth_put_with_http_info(uuid, spec, opts)
      nil
    end

    # Replace the CA chain for client authentication
    # Replace the CA chain for client authentication
    # @param uuid [String] The UUID of the entity.
    # @param spec [CaChainSpec] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_client_auth_put_with_http_info(uuid, spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_client_auth_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_client_auth_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_client_auth_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling ClustersApi.clusters_uuid_certificates_client_auth_put"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/client_auth'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_client_auth_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_client_auth_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download CSRs from cluster
    # Download Certificate Signing Requests from cluster
    # @param uuid [String] The UUID of the entity.
    # @param body [CsrsSpec] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_csrs_get(uuid, body, opts = {})
      clusters_uuid_certificates_csrs_get_with_http_info(uuid, body, opts)
      nil
    end

    # Download CSRs from cluster
    # Download Certificate Signing Requests from cluster
    # @param uuid [String] The UUID of the entity.
    # @param body [CsrsSpec] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_csrs_get_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_csrs_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_csrs_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_csrs_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_uuid_certificates_csrs_get"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/csrs'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_csrs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_csrs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download CSR from a discovered node
    # Download Certificate Signing Request from a discovered node
    # @param uuid [String] The UUID of the entity.
    # @param node_ip [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_csrs_node_ip_get(uuid, node_ip, opts = {})
      clusters_uuid_certificates_csrs_node_ip_get_with_http_info(uuid, node_ip, opts)
      nil
    end

    # Download CSR from a discovered node
    # Download Certificate Signing Request from a discovered node
    # @param uuid [String] The UUID of the entity.
    # @param node_ip [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_csrs_node_ip_get_with_http_info(uuid, node_ip, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_csrs_node_ip_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_csrs_node_ip_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_csrs_node_ip_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'node_ip' is set
      if @api_client.config.client_side_validation && node_ip.nil?
        fail ArgumentError, "Missing the required parameter 'node_ip' when calling ClustersApi.clusters_uuid_certificates_csrs_node_ip_get"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/csrs/{node_ip}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'node_ip' + '}', CGI.escape(node_ip.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_csrs_node_ip_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_csrs_node_ip_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import a new key
    # Import a new key
    # @param uuid [String] The UUID of the entity.
    # @param spec [PemkeySpec] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_pemkey_import_post(uuid, spec, opts = {})
      clusters_uuid_certificates_pemkey_import_post_with_http_info(uuid, spec, opts)
      nil
    end

    # Import a new key
    # Import a new key
    # @param uuid [String] The UUID of the entity.
    # @param spec [PemkeySpec] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_pemkey_import_post_with_http_info(uuid, spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_pemkey_import_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_pemkey_import_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_pemkey_import_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'spec' is set
      if @api_client.config.client_side_validation && spec.nil?
        fail ArgumentError, "Missing the required parameter 'spec' when calling ClustersApi.clusters_uuid_certificates_pemkey_import_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/pemkey/import'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spec)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_pemkey_import_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_pemkey_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a 2048 bits cipher length RSA key
    # Generate a 2048 bits cipher length RSA key
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_pemkey_post(uuid, opts = {})
      clusters_uuid_certificates_pemkey_post_with_http_info(uuid, opts)
      nil
    end

    # Generate a 2048 bits cipher length RSA key
    # Generate a 2048 bits cipher length RSA key
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_pemkey_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_pemkey_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_pemkey_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_pemkey_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}/certificates/pemkey'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_pemkey_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_pemkey_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove PC root certificates
    # On PC: - Delete the root certificate that is associated with the specified   cluster UUID from the PC. - Delete the specified root certificate from all PEs registered with the   PC. On PE: - Delete the root certificate that is associated with the specified   cluster UUID from the PE. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_root_delete(uuid, opts = {})
      clusters_uuid_certificates_root_delete_with_http_info(uuid, opts)
      nil
    end

    # Remove PC root certificates
    # On PC: - Delete the root certificate that is associated with the specified   cluster UUID from the PC. - Delete the specified root certificate from all PEs registered with the   PC. On PE: - Delete the root certificate that is associated with the specified   cluster UUID from the PE. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_root_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_root_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_root_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_root_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}/certificates/root'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_root_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_root_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve PC root certificates
    # On PC: - If the UUID refers to this PC, return the root certificate for the PC. - If the UUID refers to a peer PC, this request is to verify if the peer   root certificate has been stored on this PC, as well as all registered   PEs to this PC; if this is verified, it will return the peer root   certificate. On PE: - The receiving PE returns the root certificate that is associated with   the specified cluster UUID. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Certificate]
    def clusters_uuid_certificates_root_get(uuid, opts = {})
      data, _status_code, _headers = clusters_uuid_certificates_root_get_with_http_info(uuid, opts)
      data
    end

    # Retrieve PC root certificates
    # On PC: - If the UUID refers to this PC, return the root certificate for the PC. - If the UUID refers to a peer PC, this request is to verify if the peer   root certificate has been stored on this PC, as well as all registered   PEs to this PC; if this is verified, it will return the peer root   certificate. On PE: - The receiving PE returns the root certificate that is associated with   the specified cluster UUID. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Certificate, Integer, Hash)>] Certificate data, response status code and response headers
    def clusters_uuid_certificates_root_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_root_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_root_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_root_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}/certificates/root'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Certificate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_root_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_root_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save a PC root certificate on a PC or a PE
    # On PC: - The request specifies with an \"INITIATOR\" role: The PC initiates a   root certificate exchange with all peer PCs. - The request specifies with an \"ACCEPTOR\" role: The PC performs root   certficate exchange with the peer PC by saving peer root certificate   to this PC, as well as all PEs registered with this PC. On PE: - The receiving PE save the peer root certificate. 
    # @param uuid [String] The UUID of the entity.
    # @param root_cert [RootCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [RootCertificate]
    def clusters_uuid_certificates_root_post(uuid, root_cert, opts = {})
      data, _status_code, _headers = clusters_uuid_certificates_root_post_with_http_info(uuid, root_cert, opts)
      data
    end

    # Save a PC root certificate on a PC or a PE
    # On PC: - The request specifies with an \&quot;INITIATOR\&quot; role: The PC initiates a   root certificate exchange with all peer PCs. - The request specifies with an \&quot;ACCEPTOR\&quot; role: The PC performs root   certficate exchange with the peer PC by saving peer root certificate   to this PC, as well as all PEs registered with this PC. On PE: - The receiving PE save the peer root certificate. 
    # @param uuid [String] The UUID of the entity.
    # @param root_cert [RootCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCertificate, Integer, Hash)>] RootCertificate data, response status code and response headers
    def clusters_uuid_certificates_root_post_with_http_info(uuid, root_cert, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_root_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_root_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_root_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'root_cert' is set
      if @api_client.config.client_side_validation && root_cert.nil?
        fail ArgumentError, "Missing the required parameter 'root_cert' when calling ClustersApi.clusters_uuid_certificates_root_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/root'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(root_cert)

      # return_type
      return_type = opts[:debug_return_type] || 'RootCertificate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_root_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_root_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add one or more certificates to a service VM
    # Add one or more certificates to a service VM
    # @param uuid [String] The UUID of the entity.
    # @param kms_uuid [String] 
    # @param body [CertificateSpecUploadInput] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_svm_certs_kms_uuid_post(uuid, kms_uuid, body, opts = {})
      clusters_uuid_certificates_svm_certs_kms_uuid_post_with_http_info(uuid, kms_uuid, body, opts)
      nil
    end

    # Add one or more certificates to a service VM
    # Add one or more certificates to a service VM
    # @param uuid [String] The UUID of the entity.
    # @param kms_uuid [String] 
    # @param body [CertificateSpecUploadInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_svm_certs_kms_uuid_post_with_http_info(uuid, kms_uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'kms_uuid' is set
      if @api_client.config.client_side_validation && kms_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'kms_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && kms_uuid !~ pattern
        fail ArgumentError, "invalid value for 'kms_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/svm_certs/{kms_uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'kms_uuid' + '}', CGI.escape(kms_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_svm_certs_kms_uuid_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_svm_certs_kms_uuid_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the certificate on a service VM
    # Delete the certificate on a service VM
    # @param uuid [String] The UUID of the entity.
    # @param node_uuid [String] 
    # @param kms_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete(uuid, node_uuid, kms_uuid, opts = {})
      clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete_with_http_info(uuid, node_uuid, kms_uuid, opts)
      nil
    end

    # Delete the certificate on a service VM
    # Delete the certificate on a service VM
    # @param uuid [String] The UUID of the entity.
    # @param node_uuid [String] 
    # @param kms_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete_with_http_info(uuid, node_uuid, kms_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'node_uuid' is set
      if @api_client.config.client_side_validation && node_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'node_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && node_uuid !~ pattern
        fail ArgumentError, "invalid value for 'node_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'kms_uuid' is set
      if @api_client.config.client_side_validation && kms_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'kms_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && kms_uuid !~ pattern
        fail ArgumentError, "invalid value for 'kms_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}/certificates/svm_certs/{node_uuid}/{kms_uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'node_uuid' + '}', CGI.escape(node_uuid.to_s)).sub('{' + 'kms_uuid' + '}', CGI.escape(kms_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace the certificate on a service VM
    # Replace the certificate on a service VM
    # @param uuid [String] The UUID of the entity.
    # @param node_uuid [String] 
    # @param kms_uuid [String] 
    # @param cert [Certificate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put(uuid, node_uuid, kms_uuid, cert, opts = {})
      clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put_with_http_info(uuid, node_uuid, kms_uuid, cert, opts)
      nil
    end

    # Replace the certificate on a service VM
    # Replace the certificate on a service VM
    # @param uuid [String] The UUID of the entity.
    # @param node_uuid [String] 
    # @param kms_uuid [String] 
    # @param cert [Certificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put_with_http_info(uuid, node_uuid, kms_uuid, cert, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'node_uuid' is set
      if @api_client.config.client_side_validation && node_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'node_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && node_uuid !~ pattern
        fail ArgumentError, "invalid value for 'node_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'kms_uuid' is set
      if @api_client.config.client_side_validation && kms_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'kms_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && kms_uuid !~ pattern
        fail ArgumentError, "invalid value for 'kms_uuid' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cert' is set
      if @api_client.config.client_side_validation && cert.nil?
        fail ArgumentError, "Missing the required parameter 'cert' when calling ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/certificates/svm_certs/{node_uuid}/{kms_uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'node_uuid' + '}', CGI.escape(node_uuid.to_s)).sub('{' + 'kms_uuid' + '}', CGI.escape(kms_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cert)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_certificates_svm_certs_node_uuid_kms_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing cloud credentials
    # This operation submits a request to delete a existing cloud credentials.
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param cloud_credentials_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [CloudCredentialsIntentResponse]
    def clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete(uuid, cloud_type, cloud_credentials_id, opts = {})
      data, _status_code, _headers = clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete_with_http_info(uuid, cloud_type, cloud_credentials_id, opts)
      data
    end

    # Delete a existing cloud credentials
    # This operation submits a request to delete a existing cloud credentials.
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param cloud_credentials_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudCredentialsIntentResponse, Integer, Hash)>] CloudCredentialsIntentResponse data, response status code and response headers
    def clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete_with_http_info(uuid, cloud_type, cloud_credentials_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_credentials_id' is set
      if @api_client.config.client_side_validation && cloud_credentials_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_credentials_id' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_id}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s)).sub('{' + 'cloud_credentials_id' + '}', CGI.escape(cloud_credentials_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudCredentialsIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing cloud credentials
    # This operation gets a existing cloud credentials.
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param cloud_credentials_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [CloudCredentialsIntentResponse]
    def clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get(uuid, cloud_type, cloud_credentials_id, opts = {})
      data, _status_code, _headers = clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get_with_http_info(uuid, cloud_type, cloud_credentials_id, opts)
      data
    end

    # Get a existing cloud credentials
    # This operation gets a existing cloud credentials.
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param cloud_credentials_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudCredentialsIntentResponse, Integer, Hash)>] CloudCredentialsIntentResponse data, response status code and response headers
    def clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get_with_http_info(uuid, cloud_type, cloud_credentials_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_credentials_id' is set
      if @api_client.config.client_side_validation && cloud_credentials_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_credentials_id' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_id}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s)).sub('{' + 'cloud_credentials_id' + '}', CGI.escape(cloud_credentials_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudCredentialsIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing cloud credentials
    # This operation submits a request to update a existing cloud credentials based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param cloud_credentials_id [Integer] 
    # @param body [CloudCredentialsIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [CloudCredentialsIntentResponse]
    def clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put(uuid, cloud_type, cloud_credentials_id, body, opts = {})
      data, _status_code, _headers = clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put_with_http_info(uuid, cloud_type, cloud_credentials_id, body, opts)
      data
    end

    # Update a existing cloud credentials
    # This operation submits a request to update a existing cloud credentials based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param cloud_credentials_id [Integer] 
    # @param body [CloudCredentialsIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudCredentialsIntentResponse, Integer, Hash)>] CloudCredentialsIntentResponse data, response status code and response headers
    def clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put_with_http_info(uuid, cloud_type, cloud_credentials_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_credentials_id' is set
      if @api_client.config.client_side_validation && cloud_credentials_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_credentials_id' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_id}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s)).sub('{' + 'cloud_credentials_id' + '}', CGI.escape(cloud_credentials_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudCredentialsIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_cloud_credentials_cloud_type_cloud_credentials_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all cloud credentials
    # Delete all cloud credentials
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param [Hash] opts the optional parameters
    # @return [CloudCredentialsIntentResponse]
    def clusters_uuid_cloud_credentials_cloud_type_delete(uuid, cloud_type, opts = {})
      data, _status_code, _headers = clusters_uuid_cloud_credentials_cloud_type_delete_with_http_info(uuid, cloud_type, opts)
      data
    end

    # Delete all cloud credentials
    # Delete all cloud credentials
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudCredentialsIntentResponse, Integer, Hash)>] CloudCredentialsIntentResponse data, response status code and response headers
    def clusters_uuid_cloud_credentials_cloud_type_delete_with_http_info(uuid, cloud_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_cloud_credentials_cloud_type_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_delete"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}/cloud_credentials/{cloud_type}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudCredentialsIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_cloud_credentials_cloud_type_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_cloud_credentials_cloud_type_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of existing cloud credentials
    # This operation gets a list of cloud credentials, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param get_entities_request [CloudCredentialsListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [CloudCredentialsListIntentResponse]
    def clusters_uuid_cloud_credentials_cloud_type_list_post(uuid, cloud_type, get_entities_request, opts = {})
      data, _status_code, _headers = clusters_uuid_cloud_credentials_cloud_type_list_post_with_http_info(uuid, cloud_type, get_entities_request, opts)
      data
    end

    # Get a list of existing cloud credentials
    # This operation gets a list of cloud credentials, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param get_entities_request [CloudCredentialsListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudCredentialsListIntentResponse, Integer, Hash)>] CloudCredentialsListIntentResponse data, response status code and response headers
    def clusters_uuid_cloud_credentials_cloud_type_list_post_with_http_info(uuid, cloud_type, get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/cloud_credentials/{cloud_type}/list'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudCredentialsListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_cloud_credentials_cloud_type_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_cloud_credentials_cloud_type_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a cloud credential for accessing cloud sites
    # Add a cloud credential for accessing cloud sites
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param body [CloudCredentialsIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [CloudCredentialsIntentResponse]
    def clusters_uuid_cloud_credentials_cloud_type_post(uuid, cloud_type, body, opts = {})
      data, _status_code, _headers = clusters_uuid_cloud_credentials_cloud_type_post_with_http_info(uuid, cloud_type, body, opts)
      data
    end

    # Add a cloud credential for accessing cloud sites
    # Add a cloud credential for accessing cloud sites
    # @param uuid [String] The UUID of the entity.
    # @param cloud_type [String] The Cloud Type.
    # @param body [CloudCredentialsIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudCredentialsIntentResponse, Integer, Hash)>] CloudCredentialsIntentResponse data, response status code and response headers
    def clusters_uuid_cloud_credentials_cloud_type_post_with_http_info(uuid, cloud_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'cloud_type' is set
      if @api_client.config.client_side_validation && cloud_type.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post"
      end
      pattern = Regexp.new(/(\bAWS\b|\bAZURE\b|\bNUTANIX_HOSTED_CLOUD\b|\bONPREM_CLOUD\b)/)
      if @api_client.config.client_side_validation && cloud_type !~ pattern
        fail ArgumentError, "invalid value for 'cloud_type' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post"
      end
      # resource path
      local_var_path = '/clusters/{uuid}/cloud_credentials/{cloud_type}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'cloud_type' + '}', CGI.escape(cloud_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudCredentialsIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_cloud_credentials_cloud_type_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_cloud_credentials_cloud_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing cluster
    # This operation gets a existing cluster.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ClusterIntentResponse]
    def clusters_uuid_get(uuid, opts = {})
      data, _status_code, _headers = clusters_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing cluster
    # This operation gets a existing cluster.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterIntentResponse, Integer, Hash)>] ClusterIntentResponse data, response status code and response headers
    def clusters_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clusters/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClusterIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing cluster
    # This operation submits a request to update a existing cluster based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [ClusterIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [ClusterIntentResponse]
    def clusters_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = clusters_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a existing cluster
    # This operation submits a request to update a existing cluster based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [ClusterIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterIntentResponse, Integer, Hash)>] ClusterIntentResponse data, response status code and response headers
    def clusters_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.clusters_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ClustersApi.clusters_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ClustersApi.clusters_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClustersApi.clusters_uuid_put"
      end
      # resource path
      local_var_path = '/clusters/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ClusterIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClustersApi.clusters_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#clusters_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
