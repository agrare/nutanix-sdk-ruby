=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the common report configs.
    # This operation retrieves a list of all the common report configurations with associated metadata. 
    # @param get_entities_request [CommonReportConfigListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [CommonReportConfigListIntentResponse]
    def common_report_configs_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = common_report_configs_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # List the common report configs.
    # This operation retrieves a list of all the common report configurations with associated metadata. 
    # @param get_entities_request [CommonReportConfigListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonReportConfigListIntentResponse, Integer, Hash)>] CommonReportConfigListIntentResponse data, response status code and response headers
    def common_report_configs_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.common_report_configs_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling ReportsApi.common_report_configs_list_post"
      end
      # resource path
      local_var_path = '/common_report_configs/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CommonReportConfigListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.common_report_configs_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#common_report_configs_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create common report config.
    # This operation submits a request to create a common report configuration with associated metadata based on the intentful spec. 
    # @param body [CommonReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [CommonReportConfigIntentResponse]
    def common_report_configs_post(body, opts = {})
      data, _status_code, _headers = common_report_configs_post_with_http_info(body, opts)
      data
    end

    # Create common report config.
    # This operation submits a request to create a common report configuration with associated metadata based on the intentful spec. 
    # @param body [CommonReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonReportConfigIntentResponse, Integer, Hash)>] CommonReportConfigIntentResponse data, response status code and response headers
    def common_report_configs_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.common_report_configs_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReportsApi.common_report_configs_post"
      end
      # resource path
      local_var_path = '/common_report_configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CommonReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.common_report_configs_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#common_report_configs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete common report config.
    # This operation submits a request to delete a common report configuration based on the UUID. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [CommonReportConfigIntentResponse]
    def common_report_configs_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = common_report_configs_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete common report config.
    # This operation submits a request to delete a common report configuration based on the UUID. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonReportConfigIntentResponse, Integer, Hash)>] CommonReportConfigIntentResponse data, response status code and response headers
    def common_report_configs_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.common_report_configs_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.common_report_configs_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.common_report_configs_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/common_report_configs/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommonReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.common_report_configs_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#common_report_configs_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get common report config information.
    # This operation retrieves a common report configuration based on the UUID. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [CommonReportConfigIntentResponse]
    def common_report_configs_uuid_get(uuid, opts = {})
      data, _status_code, _headers = common_report_configs_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get common report config information.
    # This operation retrieves a common report configuration based on the UUID. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonReportConfigIntentResponse, Integer, Hash)>] CommonReportConfigIntentResponse data, response status code and response headers
    def common_report_configs_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.common_report_configs_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.common_report_configs_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.common_report_configs_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/common_report_configs/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CommonReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.common_report_configs_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#common_report_configs_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update common report config.
    # This operation updates a common report configuration based on the UUID and intentful spec. 
    # @param uuid [String] The UUID of the entity.
    # @param body [CommonReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [CommonReportConfigIntentResponse]
    def common_report_configs_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = common_report_configs_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update common report config.
    # This operation updates a common report configuration based on the UUID and intentful spec. 
    # @param uuid [String] The UUID of the entity.
    # @param body [CommonReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonReportConfigIntentResponse, Integer, Hash)>] CommonReportConfigIntentResponse data, response status code and response headers
    def common_report_configs_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.common_report_configs_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.common_report_configs_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.common_report_configs_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReportsApi.common_report_configs_uuid_put"
      end
      # resource path
      local_var_path = '/common_report_configs/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CommonReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.common_report_configs_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#common_report_configs_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the report configs.
    # List the report configs with associated metadata.
    # @param get_entities_request [ReportConfigListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [ReportConfigListIntentResponse]
    def report_configs_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = report_configs_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # List the report configs.
    # List the report configs with associated metadata.
    # @param get_entities_request [ReportConfigListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportConfigListIntentResponse, Integer, Hash)>] ReportConfigListIntentResponse data, response status code and response headers
    def report_configs_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_configs_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling ReportsApi.report_configs_list_post"
      end
      # resource path
      local_var_path = '/report_configs/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ReportConfigListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_configs_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_configs_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create report config.
    # Given an intentful spec, creates a report config with specified attributes.
    # @param body [ReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [ReportConfigIntentResponse]
    def report_configs_post(body, opts = {})
      data, _status_code, _headers = report_configs_post_with_http_info(body, opts)
      data
    end

    # Create report config.
    # Given an intentful spec, creates a report config with specified attributes.
    # @param body [ReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportConfigIntentResponse, Integer, Hash)>] ReportConfigIntentResponse data, response status code and response headers
    def report_configs_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_configs_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReportsApi.report_configs_post"
      end
      # resource path
      local_var_path = '/report_configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_configs_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_configs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete report config.
    # Delete a report config given its uuid.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ReportConfigIntentResponse]
    def report_configs_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = report_configs_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete report config.
    # Delete a report config given its uuid.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportConfigIntentResponse, Integer, Hash)>] ReportConfigIntentResponse data, response status code and response headers
    def report_configs_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_configs_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.report_configs_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.report_configs_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/report_configs/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_configs_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_configs_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get report config information.
    # Given a UUID, returns a report config.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ReportConfigIntentResponse]
    def report_configs_uuid_get(uuid, opts = {})
      data, _status_code, _headers = report_configs_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get report config information.
    # Given a UUID, returns a report config.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportConfigIntentResponse, Integer, Hash)>] ReportConfigIntentResponse data, response status code and response headers
    def report_configs_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_configs_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.report_configs_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.report_configs_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/report_configs/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_configs_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_configs_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update report config.
    # Given an intenful spec and report config uuid, update report config.
    # @param uuid [String] The UUID of the entity.
    # @param body [ReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [ReportConfigIntentResponse]
    def report_configs_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = report_configs_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update report config.
    # Given an intenful spec and report config uuid, update report config.
    # @param uuid [String] The UUID of the entity.
    # @param body [ReportConfigIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportConfigIntentResponse, Integer, Hash)>] ReportConfigIntentResponse data, response status code and response headers
    def report_configs_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_configs_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.report_configs_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.report_configs_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReportsApi.report_configs_uuid_put"
      end
      # resource path
      local_var_path = '/report_configs/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ReportConfigIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_configs_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_configs_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of all the Generated report instances.
    # Get the list of all the generated report instances.
    # @param get_entities_request [ReportInstanceListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [ReportInstanceListIntentResponse]
    def report_instances_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = report_instances_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get the list of all the Generated report instances.
    # Get the list of all the generated report instances.
    # @param get_entities_request [ReportInstanceListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportInstanceListIntentResponse, Integer, Hash)>] ReportInstanceListIntentResponse data, response status code and response headers
    def report_instances_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_instances_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling ReportsApi.report_instances_list_post"
      end
      # resource path
      local_var_path = '/report_instances/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ReportInstanceListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_instances_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_instances_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a report instance.
    # This will generate the report for a specified report config uuid.
    # @param input_body [ReportInstanceIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [ReportInstanceIntentResponse]
    def report_instances_post(input_body, opts = {})
      data, _status_code, _headers = report_instances_post_with_http_info(input_body, opts)
      data
    end

    # Create a report instance.
    # This will generate the report for a specified report config uuid.
    # @param input_body [ReportInstanceIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportInstanceIntentResponse, Integer, Hash)>] ReportInstanceIntentResponse data, response status code and response headers
    def report_instances_post_with_http_info(input_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_instances_post ...'
      end
      # verify the required parameter 'input_body' is set
      if @api_client.config.client_side_validation && input_body.nil?
        fail ArgumentError, "Missing the required parameter 'input_body' when calling ReportsApi.report_instances_post"
      end
      # resource path
      local_var_path = '/report_instances'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(input_body)

      # return_type
      return_type = opts[:debug_return_type] || 'ReportInstanceIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_instances_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_instances_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the generated report instance.
    # Delete the generated report instance.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ReportInstanceIntentResponse]
    def report_instances_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = report_instances_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete the generated report instance.
    # Delete the generated report instance.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportInstanceIntentResponse, Integer, Hash)>] ReportInstanceIntentResponse data, response status code and response headers
    def report_instances_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_instances_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.report_instances_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.report_instances_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/report_instances/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportInstanceIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_instances_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_instances_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the specified report instance.
    # Get the specified report instance.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ReportInstanceIntentResponse]
    def report_instances_uuid_get(uuid, opts = {})
      data, _status_code, _headers = report_instances_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get the specified report instance.
    # Get the specified report instance.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportInstanceIntentResponse, Integer, Hash)>] ReportInstanceIntentResponse data, response status code and response headers
    def report_instances_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.report_instances_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.report_instances_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.report_instances_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/report_instances/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportInstanceIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.report_instances_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#report_instances_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a resource.
    # Download a resource.
    # @param type [String] Type of resource to be downloaded. Supported types are.   - report_instance   - report_instance_pdf   - report_instance_csv   - logo 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reports_download_type_uuid_get(type, uuid, opts = {})
      data, _status_code, _headers = reports_download_type_uuid_get_with_http_info(type, uuid, opts)
      data
    end

    # Download a resource.
    # Download a resource.
    # @param type [String] Type of resource to be downloaded. Supported types are.   - report_instance   - report_instance_pdf   - report_instance_csv   - logo 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def reports_download_type_uuid_get_with_http_info(type, uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_download_type_uuid_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ReportsApi.reports_download_type_uuid_get"
      end
      pattern = Regexp.new(/(\breport_instance\b|\breport_instance_pdf\b|\breport_instance_csv\b|\blogo\b)/)
      if @api_client.config.client_side_validation && type !~ pattern
        fail ArgumentError, "invalid value for 'type' when calling ReportsApi.reports_download_type_uuid_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling ReportsApi.reports_download_type_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling ReportsApi.reports_download_type_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/reports/download/{type}/{uuid}'.sub('{' + 'type' + '}', CGI.escape(type.to_s)).sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf', 'application/zip', 'image/png', 'image/jpeg']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.reports_download_type_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_download_type_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Email the specified generated reports to specified recipients.
    # Email the specified generated reports to specified recipients.
    # @param request_body [ReportNotificationSpec] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reports_notify_post(request_body, opts = {})
      reports_notify_post_with_http_info(request_body, opts)
      nil
    end

    # Email the specified generated reports to specified recipients.
    # Email the specified generated reports to specified recipients.
    # @param request_body [ReportNotificationSpec] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reports_notify_post_with_http_info(request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_notify_post ...'
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling ReportsApi.reports_notify_post"
      end
      # resource path
      local_var_path = '/reports/notify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.reports_notify_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_notify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a file.
    # This uploads a file and returns the UUID for the same.
    # @param type [String] Type of the file to be uploaded. Supported types are   - logo 
    # @param file [Object] 
    # @param [Hash] opts the optional parameters
    # @return [ResourceUploadResponse]
    def reports_upload_type_post(type, file, opts = {})
      data, _status_code, _headers = reports_upload_type_post_with_http_info(type, file, opts)
      data
    end

    # Upload a file.
    # This uploads a file and returns the UUID for the same.
    # @param type [String] Type of the file to be uploaded. Supported types are   - logo 
    # @param file [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceUploadResponse, Integer, Hash)>] ResourceUploadResponse data, response status code and response headers
    def reports_upload_type_post_with_http_info(type, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_upload_type_post ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ReportsApi.reports_upload_type_post"
      end
      pattern = Regexp.new(/(\breport_instance\b|\breport_instance_pdf\b|\breport_instance_csv\b|\blogo\b)/)
      if @api_client.config.client_side_validation && type !~ pattern
        fail ArgumentError, "invalid value for 'type' when calling ReportsApi.reports_upload_type_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ReportsApi.reports_upload_type_post"
      end
      # resource path
      local_var_path = '/reports/upload/{type}'.sub('{' + 'type' + '}', CGI.escape(type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/pdf', 'image/png', 'image/jpeg'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(file)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourceUploadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ReportsApi.reports_upload_type_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_upload_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
