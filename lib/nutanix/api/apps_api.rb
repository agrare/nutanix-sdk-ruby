=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class AppsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the Application
    # List the Application with associated metadata
    # @param get_entities_request [AppListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [AppListIntentResponse]
    def apps_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = apps_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # List the Application
    # List the Application with associated metadata
    # @param get_entities_request [AppListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppListIntentResponse, Integer, Hash)>] AppListIntentResponse data, response status code and response headers
    def apps_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling AppsApi.apps_list_post"
      end
      # resource path
      local_var_path = '/apps/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AppListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Application
    # Given a spec creates a Application with associated metadata 
    # @param body [AppCustomIntentInput] Request body
    # @param [Hash] opts the optional parameters
    # @return [AppIntentResponse]
    def apps_post(body, opts = {})
      data, _status_code, _headers = apps_post_with_http_info(body, opts)
      data
    end

    # Create Application
    # Given a spec creates a Application with associated metadata 
    # @param body [AppCustomIntentInput] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppIntentResponse, Integer, Hash)>] AppIntentResponse data, response status code and response headers
    def apps_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AppsApi.apps_post"
      end
      # resource path
      local_var_path = '/apps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AppIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The API to run an action of appplication on provided target.
    # The API to run an action of appplication on provided target.
    # @param uuid [String] The UUID of the entity.
    # @param action_uuid [String] uuid of Action in Application to execute
    # @param body [AppActionrunInput] 
    # @param [Hash] opts the optional parameters
    # @return [AppActionrunResponse]
    def apps_uuid_actions_action_uuid_run_post(uuid, action_uuid, body, opts = {})
      data, _status_code, _headers = apps_uuid_actions_action_uuid_run_post_with_http_info(uuid, action_uuid, body, opts)
      data
    end

    # The API to run an action of appplication on provided target.
    # The API to run an action of appplication on provided target.
    # @param uuid [String] The UUID of the entity.
    # @param action_uuid [String] uuid of Action in Application to execute
    # @param body [AppActionrunInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppActionrunResponse, Integer, Hash)>] AppActionrunResponse data, response status code and response headers
    def apps_uuid_actions_action_uuid_run_post_with_http_info(uuid, action_uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_actions_action_uuid_run_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_actions_action_uuid_run_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_actions_action_uuid_run_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'action_uuid' is set
      if @api_client.config.client_side_validation && action_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'action_uuid' when calling AppsApi.apps_uuid_actions_action_uuid_run_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && action_uuid !~ pattern
        fail ArgumentError, "invalid value for 'action_uuid' when calling AppsApi.apps_uuid_actions_action_uuid_run_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AppsApi.apps_uuid_actions_action_uuid_run_post"
      end
      # resource path
      local_var_path = '/apps/{uuid}/actions/{action_uuid}/run'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'action_uuid' + '}', CGI.escape(action_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AppActionrunResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_actions_action_uuid_run_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_actions_action_uuid_run_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the Runlogs
    # List the runlog with associated metadata
    # @param uuid [String] The UUID of the entity.
    # @param get_entities_request [AppRunlogListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [AppRunlogList]
    def apps_uuid_app_runlogs_list_post(uuid, get_entities_request, opts = {})
      data, _status_code, _headers = apps_uuid_app_runlogs_list_post_with_http_info(uuid, get_entities_request, opts)
      data
    end

    # List the Runlogs
    # List the runlog with associated metadata
    # @param uuid [String] The UUID of the entity.
    # @param get_entities_request [AppRunlogListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRunlogList, Integer, Hash)>] AppRunlogList data, response status code and response headers
    def apps_uuid_app_runlogs_list_post_with_http_info(uuid, get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_app_runlogs_list_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_app_runlogs_list_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_app_runlogs_list_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling AppsApi.apps_uuid_app_runlogs_list_post"
      end
      # resource path
      local_var_path = '/apps/{uuid}/app_runlogs/list'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AppRunlogList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_app_runlogs_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_app_runlogs_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Abort Runlog
    # Abort the given Runlog
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to abort
    # @param [Hash] opts the optional parameters
    # @return [AppRunlogResponse]
    def apps_uuid_app_runlogs_runlog_uuid_abort_post(uuid, runlog_uuid, opts = {})
      data, _status_code, _headers = apps_uuid_app_runlogs_runlog_uuid_abort_post_with_http_info(uuid, runlog_uuid, opts)
      data
    end

    # Abort Runlog
    # Abort the given Runlog
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to abort
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRunlogResponse, Integer, Hash)>] AppRunlogResponse data, response status code and response headers
    def apps_uuid_app_runlogs_runlog_uuid_abort_post_with_http_info(uuid, runlog_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_app_runlogs_runlog_uuid_abort_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_abort_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_abort_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'runlog_uuid' is set
      if @api_client.config.client_side_validation && runlog_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_abort_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && runlog_uuid !~ pattern
        fail ArgumentError, "invalid value for 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_abort_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}/app_runlogs/{runlog_uuid}/abort'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'runlog_uuid' + '}', CGI.escape(runlog_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppRunlogResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_app_runlogs_runlog_uuid_abort_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_app_runlogs_runlog_uuid_abort_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Runlog
    # Given a UUID, returns the runlog
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to get
    # @param [Hash] opts the optional parameters
    # @return [AppRunlogResponse]
    def apps_uuid_app_runlogs_runlog_uuid_get(uuid, runlog_uuid, opts = {})
      data, _status_code, _headers = apps_uuid_app_runlogs_runlog_uuid_get_with_http_info(uuid, runlog_uuid, opts)
      data
    end

    # Get Runlog
    # Given a UUID, returns the runlog
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRunlogResponse, Integer, Hash)>] AppRunlogResponse data, response status code and response headers
    def apps_uuid_app_runlogs_runlog_uuid_get_with_http_info(uuid, runlog_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_app_runlogs_runlog_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'runlog_uuid' is set
      if @api_client.config.client_side_validation && runlog_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && runlog_uuid !~ pattern
        fail ArgumentError, "invalid value for 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}/app_runlogs/{runlog_uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'runlog_uuid' + '}', CGI.escape(runlog_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppRunlogResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_app_runlogs_runlog_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_app_runlogs_runlog_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns output file for download
    # Returns output file for downlaod
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to get
    # @param [Hash] opts the optional parameters
    # @return [File]
    def apps_uuid_app_runlogs_runlog_uuid_output_download_get(uuid, runlog_uuid, opts = {})
      data, _status_code, _headers = apps_uuid_app_runlogs_runlog_uuid_output_download_get_with_http_info(uuid, runlog_uuid, opts)
      data
    end

    # Returns output file for download
    # Returns output file for downlaod
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def apps_uuid_app_runlogs_runlog_uuid_output_download_get_with_http_info(uuid, runlog_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_download_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_download_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_download_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'runlog_uuid' is set
      if @api_client.config.client_side_validation && runlog_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_download_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && runlog_uuid !~ pattern
        fail ArgumentError, "invalid value for 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_download_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}/app_runlogs/{runlog_uuid}/output/download'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'runlog_uuid' + '}', CGI.escape(runlog_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_app_runlogs_runlog_uuid_output_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns last 10 lines of output of runlog
    # Returns last ten lines of output
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to get
    # @param [Hash] opts the optional parameters
    # @return [AppRunlogOutputResponse]
    def apps_uuid_app_runlogs_runlog_uuid_output_get(uuid, runlog_uuid, opts = {})
      data, _status_code, _headers = apps_uuid_app_runlogs_runlog_uuid_output_get_with_http_info(uuid, runlog_uuid, opts)
      data
    end

    # Returns last 10 lines of output of runlog
    # Returns last ten lines of output
    # @param uuid [String] The UUID of the entity.
    # @param runlog_uuid [String] Uuid of runlog to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRunlogOutputResponse, Integer, Hash)>] AppRunlogOutputResponse data, response status code and response headers
    def apps_uuid_app_runlogs_runlog_uuid_output_get_with_http_info(uuid, runlog_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'runlog_uuid' is set
      if @api_client.config.client_side_validation && runlog_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && runlog_uuid !~ pattern
        fail ArgumentError, "invalid value for 'runlog_uuid' when calling AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}/app_runlogs/{runlog_uuid}/output'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'runlog_uuid' + '}', CGI.escape(runlog_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppRunlogOutputResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_app_runlogs_runlog_uuid_output_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_app_runlogs_runlog_uuid_output_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Application
    # Delete a Application given its UUID
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apps_uuid_delete(uuid, opts = {})
      apps_uuid_delete_with_http_info(uuid, opts)
      nil
    end

    # Delete Application
    # Delete a Application given its UUID
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apps_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Application
    # Given a UUID, returns a Application definition
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [AppIntentResponse]
    def apps_uuid_get(uuid, opts = {})
      data, _status_code, _headers = apps_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get Application
    # Given a UUID, returns a Application definition
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppIntentResponse, Integer, Hash)>] AppIntentResponse data, response status code and response headers
    def apps_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Application
    # Given a spec and Application UUID, update Application 
    # @param uuid [String] The UUID of the entity.
    # @param body [AppIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [AppIntentResponse]
    def apps_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = apps_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update Application
    # Given a spec and Application UUID, update Application 
    # @param uuid [String] The UUID of the entity.
    # @param body [AppIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppIntentResponse, Integer, Hash)>] AppIntentResponse data, response status code and response headers
    def apps_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AppsApi.apps_uuid_put"
      end
      # resource path
      local_var_path = '/apps/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AppIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Substrate Element
    # Given a UUID, returns the substrate element
    # @param uuid [String] The UUID of the entity.
    # @param substrate_uuid [String] Uuid of substrate element to get
    # @param [Hash] opts the optional parameters
    # @return [AppSubstrateResponse]
    def apps_uuid_substrates_substrate_uuid_get(uuid, substrate_uuid, opts = {})
      data, _status_code, _headers = apps_uuid_substrates_substrate_uuid_get_with_http_info(uuid, substrate_uuid, opts)
      data
    end

    # Get Substrate Element
    # Given a UUID, returns the substrate element
    # @param uuid [String] The UUID of the entity.
    # @param substrate_uuid [String] Uuid of substrate element to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppSubstrateResponse, Integer, Hash)>] AppSubstrateResponse data, response status code and response headers
    def apps_uuid_substrates_substrate_uuid_get_with_http_info(uuid, substrate_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_uuid_substrates_substrate_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling AppsApi.apps_uuid_substrates_substrate_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling AppsApi.apps_uuid_substrates_substrate_uuid_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'substrate_uuid' is set
      if @api_client.config.client_side_validation && substrate_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'substrate_uuid' when calling AppsApi.apps_uuid_substrates_substrate_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && substrate_uuid !~ pattern
        fail ArgumentError, "invalid value for 'substrate_uuid' when calling AppsApi.apps_uuid_substrates_substrate_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/apps/{uuid}/substrates/{substrate_uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'substrate_uuid' + '}', CGI.escape(substrate_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppSubstrateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AppsApi.apps_uuid_substrates_substrate_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_uuid_substrates_substrate_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
