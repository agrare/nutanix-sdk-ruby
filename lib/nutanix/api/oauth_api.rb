=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class OauthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # ADFS login url for idp
    # Oauth2
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def oauth_adfs_login_get(opts = {})
      oauth_adfs_login_get_with_http_info(opts)
      nil
    end

    # ADFS login url for idp
    # Oauth2
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def oauth_adfs_login_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_adfs_login_get ...'
      end
      # resource path
      local_var_path = '/oauth/adfs_login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_adfs_login_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_adfs_login_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to get authorization code from server
    # Authorization confirmation post url
    # @param client_id [String] Your client ID
    # @param response_type [String] Must be &#39;code&#39;
    # @param confirm [String] Must be &#39;yes&#39; or &#39;no&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Whitespace-separated list of scopes you application needs
    # @option opts [String] :redirect_uri This URL is used to provide user authorization if the user accepted access to the application or not 
    # @option opts [String] :state state parameter to prevent cross site origin attacks
    # @return [OauthStatus]
    def oauth_authorize_post(client_id, response_type, confirm, opts = {})
      data, _status_code, _headers = oauth_authorize_post_with_http_info(client_id, response_type, confirm, opts)
      data
    end

    # Used to get authorization code from server
    # Authorization confirmation post url
    # @param client_id [String] Your client ID
    # @param response_type [String] Must be &#39;code&#39;
    # @param confirm [String] Must be &#39;yes&#39; or &#39;no&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Whitespace-separated list of scopes you application needs
    # @option opts [String] :redirect_uri This URL is used to provide user authorization if the user accepted access to the application or not 
    # @option opts [String] :state state parameter to prevent cross site origin attacks
    # @return [Array<(OauthStatus, Integer, Hash)>] OauthStatus data, response status code and response headers
    def oauth_authorize_post_with_http_info(client_id, response_type, confirm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_authorize_post ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OauthApi.oauth_authorize_post"
      end
      # verify the required parameter 'response_type' is set
      if @api_client.config.client_side_validation && response_type.nil?
        fail ArgumentError, "Missing the required parameter 'response_type' when calling OauthApi.oauth_authorize_post"
      end
      # verify the required parameter 'confirm' is set
      if @api_client.config.client_side_validation && confirm.nil?
        fail ArgumentError, "Missing the required parameter 'confirm' when calling OauthApi.oauth_authorize_post"
      end
      # resource path
      local_var_path = '/oauth/authorize'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['client_id'] = client_id
      form_params['response_type'] = response_type
      form_params['confirm'] = confirm
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      form_params['redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?
      form_params['state'] = opts[:'state'] if !opts[:'state'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OauthStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_authorize_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_authorize_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Oauth client
    # Delete existing Oauth client information
    # @param client_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OauthClientResponse]
    def oauth_client_client_id_delete(client_id, opts = {})
      data, _status_code, _headers = oauth_client_client_id_delete_with_http_info(client_id, opts)
      data
    end

    # Delete an existing Oauth client
    # Delete existing Oauth client information
    # @param client_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OauthClientResponse, Integer, Hash)>] OauthClientResponse data, response status code and response headers
    def oauth_client_client_id_delete_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_client_client_id_delete ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OauthApi.oauth_client_client_id_delete"
      end
      # resource path
      local_var_path = '/oauth/client/{client_id}'.sub('{' + 'client_id' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OauthClientResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_client_client_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_client_client_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to fetch existing oauth client details
    # Get Oauth client information
    # @param client_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OauthClientResponse]
    def oauth_client_client_id_get(client_id, opts = {})
      data, _status_code, _headers = oauth_client_client_id_get_with_http_info(client_id, opts)
      data
    end

    # Used to fetch existing oauth client details
    # Get Oauth client information
    # @param client_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OauthClientResponse, Integer, Hash)>] OauthClientResponse data, response status code and response headers
    def oauth_client_client_id_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_client_client_id_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OauthApi.oauth_client_client_id_get"
      end
      # resource path
      local_var_path = '/oauth/client/{client_id}'.sub('{' + 'client_id' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OauthClientResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_client_client_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_client_client_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to update existing client details
    # Update Oauth client information
    # @param client_id [String] 
    # @param oauth_client [OauthClientInput] Oauth client details
    # @param [Hash] opts the optional parameters
    # @return [OauthClientResponse]
    def oauth_client_client_id_put(client_id, oauth_client, opts = {})
      data, _status_code, _headers = oauth_client_client_id_put_with_http_info(client_id, oauth_client, opts)
      data
    end

    # Used to update existing client details
    # Update Oauth client information
    # @param client_id [String] 
    # @param oauth_client [OauthClientInput] Oauth client details
    # @param [Hash] opts the optional parameters
    # @return [Array<(OauthClientResponse, Integer, Hash)>] OauthClientResponse data, response status code and response headers
    def oauth_client_client_id_put_with_http_info(client_id, oauth_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_client_client_id_put ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OauthApi.oauth_client_client_id_put"
      end
      # verify the required parameter 'oauth_client' is set
      if @api_client.config.client_side_validation && oauth_client.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_client' when calling OauthApi.oauth_client_client_id_put"
      end
      # resource path
      local_var_path = '/oauth/client/{client_id}'.sub('{' + 'client_id' + '}', CGI.escape(client_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(oauth_client)

      # return_type
      return_type = opts[:debug_return_type] || 'OauthClientResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_client_client_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_client_client_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all oauth client
    # Retrieves all oauth clients
    # @param get_entities_request [OauthClientListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [OauthClientList]
    def oauth_client_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = oauth_client_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Retrieves all oauth client
    # Retrieves all oauth clients
    # @param get_entities_request [OauthClientListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OauthClientList, Integer, Hash)>] OauthClientList data, response status code and response headers
    def oauth_client_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_client_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling OauthApi.oauth_client_list_post"
      end
      # resource path
      local_var_path = '/oauth/client/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OauthClientList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_client_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_client_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This is used to register new oauth client
    # Add new Oauth Client
    # @param oauth_client [OauthClientInput] Oauth client details
    # @param [Hash] opts the optional parameters
    # @return [OauthClientResponse]
    def oauth_client_post(oauth_client, opts = {})
      data, _status_code, _headers = oauth_client_post_with_http_info(oauth_client, opts)
      data
    end

    # This is used to register new oauth client
    # Add new Oauth Client
    # @param oauth_client [OauthClientInput] Oauth client details
    # @param [Hash] opts the optional parameters
    # @return [Array<(OauthClientResponse, Integer, Hash)>] OauthClientResponse data, response status code and response headers
    def oauth_client_post_with_http_info(oauth_client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_client_post ...'
      end
      # verify the required parameter 'oauth_client' is set
      if @api_client.config.client_side_validation && oauth_client.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_client' when calling OauthApi.oauth_client_post"
      end
      # resource path
      local_var_path = '/oauth/client'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(oauth_client)

      # return_type
      return_type = opts[:debug_return_type] || 'OauthClientResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_client_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_client_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This is used when the user is already authenticated and would like to create bearer tokens for distribution 
    # Generates an oauth token
    # @param oauth_generate_token_request [OauthGenerateTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OauthGenerateTokenResponse]
    def oauth_generate_token_post(oauth_generate_token_request, opts = {})
      data, _status_code, _headers = oauth_generate_token_post_with_http_info(oauth_generate_token_request, opts)
      data
    end

    # This is used when the user is already authenticated and would like to create bearer tokens for distribution 
    # Generates an oauth token
    # @param oauth_generate_token_request [OauthGenerateTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OauthGenerateTokenResponse, Integer, Hash)>] OauthGenerateTokenResponse data, response status code and response headers
    def oauth_generate_token_post_with_http_info(oauth_generate_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_generate_token_post ...'
      end
      # verify the required parameter 'oauth_generate_token_request' is set
      if @api_client.config.client_side_validation && oauth_generate_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'oauth_generate_token_request' when calling OauthApi.oauth_generate_token_post"
      end
      # resource path
      local_var_path = '/oauth/generate_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(oauth_generate_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OauthGenerateTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_generate_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_generate_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Oauth2 callback from IDP to intent gateway
    # Oauth2 callback from IDP to intent gateway
    # @param code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state 
    # @return [nil]
    def oauth_idp_callback_get(code, opts = {})
      oauth_idp_callback_get_with_http_info(code, opts)
      nil
    end

    # Oauth2 callback from IDP to intent gateway
    # Oauth2 callback from IDP to intent gateway
    # @param code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def oauth_idp_callback_get_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_idp_callback_get ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling OauthApi.oauth_idp_callback_get"
      end
      # resource path
      local_var_path = '/oauth/idp_callback'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = code
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_idp_callback_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_idp_callback_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Oauth2 login to idp
    # Oauth2
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def oauth_idp_login_get(opts = {})
      oauth_idp_login_get_with_http_info(opts)
      nil
    end

    # Oauth2 login to idp
    # Oauth2
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def oauth_idp_login_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_idp_login_get ...'
      end
      # resource path
      local_var_path = '/oauth/idp_login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_idp_login_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_idp_login_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke a token will cause the token to be removed from system Any subsequent authorization calls with the token will fail 
    # Revokes an oauth token
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token_type_hint  (default to 'access_token')
    # @return [OauthStatus]
    def oauth_revoke_token_post(token, opts = {})
      data, _status_code, _headers = oauth_revoke_token_post_with_http_info(token, opts)
      data
    end

    # Revoke a token will cause the token to be removed from system Any subsequent authorization calls with the token will fail 
    # Revokes an oauth token
    # @param token [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token_type_hint  (default to 'access_token')
    # @return [Array<(OauthStatus, Integer, Hash)>] OauthStatus data, response status code and response headers
    def oauth_revoke_token_post_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_revoke_token_post ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling OauthApi.oauth_revoke_token_post"
      end
      # resource path
      local_var_path = '/oauth/revoke_token'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'token_type_hint'] = opts[:'token_type_hint'] if !opts[:'token_type_hint'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OauthStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_revoke_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_revoke_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # This callback is used to get token from Oauth2 provider
    # Returns an access token
    # @param grant_type [String] Must be authorization_code or refresh_token
    # @param client_id [String] Your client ID
    # @param client_secret [String] Your client secret
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code authorization_code received in redirect_uri must for grant_type &#x3D; authorization_code 
    # @option opts [String] :refresh_token refresh_token received with previous token must for grant_type &#x3D; refresh_token 
    # @option opts [String] :state state parameter to prevent cross site origin attacks use only if passed in getting authorization 
    # @option opts [String] :redirect_uri redirect uri used to get authorization must for grant_type &#x3D; authorization_code 
    # @return [ProviderOauthToken]
    def oauth_token_post(grant_type, client_id, client_secret, opts = {})
      data, _status_code, _headers = oauth_token_post_with_http_info(grant_type, client_id, client_secret, opts)
      data
    end

    # This callback is used to get token from Oauth2 provider
    # Returns an access token
    # @param grant_type [String] Must be authorization_code or refresh_token
    # @param client_id [String] Your client ID
    # @param client_secret [String] Your client secret
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code authorization_code received in redirect_uri must for grant_type &#x3D; authorization_code 
    # @option opts [String] :refresh_token refresh_token received with previous token must for grant_type &#x3D; refresh_token 
    # @option opts [String] :state state parameter to prevent cross site origin attacks use only if passed in getting authorization 
    # @option opts [String] :redirect_uri redirect uri used to get authorization must for grant_type &#x3D; authorization_code 
    # @return [Array<(ProviderOauthToken, Integer, Hash)>] ProviderOauthToken data, response status code and response headers
    def oauth_token_post_with_http_info(grant_type, client_id, client_secret, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_token_post ...'
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling OauthApi.oauth_token_post"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OauthApi.oauth_token_post"
      end
      # verify the required parameter 'client_secret' is set
      if @api_client.config.client_side_validation && client_secret.nil?
        fail ArgumentError, "Missing the required parameter 'client_secret' when calling OauthApi.oauth_token_post"
      end
      # resource path
      local_var_path = '/oauth/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['grant_type'] = grant_type
      form_params['client_id'] = client_id
      form_params['client_secret'] = client_secret
      form_params['code'] = opts[:'code'] if !opts[:'code'].nil?
      form_params['refresh_token'] = opts[:'refresh_token'] if !opts[:'refresh_token'].nil?
      form_params['state'] = opts[:'state'] if !opts[:'state'].nil?
      form_params['redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProviderOauthToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
