=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class MhVmsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of existing VMs
    # This operation gets a list of VMs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [MhVmListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [MhVmListIntentResponse]
    def mh_vms_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = mh_vms_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing VMs
    # This operation gets a list of VMs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [MhVmListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MhVmListIntentResponse, Integer, Hash)>] MhVmListIntentResponse data, response status code and response headers
    def mh_vms_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MhVmsApi.mh_vms_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling MhVmsApi.mh_vms_list_post"
      end
      # resource path
      local_var_path = '/mh_vms/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MhVmListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MhVmsApi.mh_vms_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MhVmsApi#mh_vms_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new VM
    # This operation submits a request to create a new VM based on the input parameters. 
    # @param body [MhVmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [MhVmIntentResponse]
    def mh_vms_post(body, opts = {})
      data, _status_code, _headers = mh_vms_post_with_http_info(body, opts)
      data
    end

    # Create a new VM
    # This operation submits a request to create a new VM based on the input parameters. 
    # @param body [MhVmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MhVmIntentResponse, Integer, Hash)>] MhVmIntentResponse data, response status code and response headers
    def mh_vms_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MhVmsApi.mh_vms_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MhVmsApi.mh_vms_post"
      end
      # resource path
      local_var_path = '/mh_vms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MhVmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MhVmsApi.mh_vms_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MhVmsApi#mh_vms_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an existing VM
    # This operation gets an existing VM.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [MhVmIntentResponse]
    def mh_vms_uuid_get(uuid, opts = {})
      data, _status_code, _headers = mh_vms_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get an existing VM
    # This operation gets an existing VM.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MhVmIntentResponse, Integer, Hash)>] MhVmIntentResponse data, response status code and response headers
    def mh_vms_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MhVmsApi.mh_vms_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MhVmsApi.mh_vms_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MhVmsApi.mh_vms_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/mh_vms/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MhVmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MhVmsApi.mh_vms_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MhVmsApi#mh_vms_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing VM
    # This operation submits a request to update an existing VM based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MhVmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [MhVmIntentResponse]
    def mh_vms_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = mh_vms_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update an existing VM
    # This operation submits a request to update an existing VM based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MhVmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MhVmIntentResponse, Integer, Hash)>] MhVmIntentResponse data, response status code and response headers
    def mh_vms_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MhVmsApi.mh_vms_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MhVmsApi.mh_vms_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MhVmsApi.mh_vms_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MhVmsApi.mh_vms_uuid_put"
      end
      # resource path
      local_var_path = '/mh_vms/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MhVmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MhVmsApi.mh_vms_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MhVmsApi#mh_vms_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revert the VM to the given recovery point.
    # Submits a request to create a task handling the VM revert to a recovery point operation, returns a task reference. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MhVmRevertInput] 
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def mh_vms_uuid_revert_post(uuid, body, opts = {})
      data, _status_code, _headers = mh_vms_uuid_revert_post_with_http_info(uuid, body, opts)
      data
    end

    # Revert the VM to the given recovery point.
    # Submits a request to create a task handling the VM revert to a recovery point operation, returns a task reference. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MhVmRevertInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def mh_vms_uuid_revert_post_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MhVmsApi.mh_vms_uuid_revert_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MhVmsApi.mh_vms_uuid_revert_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MhVmsApi.mh_vms_uuid_revert_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MhVmsApi.mh_vms_uuid_revert_post"
      end
      # resource path
      local_var_path = '/mh_vms/{uuid}/revert'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MhVmsApi.mh_vms_uuid_revert_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MhVmsApi#mh_vms_uuid_revert_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM recovery point.
    # Submits a request to create a task handling the snapshot operation on the VM, returns a task reference. This creates a point in time recovery point. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [MhVmSnapshotInput] :body 
    # @return [ProceduralResponse]
    def mh_vms_uuid_snapshot_post(uuid, opts = {})
      data, _status_code, _headers = mh_vms_uuid_snapshot_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM recovery point.
    # Submits a request to create a task handling the snapshot operation on the VM, returns a task reference. This creates a point in time recovery point. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [MhVmSnapshotInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def mh_vms_uuid_snapshot_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MhVmsApi.mh_vms_uuid_snapshot_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MhVmsApi.mh_vms_uuid_snapshot_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MhVmsApi.mh_vms_uuid_snapshot_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/mh_vms/{uuid}/snapshot'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MhVmsApi.mh_vms_uuid_snapshot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MhVmsApi#mh_vms_uuid_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
