=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class BlueprintApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List the vms available for import
    # List the blueprint launch pending request with the filters - platform_type - account_uuid - platform_filters
    # @param body [BlueprintListMetadata] Request body
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def blueprints_brownfield_import_vms_list_post(body, opts = {})
      data, _status_code, _headers = blueprints_brownfield_import_vms_list_post_with_http_info(body, opts)
      data
    end

    # List the vms available for import
    # List the blueprint launch pending request with the filters - platform_type - account_uuid - platform_filters
    # @param body [BlueprintListMetadata] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def blueprints_brownfield_import_vms_list_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_brownfield_import_vms_list_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_brownfield_import_vms_list_post"
      end
      # resource path
      local_var_path = '/blueprints/brownfield_import/vms/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_brownfield_import_vms_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_brownfield_import_vms_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Blueprint from file
    # Creates a blueprint from uploaded file
    # @param body [Object] blueprint_file
    # @param [Hash] opts the optional parameters
    # @return [BlueprintUploadOutput]
    def blueprints_import_file_post(body, opts = {})
      data, _status_code, _headers = blueprints_import_file_post_with_http_info(body, opts)
      data
    end

    # Create Blueprint from file
    # Creates a blueprint from uploaded file
    # @param body [Object] blueprint_file
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintUploadOutput, Integer, Hash)>] BlueprintUploadOutput data, response status code and response headers
    def blueprints_import_file_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_import_file_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_import_file_post"
      end
      # resource path
      local_var_path = '/blueprints/import_file'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintUploadOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_import_file_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_import_file_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Blueprint using json
    # Given a spec creates a Blueprint with associated metadata 
    # @param body [BlueprintUploadCustomIntentInput] Request body
    # @param [Hash] opts the optional parameters
    # @return [BlueprintUploadOutput]
    def blueprints_import_json_post(body, opts = {})
      data, _status_code, _headers = blueprints_import_json_post_with_http_info(body, opts)
      data
    end

    # Create Blueprint using json
    # Given a spec creates a Blueprint with associated metadata 
    # @param body [BlueprintUploadCustomIntentInput] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintUploadOutput, Integer, Hash)>] BlueprintUploadOutput data, response status code and response headers
    def blueprints_import_json_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_import_json_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_import_json_post"
      end
      # resource path
      local_var_path = '/blueprints/import_json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintUploadOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_import_json_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_import_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the Blueprint
    # List the Blueprint with associated metadata
    # @param get_entities_request [BlueprintListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [BlueprintListIntentResponse]
    def blueprints_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = blueprints_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # List the Blueprint
    # List the Blueprint with associated metadata
    # @param get_entities_request [BlueprintListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintListIntentResponse, Integer, Hash)>] BlueprintListIntentResponse data, response status code and response headers
    def blueprints_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling BlueprintApi.blueprints_list_post"
      end
      # resource path
      local_var_path = '/blueprints/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Launch the marketplace item
    # Launch the given marketplace item 
    # @param body [BlueprintMarketplaceLaunchInput] 
    # @param [Hash] opts the optional parameters
    # @return [BlueprintMarketplaceLaunchResponse]
    def blueprints_marketplace_launch_post(body, opts = {})
      data, _status_code, _headers = blueprints_marketplace_launch_post_with_http_info(body, opts)
      data
    end

    # Launch the marketplace item
    # Launch the given marketplace item 
    # @param body [BlueprintMarketplaceLaunchInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintMarketplaceLaunchResponse, Integer, Hash)>] BlueprintMarketplaceLaunchResponse data, response status code and response headers
    def blueprints_marketplace_launch_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_marketplace_launch_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_marketplace_launch_post"
      end
      # resource path
      local_var_path = '/blueprints/marketplace_launch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintMarketplaceLaunchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_marketplace_launch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_marketplace_launch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the pending Blueprint launches
    # List the blueprint launch pending requests
    # @param get_entities_request [BlueprintListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [BlueprintPendingLaunchesListResponse]
    def blueprints_pending_launches_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = blueprints_pending_launches_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # List the pending Blueprint launches
    # List the blueprint launch pending requests
    # @param get_entities_request [BlueprintListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintPendingLaunchesListResponse, Integer, Hash)>] BlueprintPendingLaunchesListResponse data, response status code and response headers
    def blueprints_pending_launches_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_pending_launches_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling BlueprintApi.blueprints_pending_launches_list_post"
      end
      # resource path
      local_var_path = '/blueprints/pending_launches/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintPendingLaunchesListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_pending_launches_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_pending_launches_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Blueprint
    # Given a spec creates a Blueprint with associated metadata 
    # @param body [BlueprintCustomIntentInput] Request body
    # @param [Hash] opts the optional parameters
    # @return [BlueprintIntentResponse]
    def blueprints_post(body, opts = {})
      data, _status_code, _headers = blueprints_post_with_http_info(body, opts)
      data
    end

    # Create Blueprint
    # Given a spec creates a Blueprint with associated metadata 
    # @param body [BlueprintCustomIntentInput] Request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintIntentResponse, Integer, Hash)>] BlueprintIntentResponse data, response status code and response headers
    def blueprints_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_post"
      end
      # resource path
      local_var_path = '/blueprints'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone the blueprint
    # Clone the given blueprint 
    # @param uuid [String] Uuid of blueprint to be cloned
    # @param body [BlueprintCloneInput] 
    # @param [Hash] opts the optional parameters
    # @return [BlueprintCloneResponse]
    def blueprints_uuid_clone_post(uuid, body, opts = {})
      data, _status_code, _headers = blueprints_uuid_clone_post_with_http_info(uuid, body, opts)
      data
    end

    # Clone the blueprint
    # Clone the given blueprint 
    # @param uuid [String] Uuid of blueprint to be cloned
    # @param body [BlueprintCloneInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintCloneResponse, Integer, Hash)>] BlueprintCloneResponse data, response status code and response headers
    def blueprints_uuid_clone_post_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_clone_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_clone_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_clone_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_uuid_clone_post"
      end
      # resource path
      local_var_path = '/blueprints/{uuid}/clone'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintCloneResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_clone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_clone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Blueprint
    # Delete a Blueprint given its UUID
    # @param uuid [String] uuid of the blueprint to be deleted
    # @param [Hash] opts the optional parameters
    # @return [BlueprintIntentResponse]
    def blueprints_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = blueprints_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete Blueprint
    # Delete a Blueprint given its UUID
    # @param uuid [String] uuid of the blueprint to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintIntentResponse, Integer, Hash)>] BlueprintIntentResponse data, response status code and response headers
    def blueprints_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/blueprints/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download blueprint file
    # Given a UUID, returns a Blueprint file
    # @param uuid [String] uuid of Blueprint to get
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def blueprints_uuid_export_file_get(uuid, opts = {})
      data, _status_code, _headers = blueprints_uuid_export_file_get_with_http_info(uuid, opts)
      data
    end

    # Download blueprint file
    # Given a UUID, returns a Blueprint file
    # @param uuid [String] uuid of Blueprint to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def blueprints_uuid_export_file_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_export_file_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_export_file_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_export_file_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/blueprints/{uuid}/export_file'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_export_file_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_export_file_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Blueprint in json format
    # Given a UUID, returns a Blueprint definition
    # @param uuid [String] uuid of Blueprint to get
    # @param [Hash] opts the optional parameters
    # @return [BlueprintDownloadIntentResponse]
    def blueprints_uuid_export_json_get(uuid, opts = {})
      data, _status_code, _headers = blueprints_uuid_export_json_get_with_http_info(uuid, opts)
      data
    end

    # Get Blueprint in json format
    # Given a UUID, returns a Blueprint definition
    # @param uuid [String] uuid of Blueprint to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintDownloadIntentResponse, Integer, Hash)>] BlueprintDownloadIntentResponse data, response status code and response headers
    def blueprints_uuid_export_json_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_export_json_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_export_json_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_export_json_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/blueprints/{uuid}/export_json'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintDownloadIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_export_json_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_export_json_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Blueprint
    # Given a UUID, returns a Blueprint definition
    # @param uuid [String] uuid of Blueprint to get
    # @param [Hash] opts the optional parameters
    # @return [BlueprintIntentResponse]
    def blueprints_uuid_get(uuid, opts = {})
      data, _status_code, _headers = blueprints_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get Blueprint
    # Given a UUID, returns a Blueprint definition
    # @param uuid [String] uuid of Blueprint to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintIntentResponse, Integer, Hash)>] BlueprintIntentResponse data, response status code and response headers
    def blueprints_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/blueprints/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Launch the blueprint
    # Launch the given blueprint 
    # @param uuid [String] Uuid of blueprint to be launched
    # @param body [BlueprintLaunchInput] 
    # @param [Hash] opts the optional parameters
    # @return [BlueprintLaunchResponse]
    def blueprints_uuid_launch_post(uuid, body, opts = {})
      data, _status_code, _headers = blueprints_uuid_launch_post_with_http_info(uuid, body, opts)
      data
    end

    # Launch the blueprint
    # Launch the given blueprint 
    # @param uuid [String] Uuid of blueprint to be launched
    # @param body [BlueprintLaunchInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintLaunchResponse, Integer, Hash)>] BlueprintLaunchResponse data, response status code and response headers
    def blueprints_uuid_launch_post_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_launch_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_launch_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_launch_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_uuid_launch_post"
      end
      # resource path
      local_var_path = '/blueprints/{uuid}/launch'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintLaunchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_launch_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_launch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the pending launch details
    # Get the details of the pending launch with the given uuid
    # @param uuid [String] uuid of Blueprint to get
    # @param launched_uuid [String] Launched uuid of blueprint
    # @param [Hash] opts the optional parameters
    # @return [BlueprintPendingLaunchesResource]
    def blueprints_uuid_pending_launches_launched_uuid_get(uuid, launched_uuid, opts = {})
      data, _status_code, _headers = blueprints_uuid_pending_launches_launched_uuid_get_with_http_info(uuid, launched_uuid, opts)
      data
    end

    # Get the pending launch details
    # Get the details of the pending launch with the given uuid
    # @param uuid [String] uuid of Blueprint to get
    # @param launched_uuid [String] Launched uuid of blueprint
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintPendingLaunchesResource, Integer, Hash)>] BlueprintPendingLaunchesResource data, response status code and response headers
    def blueprints_uuid_pending_launches_launched_uuid_get_with_http_info(uuid, launched_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_pending_launches_launched_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_pending_launches_launched_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_pending_launches_launched_uuid_get, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'launched_uuid' is set
      if @api_client.config.client_side_validation && launched_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'launched_uuid' when calling BlueprintApi.blueprints_uuid_pending_launches_launched_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && launched_uuid !~ pattern
        fail ArgumentError, "invalid value for 'launched_uuid' when calling BlueprintApi.blueprints_uuid_pending_launches_launched_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/blueprints/{uuid}/pending_launches/{launched_uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'launched_uuid' + '}', CGI.escape(launched_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintPendingLaunchesResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_pending_launches_launched_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_pending_launches_launched_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Blueprint
    # Given a spec and Blueprint UUID, update Blueprint 
    # @param uuid [String] uuid of blueprint to be updated
    # @param body [BlueprintCustomIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [BlueprintIntentResponse]
    def blueprints_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = blueprints_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update Blueprint
    # Given a spec and Blueprint UUID, update Blueprint 
    # @param uuid [String] uuid of blueprint to be updated
    # @param body [BlueprintCustomIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlueprintIntentResponse, Integer, Hash)>] BlueprintIntentResponse data, response status code and response headers
    def blueprints_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlueprintApi.blueprints_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling BlueprintApi.blueprints_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling BlueprintApi.blueprints_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlueprintApi.blueprints_uuid_put"
      end
      # resource path
      local_var_path = '/blueprints/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BlueprintIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BlueprintApi.blueprints_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlueprintApi#blueprints_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
