=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class RemoteConnectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Proxies request to remote AZ
    # Proxies request to remote cluster, uses remote connection to call endpoint on remote cluster 
    # @param method [String] HTTP method to call
    # @param url_path [String] URL path to call on remote cluster
    # @param [Hash] opts the optional parameters
    # @option opts [String] :az_name Availability Zone Name
    # @option opts [String] :content_type content type for the call
    # @option opts [Hash<String, Object>] :az_proxy_body 
    # @return [nil]
    def az_proxy_post(method, url_path, opts = {})
      az_proxy_post_with_http_info(method, url_path, opts)
      nil
    end

    # Proxies request to remote AZ
    # Proxies request to remote cluster, uses remote connection to call endpoint on remote cluster 
    # @param method [String] HTTP method to call
    # @param url_path [String] URL path to call on remote cluster
    # @param [Hash] opts the optional parameters
    # @option opts [String] :az_name Availability Zone Name
    # @option opts [String] :content_type content type for the call
    # @option opts [Hash<String, Object>] :az_proxy_body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def az_proxy_post_with_http_info(method, url_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.az_proxy_post ...'
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling RemoteConnectionsApi.az_proxy_post"
      end
      # verify the required parameter 'url_path' is set
      if @api_client.config.client_side_validation && url_path.nil?
        fail ArgumentError, "Missing the required parameter 'url_path' when calling RemoteConnectionsApi.az_proxy_post"
      end
      # resource path
      local_var_path = '/az_proxy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'method'] = method
      query_params[:'url_path'] = url_path
      query_params[:'az_name'] = opts[:'az_name'] if !opts[:'az_name'].nil?
      query_params[:'content_type'] = opts[:'content_type'] if !opts[:'content_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'az_proxy_body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.az_proxy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#az_proxy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Proxies request to remote cluster
    # Proxies request to remote cluster, uses remote connection to call endpoint on remote cluster. 
    # @param method [String] HTTP method to call
    # @param url_path [String] URL path to call on remote cluster
    # @param [Hash] opts the optional parameters
    # @option opts [String] :az_name One of the availability zones name of Xi portal.
    # @option opts [String] :az_physical_uuid One of the availability zones uuid of Xi portal.
    # @option opts [String] :remote_cluster_uuid Cluster uuid of remote PC or PE cluster.
    # @option opts [String] :content_type content type for the call
    # @option opts [String] :kind entity kind e.g. vm, network
    # @option opts [String] :entity_uuid The UUID of the entity.
    # @option opts [String] :tenant_uuid The UUID of the tenant.
    # @option opts [Integer] :timeout_ms Additional timeout in milliseconds for fanout calls.
    # @option opts [Hash<String, Object>] :fanout_proxy_body 
    # @return [nil]
    def fanout_proxy_post(method, url_path, opts = {})
      fanout_proxy_post_with_http_info(method, url_path, opts)
      nil
    end

    # Proxies request to remote cluster
    # Proxies request to remote cluster, uses remote connection to call endpoint on remote cluster. 
    # @param method [String] HTTP method to call
    # @param url_path [String] URL path to call on remote cluster
    # @param [Hash] opts the optional parameters
    # @option opts [String] :az_name One of the availability zones name of Xi portal.
    # @option opts [String] :az_physical_uuid One of the availability zones uuid of Xi portal.
    # @option opts [String] :remote_cluster_uuid Cluster uuid of remote PC or PE cluster.
    # @option opts [String] :content_type content type for the call
    # @option opts [String] :kind entity kind e.g. vm, network
    # @option opts [String] :entity_uuid The UUID of the entity.
    # @option opts [String] :tenant_uuid The UUID of the tenant.
    # @option opts [Integer] :timeout_ms Additional timeout in milliseconds for fanout calls.
    # @option opts [Hash<String, Object>] :fanout_proxy_body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def fanout_proxy_post_with_http_info(method, url_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.fanout_proxy_post ...'
      end
      # verify the required parameter 'method' is set
      if @api_client.config.client_side_validation && method.nil?
        fail ArgumentError, "Missing the required parameter 'method' when calling RemoteConnectionsApi.fanout_proxy_post"
      end
      # verify the required parameter 'url_path' is set
      if @api_client.config.client_side_validation && url_path.nil?
        fail ArgumentError, "Missing the required parameter 'url_path' when calling RemoteConnectionsApi.fanout_proxy_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && !opts[:'az_physical_uuid'].nil? && opts[:'az_physical_uuid'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"az_physical_uuid\"]' when calling RemoteConnectionsApi.fanout_proxy_post, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && !opts[:'remote_cluster_uuid'].nil? && opts[:'remote_cluster_uuid'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"remote_cluster_uuid\"]' when calling RemoteConnectionsApi.fanout_proxy_post, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && !opts[:'entity_uuid'].nil? && opts[:'entity_uuid'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"entity_uuid\"]' when calling RemoteConnectionsApi.fanout_proxy_post, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && !opts[:'tenant_uuid'].nil? && opts[:'tenant_uuid'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"tenant_uuid\"]' when calling RemoteConnectionsApi.fanout_proxy_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/fanout_proxy'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'method'] = method
      query_params[:'url_path'] = url_path
      query_params[:'az_name'] = opts[:'az_name'] if !opts[:'az_name'].nil?
      query_params[:'az_physical_uuid'] = opts[:'az_physical_uuid'] if !opts[:'az_physical_uuid'].nil?
      query_params[:'remote_cluster_uuid'] = opts[:'remote_cluster_uuid'] if !opts[:'remote_cluster_uuid'].nil?
      query_params[:'content_type'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'entity_uuid'] = opts[:'entity_uuid'] if !opts[:'entity_uuid'].nil?
      query_params[:'tenant_uuid'] = opts[:'tenant_uuid'] if !opts[:'tenant_uuid'].nil?
      query_params[:'timeout_ms'] = opts[:'timeout_ms'] if !opts[:'timeout_ms'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'fanout_proxy_body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.fanout_proxy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#fanout_proxy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of remote connections
    # Retrieve list of remote connections
    # @param [Hash] opts the optional parameters
    # @option opts [RemoteConnectionListMetadata] :get_entities_request A remote connection object
    # @return [RemoteConnectionListIntentResponse]
    def remote_connections_list_post(opts = {})
      data, _status_code, _headers = remote_connections_list_post_with_http_info(opts)
      data
    end

    # Get list of remote connections
    # Retrieve list of remote connections
    # @param [Hash] opts the optional parameters
    # @option opts [RemoteConnectionListMetadata] :get_entities_request A remote connection object
    # @return [Array<(RemoteConnectionListIntentResponse, Integer, Hash)>] RemoteConnectionListIntentResponse data, response status code and response headers
    def remote_connections_list_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.remote_connections_list_post ...'
      end
      # resource path
      local_var_path = '/remote_connections/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_entities_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConnectionListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.remote_connections_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#remote_connections_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a remote connection
    # Creates a remote connection
    # @param body [RemoteConnectionIntentInput] Remote connection details
    # @param [Hash] opts the optional parameters
    # @return [RemoteConnectionIntentResponse]
    def remote_connections_post(body, opts = {})
      data, _status_code, _headers = remote_connections_post_with_http_info(body, opts)
      data
    end

    # Creates a remote connection
    # Creates a remote connection
    # @param body [RemoteConnectionIntentInput] Remote connection details
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConnectionIntentResponse, Integer, Hash)>] RemoteConnectionIntentResponse data, response status code and response headers
    def remote_connections_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.remote_connections_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RemoteConnectionsApi.remote_connections_post"
      end
      # resource path
      local_var_path = '/remote_connections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.remote_connections_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#remote_connections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing remote connection
    # Delete existing remote connection and its information
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [RemoteConnectionIntentResponse]
    def remote_connections_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = remote_connections_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete an existing remote connection
    # Delete existing remote connection and its information
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConnectionIntentResponse, Integer, Hash)>] RemoteConnectionIntentResponse data, response status code and response headers
    def remote_connections_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.remote_connections_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling RemoteConnectionsApi.remote_connections_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling RemoteConnectionsApi.remote_connections_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/remote_connections/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.remote_connections_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#remote_connections_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to fetch remote connection details
    # Get remote connection
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [RemoteConnectionIntentResponse]
    def remote_connections_uuid_get(uuid, opts = {})
      data, _status_code, _headers = remote_connections_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Used to fetch remote connection details
    # Get remote connection
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoteConnectionIntentResponse, Integer, Hash)>] RemoteConnectionIntentResponse data, response status code and response headers
    def remote_connections_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.remote_connections_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling RemoteConnectionsApi.remote_connections_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling RemoteConnectionsApi.remote_connections_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/remote_connections/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.remote_connections_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#remote_connections_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to update remote connection details
    # Update remote connection
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [RemoteConnectionIntentInput] :body Remote connection details
    # @return [RemoteConnectionIntentResponse]
    def remote_connections_uuid_put(uuid, opts = {})
      data, _status_code, _headers = remote_connections_uuid_put_with_http_info(uuid, opts)
      data
    end

    # Used to update remote connection details
    # Update remote connection
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [RemoteConnectionIntentInput] :body Remote connection details
    # @return [Array<(RemoteConnectionIntentResponse, Integer, Hash)>] RemoteConnectionIntentResponse data, response status code and response headers
    def remote_connections_uuid_put_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.remote_connections_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling RemoteConnectionsApi.remote_connections_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling RemoteConnectionsApi.remote_connections_uuid_put, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/remote_connections/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'RemoteConnectionIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.remote_connections_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#remote_connections_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute Remote RPC
    # Execute Remote RPC
    # @param service_name [String] Name of the service whose RPC needs to be invoked.
    # @param port [Integer] Port at which the service is running
    # @param payload [RemoteRpcRequestInput] RPC payload.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :timeout_ms timeout in milliseconds.
    # @option opts [String] :base_url base url for rpc call.
    # @return [nil]
    def remote_rpc_request_post(service_name, port, payload, opts = {})
      remote_rpc_request_post_with_http_info(service_name, port, payload, opts)
      nil
    end

    # Execute Remote RPC
    # Execute Remote RPC
    # @param service_name [String] Name of the service whose RPC needs to be invoked.
    # @param port [Integer] Port at which the service is running
    # @param payload [RemoteRpcRequestInput] RPC payload.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :timeout_ms timeout in milliseconds.
    # @option opts [String] :base_url base url for rpc call.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remote_rpc_request_post_with_http_info(service_name, port, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemoteConnectionsApi.remote_rpc_request_post ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling RemoteConnectionsApi.remote_rpc_request_post"
      end
      # verify the required parameter 'port' is set
      if @api_client.config.client_side_validation && port.nil?
        fail ArgumentError, "Missing the required parameter 'port' when calling RemoteConnectionsApi.remote_rpc_request_post"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling RemoteConnectionsApi.remote_rpc_request_post"
      end
      # resource path
      local_var_path = '/remote_rpc_request'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'service_name'] = service_name
      query_params[:'port'] = port
      query_params[:'timeout_ms'] = opts[:'timeout_ms'] if !opts[:'timeout_ms'].nil?
      query_params[:'base_url'] = opts[:'base_url'] if !opts[:'base_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payload)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"RemoteConnectionsApi.remote_rpc_request_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemoteConnectionsApi#remote_rpc_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
