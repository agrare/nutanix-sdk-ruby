=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class MarketplaceItemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve configuration for Nutanix apps
    # Retrieve configuration for whether Nutanix apps have been enabled or disabled 
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemConfig]
    def marketplace_items_config_get(opts = {})
      data, _status_code, _headers = marketplace_items_config_get_with_http_info(opts)
      data
    end

    # Retrieve configuration for Nutanix apps
    # Retrieve configuration for whether Nutanix apps have been enabled or disabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemConfig, Integer, Hash)>] MarketplaceItemConfig data, response status code and response headers
    def marketplace_items_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_config_get ...'
      end
      # resource path
      local_var_path = '/marketplace_items/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_config_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable the Nutanix apps in the marketplace
    # Enable or disable the Nutanix apps in the marketplace
    # @param body [MarketplaceItemConfig] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def marketplace_items_config_post(body, opts = {})
      marketplace_items_config_post_with_http_info(body, opts)
      nil
    end

    # Enable or disable the Nutanix apps in the marketplace
    # Enable or disable the Nutanix apps in the marketplace
    # @param body [MarketplaceItemConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def marketplace_items_config_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_config_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceItemApi.marketplace_items_config_post"
      end
      # resource path
      local_var_path = '/marketplace_items/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_config_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of existing marketplace items
    # This operation gets a list of marketplace items, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [MarketplaceItemListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemListIntentResponse]
    def marketplace_items_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = marketplace_items_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing marketplace items
    # This operation gets a list of marketplace items, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [MarketplaceItemListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemListIntentResponse, Integer, Hash)>] MarketplaceItemListIntentResponse data, response status code and response headers
    def marketplace_items_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling MarketplaceItemApi.marketplace_items_list_post"
      end
      # resource path
      local_var_path = '/marketplace_items/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new marketplace item
    # This operation submits a request to create a new marketplace item based on the input parameters. 
    # @param body [MarketplaceItemIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemIntentResponse]
    def marketplace_items_post(body, opts = {})
      data, _status_code, _headers = marketplace_items_post_with_http_info(body, opts)
      data
    end

    # Create a new marketplace item
    # This operation submits a request to create a new marketplace item based on the input parameters. 
    # @param body [MarketplaceItemIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemIntentResponse, Integer, Hash)>] MarketplaceItemIntentResponse data, response status code and response headers
    def marketplace_items_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceItemApi.marketplace_items_post"
      end
      # resource path
      local_var_path = '/marketplace_items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Marketplace item from the given input.
    # Helper that translates the given input spec into the equivalent Marketplace item. This is then persisted in the system. NOTE, the result of this operation is the uuid of the created marketplace item. 
    # @param body [MarketplaceItemRenderInput] 
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemRenderOutput]
    def marketplace_items_render_post(body, opts = {})
      data, _status_code, _headers = marketplace_items_render_post_with_http_info(body, opts)
      data
    end

    # Create a Marketplace item from the given input.
    # Helper that translates the given input spec into the equivalent Marketplace item. This is then persisted in the system. NOTE, the result of this operation is the uuid of the created marketplace item. 
    # @param body [MarketplaceItemRenderInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemRenderOutput, Integer, Hash)>] MarketplaceItemRenderOutput data, response status code and response headers
    def marketplace_items_render_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_render_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceItemApi.marketplace_items_render_post"
      end
      # resource path
      local_var_path = '/marketplace_items/render'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemRenderOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_render_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_render_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing marketplace item
    # This operation submits a request to delete a existing marketplace item.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemIntentResponse]
    def marketplace_items_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = marketplace_items_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete a existing marketplace item
    # This operation submits a request to delete a existing marketplace item.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemIntentResponse, Integer, Hash)>] MarketplaceItemIntentResponse data, response status code and response headers
    def marketplace_items_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MarketplaceItemApi.marketplace_items_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MarketplaceItemApi.marketplace_items_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/marketplace_items/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing marketplace item
    # This operation gets a existing marketplace item.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemIntentResponse]
    def marketplace_items_uuid_get(uuid, opts = {})
      data, _status_code, _headers = marketplace_items_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing marketplace item
    # This operation gets a existing marketplace item.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemIntentResponse, Integer, Hash)>] MarketplaceItemIntentResponse data, response status code and response headers
    def marketplace_items_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MarketplaceItemApi.marketplace_items_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MarketplaceItemApi.marketplace_items_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/marketplace_items/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing marketplace item
    # This operation submits a request to update a existing marketplace item based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MarketplaceItemIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceItemIntentResponse]
    def marketplace_items_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = marketplace_items_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a existing marketplace item
    # This operation submits a request to update a existing marketplace item based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [MarketplaceItemIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceItemIntentResponse, Integer, Hash)>] MarketplaceItemIntentResponse data, response status code and response headers
    def marketplace_items_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceItemApi.marketplace_items_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling MarketplaceItemApi.marketplace_items_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling MarketplaceItemApi.marketplace_items_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceItemApi.marketplace_items_uuid_put"
      end
      # resource path
      local_var_path = '/marketplace_items/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MarketplaceItemIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MarketplaceItemApi.marketplace_items_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceItemApi#marketplace_items_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
