=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class VmsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Capability information for VMs.
    # Get capability information for VMs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the capability
    # @return [CapabilityResponse]
    def vms_capabilities_get(opts = {})
      data, _status_code, _headers = vms_capabilities_get_with_http_info(opts)
      data
    end

    # Capability information for VMs.
    # Get capability information for VMs.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the capability
    # @return [Array<(CapabilityResponse, Integer, Hash)>] CapabilityResponse data, response status code and response headers
    def vms_capabilities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_capabilities_get ...'
      end
      # resource path
      local_var_path = '/vms/capabilities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CapabilityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_capabilities_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_capabilities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns metadata for /vms/capabilities endpoint.
    # List of dictionaries containing supported capability names and their descriptions for vms.
    # @param [Hash] opts the optional parameters
    # @return [Array<CapabilityInformation>]
    def vms_capabilities_options(opts = {})
      data, _status_code, _headers = vms_capabilities_options_with_http_info(opts)
      data
    end

    # Returns metadata for /vms/capabilities endpoint.
    # List of dictionaries containing supported capability names and their descriptions for vms.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CapabilityInformation>, Integer, Hash)>] Array<CapabilityInformation> data, response status code and response headers
    def vms_capabilities_options_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_capabilities_options ...'
      end
      # resource path
      local_var_path = '/vms/capabilities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CapabilityInformation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_capabilities_options",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_capabilities_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of existing VMs
    # This operation gets a list of VMs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [VmListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [VmListIntentResponse]
    def vms_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = vms_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing VMs
    # This operation gets a list of VMs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [VmListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VmListIntentResponse, Integer, Hash)>] VmListIntentResponse data, response status code and response headers
    def vms_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling VmsApi.vms_list_post"
      end
      # resource path
      local_var_path = '/vms/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VmListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new VM
    # This operation submits a request to create a new VM based on the input parameters. 
    # @param body [VmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [VmIntentResponse]
    def vms_post(body, opts = {})
      data, _status_code, _headers = vms_post_with_http_info(body, opts)
      data
    end

    # Create a new VM
    # This operation submits a request to create a new VM based on the input parameters. 
    # @param body [VmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VmIntentResponse, Integer, Hash)>] VmIntentResponse data, response status code and response headers
    def vms_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VmsApi.vms_post"
      end
      # resource path
      local_var_path = '/vms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM acpi_reboot request.
    # Creates a VM acpi_reboot request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [VmSetPowerStateResponse]
    def vms_uuid_acpi_reboot_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_acpi_reboot_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM acpi_reboot request.
    # Creates a VM acpi_reboot request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [Array<(VmSetPowerStateResponse, Integer, Hash)>] VmSetPowerStateResponse data, response status code and response headers
    def vms_uuid_acpi_reboot_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_acpi_reboot_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_acpi_reboot_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_acpi_reboot_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/acpi_reboot'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VmSetPowerStateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_acpi_reboot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_acpi_reboot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM acpi_shutdown request.
    # Creates a VM acpi_shutdown request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [VmSetPowerStateResponse]
    def vms_uuid_acpi_shutdown_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_acpi_shutdown_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM acpi_shutdown request.
    # Creates a VM acpi_shutdown request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [Array<(VmSetPowerStateResponse, Integer, Hash)>] VmSetPowerStateResponse data, response status code and response headers
    def vms_uuid_acpi_shutdown_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_acpi_shutdown_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_acpi_shutdown_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_acpi_shutdown_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/acpi_shutdown'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VmSetPowerStateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_acpi_shutdown_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_acpi_shutdown_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone a vm.
    # Submits a request to create a task handling vm clone operation, returns a task reference. This creates a new vm by cloning the current vm. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmCloneInput] :body 
    # @return [ProceduralResponse]
    def vms_uuid_clone_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_clone_post_with_http_info(uuid, opts)
      data
    end

    # Clone a vm.
    # Submits a request to create a task handling vm clone operation, returns a task reference. This creates a new vm by cloning the current vm. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmCloneInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_clone_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_clone_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_clone_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_clone_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/clone'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_clone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_clone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing VM
    # This operation submits a request to delete an existing VM.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [VmIntentResponse]
    def vms_uuid_delete(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_delete_with_http_info(uuid, opts)
      data
    end

    # Delete an existing VM
    # This operation submits a request to delete an existing VM.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VmIntentResponse, Integer, Hash)>] VmIntentResponse data, response status code and response headers
    def vms_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an OVA object.
    # Submits a request to create a task handling OVA create operation, returns a task reference. This will export VM and create an OVA object for it. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmExportInput] :body 
    # @return [ProceduralResponse]
    def vms_uuid_export_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_export_post_with_http_info(uuid, opts)
      data
    end

    # Create an OVA object.
    # Submits a request to create a task handling OVA create operation, returns a task reference. This will export VM and create an OVA object for it. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmExportInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_export_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_export_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_export_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_export_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/export'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an existing VM
    # This operation gets an existing VM.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [VmIntentResponse]
    def vms_uuid_get(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get an existing VM
    # This operation gets an existing VM.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VmIntentResponse, Integer, Hash)>] VmIntentResponse data, response status code and response headers
    def vms_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM guest_reboot request.
    # Creates a VM guest_reboot request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [VmSetPowerStateResponse]
    def vms_uuid_guest_reboot_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_guest_reboot_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM guest_reboot request.
    # Creates a VM guest_reboot request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [Array<(VmSetPowerStateResponse, Integer, Hash)>] VmSetPowerStateResponse data, response status code and response headers
    def vms_uuid_guest_reboot_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_guest_reboot_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_guest_reboot_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_guest_reboot_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/guest_reboot'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VmSetPowerStateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_guest_reboot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_guest_reboot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM guest_shutdown request.
    # Creates a VM guest_shutdown request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [VmSetPowerStateResponse]
    def vms_uuid_guest_shutdown_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_guest_shutdown_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM guest_shutdown request.
    # Creates a VM guest_shutdown request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [Array<(VmSetPowerStateResponse, Integer, Hash)>] VmSetPowerStateResponse data, response status code and response headers
    def vms_uuid_guest_shutdown_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_guest_shutdown_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_guest_shutdown_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_guest_shutdown_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/guest_shutdown'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VmSetPowerStateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_guest_shutdown_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_guest_shutdown_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrate disks to a different container
    # API to migrate the VM's selected disks to the specified container 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [MigrateDisksInput] :body 
    # @return [ProceduralResponse]
    def vms_uuid_migrate_disks_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_migrate_disks_post_with_http_info(uuid, opts)
      data
    end

    # Migrate disks to a different container
    # API to migrate the VM&#39;s selected disks to the specified container 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [MigrateDisksInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_migrate_disks_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_migrate_disks_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_migrate_disks_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_migrate_disks_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/migrate_disks'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_migrate_disks_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_migrate_disks_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause the replication for the VM.
    # API to pause replication for a given VM protected using sync protection policy. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vms_uuid_pause_replication_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_pause_replication_post_with_http_info(uuid, opts)
      data
    end

    # Pause the replication for the VM.
    # API to pause replication for a given VM protected using sync protection policy. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_pause_replication_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_pause_replication_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_pause_replication_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_pause_replication_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/pause_replication'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_pause_replication_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_pause_replication_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM power_cycle request.
    # Creates a VM power_cycle request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [VmSetPowerStateResponse]
    def vms_uuid_power_cycle_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_power_cycle_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM power_cycle request.
    # Creates a VM power_cycle request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [Array<(VmSetPowerStateResponse, Integer, Hash)>] VmSetPowerStateResponse data, response status code and response headers
    def vms_uuid_power_cycle_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_power_cycle_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_power_cycle_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_power_cycle_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/power_cycle'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VmSetPowerStateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_power_cycle_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_power_cycle_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing VM
    # This operation submits a request to update an existing VM based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [VmIntentResponse]
    def vms_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = vms_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update an existing VM
    # This operation submits a request to update an existing VM based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VmIntentResponse, Integer, Hash)>] VmIntentResponse data, response status code and response headers
    def vms_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VmsApi.vms_uuid_put"
      end
      # resource path
      local_var_path = '/vms/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VmIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM reset request.
    # Creates a VM reset request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [VmSetPowerStateResponse]
    def vms_uuid_reset_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_reset_post_with_http_info(uuid, opts)
      data
    end

    # Create a VM reset request.
    # Creates a VM reset request task.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSetPowerStateInput] :body 
    # @return [Array<(VmSetPowerStateResponse, Integer, Hash)>] VmSetPowerStateResponse data, response status code and response headers
    def vms_uuid_reset_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_reset_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_reset_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_reset_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/reset'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'VmSetPowerStateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_reset_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume the replication for the VM.
    # API to resume replication for a given VM protected using sync protection policy. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vms_uuid_resume_replication_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_resume_replication_post_with_http_info(uuid, opts)
      data
    end

    # Resume the replication for the VM.
    # API to resume replication for a given VM protected using sync protection policy. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_resume_replication_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_resume_replication_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_resume_replication_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_resume_replication_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/resume_replication'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_resume_replication_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_resume_replication_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revert the vm to the given recovery point.
    # Submits a request to create a task handling the vm revert to a recovery point operation, returns a task reference. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmRevertInput] 
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vms_uuid_revert_post(uuid, body, opts = {})
      data, _status_code, _headers = vms_uuid_revert_post_with_http_info(uuid, body, opts)
      data
    end

    # Revert the vm to the given recovery point.
    # Submits a request to create a task handling the vm revert to a recovery point operation, returns a task reference. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmRevertInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_revert_post_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_revert_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_revert_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_revert_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VmsApi.vms_uuid_revert_post"
      end
      # resource path
      local_var_path = '/vms/{uuid}/revert'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_revert_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_revert_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a vm recovery point.
    # Submits a request to create a task handling the snapshot operation on the vm, returns a task reference. This creates a point in time recovery point. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSnapshotInput] :body 
    # @return [ProceduralResponse]
    def vms_uuid_snapshot_post(uuid, opts = {})
      data, _status_code, _headers = vms_uuid_snapshot_post_with_http_info(uuid, opts)
      data
    end

    # Create a vm recovery point.
    # Submits a request to create a task handling the snapshot operation on the vm, returns a task reference. This creates a point in time recovery point. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [VmSnapshotInput] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_snapshot_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_snapshot_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_snapshot_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_snapshot_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vms/{uuid}/snapshot'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_snapshot_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_snapshot_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request IP addresses for NICs with the given UUIDs.
    # Request a new IP address the currently allocated IP address. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmUpdateIpInput] 
    # @param [Hash] opts the optional parameters
    # @return [ProceduralResponse]
    def vms_uuid_update_ip_put(uuid, body, opts = {})
      data, _status_code, _headers = vms_uuid_update_ip_put_with_http_info(uuid, body, opts)
      data
    end

    # Request IP addresses for NICs with the given UUIDs.
    # Request a new IP address the currently allocated IP address. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmUpdateIpInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def vms_uuid_update_ip_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_update_ip_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_update_ip_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_update_ip_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VmsApi.vms_uuid_update_ip_put"
      end
      # resource path
      local_var_path = '/vms/{uuid}/update_ip'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_update_ip_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_update_ip_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validates the feasibility of VM migration to given migration target. 
    # Validates the feasibility of VM migration to given migration target, if not feasible returns the reason behind it. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmValidateMigrationInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<VmValidateMigrationOutputInner>]
    def vms_uuid_validate_migration_post(uuid, body, opts = {})
      data, _status_code, _headers = vms_uuid_validate_migration_post_with_http_info(uuid, body, opts)
      data
    end

    # Validates the feasibility of VM migration to given migration target. 
    # Validates the feasibility of VM migration to given migration target, if not feasible returns the reason behind it. 
    # @param uuid [String] The UUID of the entity.
    # @param body [VmValidateMigrationInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VmValidateMigrationOutputInner>, Integer, Hash)>] Array<VmValidateMigrationOutputInner> data, response status code and response headers
    def vms_uuid_validate_migration_post_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmsApi.vms_uuid_validate_migration_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VmsApi.vms_uuid_validate_migration_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling VmsApi.vms_uuid_validate_migration_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VmsApi.vms_uuid_validate_migration_post"
      end
      # resource path
      local_var_path = '/vms/{uuid}/validate_migration'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<VmValidateMigrationOutputInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"VmsApi.vms_uuid_validate_migration_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmsApi#vms_uuid_validate_migration_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
