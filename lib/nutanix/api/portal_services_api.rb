=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class PortalServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all available software on Nutanix Portal
    # Get a list of portal software with specified type
    # @param software_type [String] Software type
    # @param [Hash] opts the optional parameters
    # @option opts [SoftwareListMetadata] :get_entities_request 
    # @return [SoftwareListIntentResponse]
    def portal_services_software_software_type_list_post(software_type, opts = {})
      data, _status_code, _headers = portal_services_software_software_type_list_post_with_http_info(software_type, opts)
      data
    end

    # Get all available software on Nutanix Portal
    # Get a list of portal software with specified type
    # @param software_type [String] Software type
    # @param [Hash] opts the optional parameters
    # @option opts [SoftwareListMetadata] :get_entities_request 
    # @return [Array<(SoftwareListIntentResponse, Integer, Hash)>] SoftwareListIntentResponse data, response status code and response headers
    def portal_services_software_software_type_list_post_with_http_info(software_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_software_software_type_list_post ...'
      end
      # verify the required parameter 'software_type' is set
      if @api_client.config.client_side_validation && software_type.nil?
        fail ArgumentError, "Missing the required parameter 'software_type' when calling PortalServicesApi.portal_services_software_software_type_list_post"
      end
      # resource path
      local_var_path = '/portal_services/software/{software_type}/list'.sub('{' + 'software_type' + '}', CGI.escape(software_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'get_entities_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SoftwareListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_software_software_type_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_software_software_type_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specified software information
    # Get the software info with specified type and version
    # @param software_type [String] Software type
    # @param version [String] Software version
    # @param [Hash] opts the optional parameters
    # @return [PortalSoftware]
    def portal_services_software_software_type_version_get(software_type, version, opts = {})
      data, _status_code, _headers = portal_services_software_software_type_version_get_with_http_info(software_type, version, opts)
      data
    end

    # Get specified software information
    # Get the software info with specified type and version
    # @param software_type [String] Software type
    # @param version [String] Software version
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortalSoftware, Integer, Hash)>] PortalSoftware data, response status code and response headers
    def portal_services_software_software_type_version_get_with_http_info(software_type, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_software_software_type_version_get ...'
      end
      # verify the required parameter 'software_type' is set
      if @api_client.config.client_side_validation && software_type.nil?
        fail ArgumentError, "Missing the required parameter 'software_type' when calling PortalServicesApi.portal_services_software_software_type_version_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling PortalServicesApi.portal_services_software_software_type_version_get"
      end
      # resource path
      local_var_path = '/portal_services/software/{software_type}/{version}'.sub('{' + 'software_type' + '}', CGI.escape(software_type.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PortalSoftware'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_software_software_type_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_software_software_type_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specified support case.
    # Returns the support case details for a given support case ID.
    # @param case_id [String] ID of the support case.
    # @param [Hash] opts the optional parameters
    # @return [SupportCaseIntentResponse]
    def portal_services_support_cases_case_id_get(case_id, opts = {})
      data, _status_code, _headers = portal_services_support_cases_case_id_get_with_http_info(case_id, opts)
      data
    end

    # Get specified support case.
    # Returns the support case details for a given support case ID.
    # @param case_id [String] ID of the support case.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportCaseIntentResponse, Integer, Hash)>] SupportCaseIntentResponse data, response status code and response headers
    def portal_services_support_cases_case_id_get_with_http_info(case_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_support_cases_case_id_get ...'
      end
      # verify the required parameter 'case_id' is set
      if @api_client.config.client_side_validation && case_id.nil?
        fail ArgumentError, "Missing the required parameter 'case_id' when calling PortalServicesApi.portal_services_support_cases_case_id_get"
      end
      # resource path
      local_var_path = '/portal_services/support_cases/{case_id}'.sub('{' + 'case_id' + '}', CGI.escape(case_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SupportCaseIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_support_cases_case_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_support_cases_case_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List support cases.
    # List of support cases. Supported filters are - - cluster_reference - serial_number 
    # @param get_entities_request [SupportCaseListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [SupportCaseListIntentResponse]
    def portal_services_support_cases_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = portal_services_support_cases_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # List support cases.
    # List of support cases. Supported filters are - - cluster_reference - serial_number 
    # @param get_entities_request [SupportCaseListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportCaseListIntentResponse, Integer, Hash)>] SupportCaseListIntentResponse data, response status code and response headers
    def portal_services_support_cases_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_support_cases_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling PortalServicesApi.portal_services_support_cases_list_post"
      end
      # resource path
      local_var_path = '/portal_services/support_cases/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SupportCaseListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_support_cases_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_support_cases_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create support case.
    # Given a spec, creates a support case with associated metadata.
    # @param body [SupportCaseIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [SupportCaseIntentResponse]
    def portal_services_support_cases_post(body, opts = {})
      data, _status_code, _headers = portal_services_support_cases_post_with_http_info(body, opts)
      data
    end

    # Create support case.
    # Given a spec, creates a support case with associated metadata.
    # @param body [SupportCaseIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportCaseIntentResponse, Integer, Hash)>] SupportCaseIntentResponse data, response status code and response headers
    def portal_services_support_cases_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_support_cases_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PortalServicesApi.portal_services_support_cases_post"
      end
      # resource path
      local_var_path = '/portal_services/support_cases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SupportCaseIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_support_cases_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_support_cases_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get screen template from portal.
    # Given a template ID it fetches that template.
    # @param template_id [String] ID of the screen for which it needs template.
    # @param [Hash] opts the optional parameters
    # @return [SupportCaseTemplateResponse]
    def portal_services_support_cases_template_template_id_get(template_id, opts = {})
      data, _status_code, _headers = portal_services_support_cases_template_template_id_get_with_http_info(template_id, opts)
      data
    end

    # Get screen template from portal.
    # Given a template ID it fetches that template.
    # @param template_id [String] ID of the screen for which it needs template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportCaseTemplateResponse, Integer, Hash)>] SupportCaseTemplateResponse data, response status code and response headers
    def portal_services_support_cases_template_template_id_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_support_cases_template_template_id_get ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling PortalServicesApi.portal_services_support_cases_template_template_id_get"
      end
      # resource path
      local_var_path = '/portal_services/support_cases/template/{template_id}'.sub('{' + 'template_id' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SupportCaseTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_support_cases_template_template_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_support_cases_template_template_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload attachements for a specific support case.
    # Given an intentful spec, trigger ncc health check and log uploads for a specified support case.
    # @param body [SupportCaseUploadIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [SupportCaseUploadIntentResponse]
    def portal_services_support_cases_upload_post(body, opts = {})
      data, _status_code, _headers = portal_services_support_cases_upload_post_with_http_info(body, opts)
      data
    end

    # Upload attachements for a specific support case.
    # Given an intentful spec, trigger ncc health check and log uploads for a specified support case.
    # @param body [SupportCaseUploadIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupportCaseUploadIntentResponse, Integer, Hash)>] SupportCaseUploadIntentResponse data, response status code and response headers
    def portal_services_support_cases_upload_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortalServicesApi.portal_services_support_cases_upload_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PortalServicesApi.portal_services_support_cases_upload_post"
      end
      # resource path
      local_var_path = '/portal_services/support_cases/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SupportCaseUploadIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PortalServicesApi.portal_services_support_cases_upload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortalServicesApi#portal_services_support_cases_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
