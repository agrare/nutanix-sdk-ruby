=begin
#Nutanix Intentful API

#Move programming from the user to the machine.

The version of the OpenAPI document: 3.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module Nutanix
  class EntitySyncRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of existing entity_sync_rules
    # This operation gets a list of entity_sync_rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [EntitySyncRuleListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySyncRuleListIntentResponse]
    def entity_sync_rules_list_post(get_entities_request, opts = {})
      data, _status_code, _headers = entity_sync_rules_list_post_with_http_info(get_entities_request, opts)
      data
    end

    # Get a list of existing entity_sync_rules
    # This operation gets a list of entity_sync_rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed. 
    # @param get_entities_request [EntitySyncRuleListMetadata] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySyncRuleListIntentResponse, Integer, Hash)>] EntitySyncRuleListIntentResponse data, response status code and response headers
    def entity_sync_rules_list_post_with_http_info(get_entities_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_list_post ...'
      end
      # verify the required parameter 'get_entities_request' is set
      if @api_client.config.client_side_validation && get_entities_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_entities_request' when calling EntitySyncRulesApi.entity_sync_rules_list_post"
      end
      # resource path
      local_var_path = '/entity_sync_rules/list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_entities_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EntitySyncRuleListIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_list_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_list_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new entity_sync_rule
    # This operation submits a request to create a new entity_sync_rule based on the input parameters. 
    # @param body [EntitySyncRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySyncRuleIntentResponse]
    def entity_sync_rules_post(body, opts = {})
      data, _status_code, _headers = entity_sync_rules_post_with_http_info(body, opts)
      data
    end

    # Create a new entity_sync_rule
    # This operation submits a request to create a new entity_sync_rule based on the input parameters. 
    # @param body [EntitySyncRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySyncRuleIntentResponse, Integer, Hash)>] EntitySyncRuleIntentResponse data, response status code and response headers
    def entity_sync_rules_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EntitySyncRulesApi.entity_sync_rules_post"
      end
      # resource path
      local_var_path = '/entity_sync_rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EntitySyncRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a existing entity_sync_rule
    # This operation submits a request to delete a existing entity_sync_rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def entity_sync_rules_uuid_delete(uuid, opts = {})
      entity_sync_rules_uuid_delete_with_http_info(uuid, opts)
      nil
    end

    # Delete a existing entity_sync_rule
    # This operation submits a request to delete a existing entity_sync_rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def entity_sync_rules_uuid_delete_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_uuid_delete ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_delete"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/entity_sync_rules/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_uuid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_uuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a existing entity_sync_rule
    # This operation gets a existing entity_sync_rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [EntitySyncRuleIntentResponse]
    def entity_sync_rules_uuid_get(uuid, opts = {})
      data, _status_code, _headers = entity_sync_rules_uuid_get_with_http_info(uuid, opts)
      data
    end

    # Get a existing entity_sync_rule
    # This operation gets a existing entity_sync_rule.
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySyncRuleIntentResponse, Integer, Hash)>] EntitySyncRuleIntentResponse data, response status code and response headers
    def entity_sync_rules_uuid_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_uuid_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_get, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/entity_sync_rules/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntitySyncRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_uuid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of entities which needs to be synced. 
    # Get the list of entities that are affected by this entity sync rule which needs to be synced to connected Availability Zones. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_categories Boolean to indicate whether the categories should be included in the response or not.  (default to false)
    # @option opts [String] :sort_attribute The attribute to perform sort on.
    # @option opts [String] :sort_order The sort order in which results are to be returned.
    # @option opts [Integer] :offset Offset from start of the entity list. (default to 0)
    # @option opts [Integer] :length The number of records to retrieve relative to the offset. (default to 20)
    # @return [Array<ListEntitiesToSyncResponseInner>]
    def entity_sync_rules_uuid_list_entities_to_sync_get(uuid, opts = {})
      data, _status_code, _headers = entity_sync_rules_uuid_list_entities_to_sync_get_with_http_info(uuid, opts)
      data
    end

    # Get the list of entities which needs to be synced. 
    # Get the list of entities that are affected by this entity sync rule which needs to be synced to connected Availability Zones. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_categories Boolean to indicate whether the categories should be included in the response or not.  (default to false)
    # @option opts [String] :sort_attribute The attribute to perform sort on.
    # @option opts [String] :sort_order The sort order in which results are to be returned.
    # @option opts [Integer] :offset Offset from start of the entity list. (default to 0)
    # @option opts [Integer] :length The number of records to retrieve relative to the offset. (default to 20)
    # @return [Array<(Array<ListEntitiesToSyncResponseInner>, Integer, Hash)>] Array<ListEntitiesToSyncResponseInner> data, response status code and response headers
    def entity_sync_rules_uuid_list_entities_to_sync_get_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_uuid_list_entities_to_sync_get ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_list_entities_to_sync_get"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_list_entities_to_sync_get, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling EntitySyncRulesApi.entity_sync_rules_uuid_list_entities_to_sync_get, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'length'].nil? && opts[:'length'] < 1
        fail ArgumentError, 'invalid value for "opts[:"length"]" when calling EntitySyncRulesApi.entity_sync_rules_uuid_list_entities_to_sync_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/entity_sync_rules/{uuid}/list_entities_to_sync'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_categories'] = opts[:'include_categories'] if !opts[:'include_categories'].nil?
      query_params[:'sort_attribute'] = opts[:'sort_attribute'] if !opts[:'sort_attribute'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'length'] = opts[:'length'] if !opts[:'length'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListEntitiesToSyncResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_uuid_list_entities_to_sync_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_uuid_list_entities_to_sync_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Process an entity sync rule.
    # It will be used whenever user wants to process an entity sync rule immediately, irrespective of sync trigger or schedule. It will override entities in case of conflicts. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EntitySyncRuleProcessInputInner>] :body 
    # @return [ProceduralResponse]
    def entity_sync_rules_uuid_process_post(uuid, opts = {})
      data, _status_code, _headers = entity_sync_rules_uuid_process_post_with_http_info(uuid, opts)
      data
    end

    # Process an entity sync rule.
    # It will be used whenever user wants to process an entity sync rule immediately, irrespective of sync trigger or schedule. It will override entities in case of conflicts. 
    # @param uuid [String] The UUID of the entity.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EntitySyncRuleProcessInputInner>] :body 
    # @return [Array<(ProceduralResponse, Integer, Hash)>] ProceduralResponse data, response status code and response headers
    def entity_sync_rules_uuid_process_post_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_uuid_process_post ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_process_post"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_process_post, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/entity_sync_rules/{uuid}/process'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ProceduralResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_uuid_process_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_uuid_process_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a existing entity_sync_rule
    # This operation submits a request to update a existing entity_sync_rule based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [EntitySyncRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [EntitySyncRuleIntentResponse]
    def entity_sync_rules_uuid_put(uuid, body, opts = {})
      data, _status_code, _headers = entity_sync_rules_uuid_put_with_http_info(uuid, body, opts)
      data
    end

    # Update a existing entity_sync_rule
    # This operation submits a request to update a existing entity_sync_rule based on the input parameters. 
    # @param uuid [String] The UUID of the entity.
    # @param body [EntitySyncRuleIntentInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntitySyncRuleIntentResponse, Integer, Hash)>] EntitySyncRuleIntentResponse data, response status code and response headers
    def entity_sync_rules_uuid_put_with_http_info(uuid, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitySyncRulesApi.entity_sync_rules_uuid_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_put"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && uuid !~ pattern
        fail ArgumentError, "invalid value for 'uuid' when calling EntitySyncRulesApi.entity_sync_rules_uuid_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EntitySyncRulesApi.entity_sync_rules_uuid_put"
      end
      # resource path
      local_var_path = '/entity_sync_rules/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EntitySyncRuleIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"EntitySyncRulesApi.entity_sync_rules_uuid_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitySyncRulesApi#entity_sync_rules_uuid_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
